<asdoc>

<classRec name='ListUtil' fullname='org.as3collections.utils:ListUtil' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\utils\ListUtil.as' namespace='org.as3collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A utility class to work with implementations of the <code>IList</code> interface.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='ListUtil' fullname='org.as3collections.utils:ListUtil/ListUtil' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 <code>ListUtil</code> is a static class and shouldn't be instantiated.

		 

		 ]]></description>
<throws><![CDATA[IllegalOperationError 	<code>ListUtil</code> is a static class and shouldn't be instantiated.

		 ]]></throws>
</method>
<method name='getTypedList' fullname='org.as3collections.utils:ListUtil/getTypedList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:IList;*' param_defaults='undefined;undefined' result_type='org.as3collections.lists:TypedList'>
<description><![CDATA[

		 Returns a new <code>TypedList</code> with the <code>wrapList</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped by the <code>TypedList</code>.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedList</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedList</code> with the <code>wrapList</code> argument wrapped.
		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='getTypedSortedList' fullname='org.as3collections.utils:ListUtil/getTypedSortedList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:ISortedList;*' param_defaults='undefined;undefined' result_type='org.as3collections.lists:TypedSortedList'>
<description><![CDATA[

		 Returns a new <code>TypedSortedList</code> with the <code>wrapList</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped by the <code>TypedSortedList</code>.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedSortedList</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedSortedList</code> with the <code>wrapList</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='getUniqueList' fullname='org.as3collections.utils:ListUtil/getUniqueList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList' param_types='org.as3collections:IList' param_defaults='undefined' result_type='org.as3collections.lists:UniqueList'>
<description><![CDATA[

		 Returns a new <code>UniqueList</code> with the <code>wrapList</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped by the <code>UniqueList</code>.

		 ]]></param>
<return><![CDATA[a new <code>UniqueList</code> with the <code>wrapList</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='getUniqueSortedList' fullname='org.as3collections.utils:ListUtil/getUniqueSortedList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList' param_types='org.as3collections:ISortedList' param_defaults='undefined' result_type='org.as3collections.lists:UniqueSortedList'>
<description><![CDATA[

		 Returns a new <code>UniqueSortedList</code> with the <code>wrapList</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped by the <code>UniqueSortedList</code>.

		 ]]></param>
<return><![CDATA[a new <code>UniqueSortedList</code> with the <code>wrapList</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='getUniqueTypedList' fullname='org.as3collections.utils:ListUtil/getUniqueTypedList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:IList;*' param_defaults='undefined;undefined' result_type='org.as3collections.lists:TypedList'>
<description><![CDATA[

		 Returns a new <code>TypedList</code> that wraps a new <code>UniqueList</code> that wraps the <code>wrapList</code> argument.

		 <p>The result will be a unique and typed array list, despite of the return type <code>TypedList</code>.</p>

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedList</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedList</code> that wraps a new <code>UniqueList</code> that wraps the <code>wrapList</code> argument.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='getUniqueTypedSortedList' fullname='org.as3collections.utils:ListUtil/getUniqueTypedSortedList' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:ISortedList;*' param_defaults='undefined;undefined' result_type='org.as3collections.lists:TypedSortedList'>
<description><![CDATA[

		 Returns a new <code>TypedSortedList</code> that wraps a new <code>UniqueSortedList</code> that wraps the <code>wrapList</code> argument.

		 <p>The result will be a unique and typed sorted list, despite of the return type <code>TypedSortedList</code>.</p>

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to be wrapped.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedSortedList</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedSortedList</code> that wraps a new <code>UniqueSortedList</code> that wraps the <code>wrapList</code> argument.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<classRec name='MapUtil' fullname='org.as3collections.utils:MapUtil' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\utils\MapUtil.as' namespace='org.as3collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A utility class to work with implementations of the <code>IMap</code> interface.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='MapUtil' fullname='org.as3collections.utils:MapUtil/MapUtil' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 <code>MapUtil</code> is a static class and shouldn't be instantiated.

		 

		 ]]></description>
<throws><![CDATA[IllegalOperationError 	<code>MapUtil</code> is a static class and shouldn't be instantiated.

		 ]]></throws>
</method>
<method name='equalConsideringOrder' fullname='org.as3collections.utils:MapUtil/equalConsideringOrder' isStatic='true' isFinal='false' isOverride='false'  param_names='map1;map2' param_types='org.as3collections:IMap;org.as3collections:IMap' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 If one of the maps or both maps are <code>null</code> it will be returned <code>false</code>.

		 <p>Two different objects are considered equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all mappings of object B</li>

		 <li>object B contains all mappings of object A</li>

		 <li>mappings have exactly the same order</li>

		 </ul></p>

		 <p>This implementation <b>takes care</b> of the order of the mappings in the maps.

		 So, for two maps are equal the order of entries returned by the iterator object must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[map1 	the first map.

		 ]]></param>
<param><![CDATA[map2 	the second map.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='equalNotConsideringOrder' fullname='org.as3collections.utils:MapUtil/equalNotConsideringOrder' isStatic='true' isFinal='false' isOverride='false'  param_names='map1;map2' param_types='org.as3collections:IMap;org.as3collections:IMap' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 If one of the maps or both maps are <code>null</code> it will be returned <code>false</code>.

		 <p>Two different objects are considered equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all mappings of object B</li>

		 <li>object B contains all mappings of object A</li>

		 </ul></p>

		 <p>This implementation <b>does not takes care</b> of the order of the mappings in the map.</p>

		 

		 ]]></description>
<param><![CDATA[map1 	the first map.

		 ]]></param>
<param><![CDATA[map2 	the second map.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='feedMapWithXmlList' fullname='org.as3collections.utils:MapUtil/feedMapWithXmlList' isStatic='true' isFinal='false' isOverride='false'  param_names='map;list;typeCoercion' param_types='org.as3collections:IMap;XMLList;Boolean' param_defaults='undefined;undefined;true' result_type='void'>
<description><![CDATA[

		 Feeds argument <code>map</code> with argument <code>list</code>.

		 <p>The name of the nodes become keys and the values of the nodes become values of the <code>IMap</code> object.</p>

		 

		 ]]></description>
<example><![CDATA[
		 

		 <listing version="3.0">

		 import org.as3collections.maps.HashMap;

		 import org.as3collections.utils.MapUtil;

		 

		 var map:IMap = new HashMap();

		 var xml:XML = &lt;index&gt;&lt;key1&gt;value1&lt;/key1&gt;&lt;key2&gt;value2&lt;/key2&gt;&lt;/index&gt;;

		 

		 MapUtil.feedMapFromXmlList(map, xml.children());

		 

		 trace(map); // [key1=value1,key2=value2]

		 </listing>

		 

		 ]]></example>
<param><![CDATA[map 			the map to be fed.

		 ]]></param>
<param><![CDATA[list 			the list to retrieve entries.

		 ]]></param>
<param><![CDATA[typeCoercion 	if <code>true</code> performs a type coercion to Boolean if some String is "true" or "false", or a type coercion to Number if some String is a Number <code>(i.e. !isNaN(Number(string)) == true)</code>.

		 ]]></param>
</method>
<method name='getTypedListMap' fullname='org.as3collections.utils:MapUtil/getTypedListMap' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:IListMap;*;*' param_defaults='undefined;undefined;undefined' result_type='org.as3collections.maps:TypedListMap'>
<description><![CDATA[

		 Returns a new <code>TypedListMap</code> with the <code>wrapMap</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to be wrapped by the <code>TypedListMap</code>.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by the returned <code>TypedListMap</code>.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by the returned <code>TypedListMap</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedListMap</code> with the <code>wrapMap</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='getTypedMap' fullname='org.as3collections.utils:MapUtil/getTypedMap' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:IMap;*;*' param_defaults='undefined;undefined;undefined' result_type='org.as3collections.maps:TypedMap'>
<description><![CDATA[

		 Returns a new <code>TypedMap</code> with the <code>wrapMap</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to be wrapped by the <code>TypedMap</code>.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by the returned <code>TypedMap</code>.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by the returned <code>TypedMap</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedMap</code> with the <code>wrapMap</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='getTypedSortedMap' fullname='org.as3collections.utils:MapUtil/getTypedSortedMap' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:ISortedMap;*;*' param_defaults='undefined;undefined;undefined' result_type='org.as3collections.maps:TypedSortedMap'>
<description><![CDATA[

		 Returns a new <code>TypedSortedMap</code> with the <code>wrapMap</code> argument wrapped.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to be wrapped by the <code>TypedSortedMap</code>.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by the returned <code>TypedSortedMap</code>.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by the returned <code>TypedSortedMap</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedSortedMap</code> with the <code>wrapMap</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='toString' fullname='org.as3collections.utils:MapUtil/toString' isStatic='true' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 Returns the string representation of the <code>map</code> argument.

		 

		 ]]></description>
<param><![CDATA[map the target map.

		 ]]></param>
<return><![CDATA[the string representation of the target map.

 		 ]]></return>
</method>
<classRec name='QueueUtil' fullname='org.as3collections.utils:QueueUtil' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\utils\QueueUtil.as' namespace='org.as3collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A utility class to work with implementations of the <code>IQueue</code> interface.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='QueueUtil' fullname='org.as3collections.utils:QueueUtil/QueueUtil' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 <code>QueueUtil</code> is a static class and shouldn't be instantiated.

		 

		 ]]></description>
<throws><![CDATA[IllegalOperationError 	<code>QueueUtil</code> is a static class and shouldn't be instantiated.

		 ]]></throws>
</method>
<method name='getTypedQueue' fullname='org.as3collections.utils:QueueUtil/getTypedQueue' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapQueue;type' param_types='org.as3collections:IQueue;*' param_defaults='undefined;undefined' result_type='org.as3collections.queues:TypedQueue'>
<description><![CDATA[

		 Returns a new <code>TypedQueue</code> with the <code>wrapList</code> argument wrapped.

		 

		 ]]></description>
<example><![CDATA[
		 

		 <listing version="3.0">

		 import org.as3collections.IQueue;

		 import org.as3collections.queues.LinearQueue;

		 import org.as3collections.queues.TypedQueue;

		 import org.as3collections.utils.QueueUtil;

		 

		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);

		 

		 var queue1:IQueue = QueueUtil.getTypedQueue(q1);

		 

		 queue1                      // [1,5,3,7]

		 queue1.size():              // 4

		 queue1.isEmpty()            // false

		 

		 queue1.poll()               // 1

		 queue1                      // [5,3,7]

		 

		 queue1.offer(2)             // true

		 queue1                      // [5,3,7,2]

		 

		 queue1.offer(5)             // true

		 queue1                      // [5,3,7,2,5]

		 

		 queue1.offer("a")           // false

		 queue1                      // [5,3,7,2,5]

		 

		 queue1.add("a")             // ClassCastError: Invalid element type. element: a | type: String | expected type: int

		 </listing>

		 

		 ]]></example>
<param><![CDATA[wrapQueue 	the target queue to be wrapped by the <code>TypedQueue</code>.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedQueue</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedQueue</code> with the <code>queue</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>queue</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapQueue</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='getUniqueQueue' fullname='org.as3collections.utils:QueueUtil/getUniqueQueue' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapQueue' param_types='org.as3collections:IQueue' param_defaults='undefined' result_type='org.as3collections.queues:UniqueQueue'>
<description><![CDATA[

		 Returns a new <code>UniqueQueue</code> with the <code>wrapQueue</code> argument wrapped.

		 

		 ]]></description>
<example><![CDATA[
		 

		 <listing version="3.0">

		 import org.as3collections.IQueue;

		 import org.as3collections.queues.LinearQueue;

		 import org.as3collections.queues.UniqueQueue;

		 import org.as3collections.utils.QueueUtil;

		 

		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);

		 

		 var queue1:IQueue = new UniqueQueue(q1); // you can use this way

		 

		 //var queue1:IQueue = QueueUtil.getUniqueQueue(q1); // or you can use this way

		 

		 queue1                      // [1,5,3,7]

		 queue1.size()               // 4

		 queue1.isEmpty()            // false

		 

		 queue1.poll()               // 1

		 queue1                      // [5,3,7]

		 

		 queue1.offer(2)             // true

		 queue1                      // [5,3,7,2]

		 

		 queue1.offer(5)             // false

		 queue1                      // [5,3,7,2]

		 

		 queue1.add(5)               // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5

		 </listing>

		 

		 ]]></example>
<param><![CDATA[wrapQueue 	the target queue to be wrapped by the <code>UniqueQueue</code>.

		 ]]></param>
<return><![CDATA[a new <code>UniqueQueue</code> with the <code>queue</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>queue</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='getUniqueTypedQueue' fullname='org.as3collections.utils:QueueUtil/getUniqueTypedQueue' isStatic='true' isFinal='false' isOverride='false'  param_names='wrapQueue;type' param_types='org.as3collections:IQueue;*' param_defaults='undefined;undefined' result_type='org.as3collections.queues:TypedQueue'>
<description><![CDATA[

		 Returns a new <code>TypedQueue</code> that wraps a new <code>UniqueQueue</code> that wraps the <code>wrapQueue</code> argument.

		 <p>The result will be a unique and typed array queue, despite of the return type <code>TypedQueue</code>.</p>

		 

		 ]]></description>
<example><![CDATA[
		 

		 <listing version="3.0">

		 import org.as3collections.IQueue;

		 import org.as3collections.queues.Queue;

		 import org.as3collections.queues.TypedQueue;

		 import org.as3collections.utils.QueueUtil;

		 

		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);

		 

		 var queue1:IQueue = QueueUtil.getUniqueTypedQueue(q1, int);

		 

		 queue1                  // [1,5,3,7]

		 queue1.size()           // 4

		 queue1.isEmpty()        // false

		 

		 queue1.poll()           // 1

		 queue1                  // [5,3,7]

		 

		 queue1.offer(2)         // true

		 queue1                  // [5,3,7,2]

		 

		 queue1.offer(5)         // false

		 queue1                  // [5,3,7,2]

		 

		 queue1.add(5)           // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5

		 

		 queue1.offer("a")       // false

		 queue1                  // [5,3,7,2]

		 

		 queue1.add("a")         // ClassCastError: Invalid element type. element: a | type: String | expected type: int

		 </listing>

		 

		 ]]></example>
<param><![CDATA[wrapQueue 	the target queue to be wrapped.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by the returned <code>TypedQueue</code>.

		 ]]></param>
<return><![CDATA[a new <code>TypedQueue</code> with the <code>queue</code> argument wrapped.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>queue</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapQueue</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<classRec name='CollectionUtil' fullname='org.as3collections.utils:CollectionUtil' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\utils\CollectionUtil.as' namespace='org.as3collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A utility class to work with implementations of the <code>ICollection</code> interface.

	 <p><code>CollectionUtil</code> handles <code>null</code> input collections quietly in almost all methods. When not, it's documented in the method.

	 That is to say that a <code>null</code> input will not thrown an error in almost all methods.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='CollectionUtil' fullname='org.as3collections.utils:CollectionUtil/CollectionUtil' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 <code>CollectionUtil</code> is a static class and shouldn't be instantiated.

		 

		 ]]></description>
<throws><![CDATA[IllegalOperationError 	<code>CollectionUtil</code> is a static class and shouldn't be instantiated.

		 ]]></throws>
</method>
<method name='containsDuplication' fullname='org.as3collections.utils:CollectionUtil/containsDuplication' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='containsOnlyType' fullname='org.as3collections.utils:CollectionUtil/containsOnlyType' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;type;strict' param_types='org.as3collections:ICollection;*;Boolean' param_defaults='undefined;undefined;false' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if the collection contains only elements of the <code>type</code> argument.

		 <p>This method uses <code>org.as3utils.ArrayUtil.containsOnlyType()</code></p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to check. May be <code>null</code>.

		 ]]></param>
<param><![CDATA[element 	the type of the elements.

		 ]]></param>
<param><![CDATA[strict 		defines if the type of the elements should be strictly equal.

		 ]]></param>
<return><![CDATA[<code>true</code> if the collection contains only elements of the <code>type</code> argument. If the collection is <code>null</code> or empty returns <code>false</code>.

		 ]]></return>
</method>
<method name='equalConsideringOrder' fullname='org.as3collections.utils:CollectionUtil/equalConsideringOrder' isStatic='true' isFinal='false' isOverride='false'  param_names='collection1;collection2' param_types='org.as3collections:ICollection;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between the two arguments.

		 If one of the collections or both collections are <code>null</code> it will be returned <code>false</code>.

		 <p>Two different objects are considered equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 <li>elements have exactly the same order</li>

		 </ul></p>

		 <p>This implementation <b>takes care</b> of the order of the elements in the collections.

		 So, for two collections are equal the order of elements returned by the iterator object must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[collection1 	the first collection.

		 ]]></param>
<param><![CDATA[collection2 	the second collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='equalNotConsideringOrder' fullname='org.as3collections.utils:CollectionUtil/equalNotConsideringOrder' isStatic='true' isFinal='false' isOverride='false'  param_names='collection1;collection2' param_types='org.as3collections:ICollection;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 If one of the collections or both collections are <code>null</code> it will be returned <code>false</code>.

		 <p>Two different objects are considered equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 </ul></p>

		 <p>This implementation <b>does not takes care</b> of the order of the elements in the collections.</p>

		 

		 ]]></description>
<param><![CDATA[collection1 	the first collection.

		 ]]></param>
<param><![CDATA[collection2 	the second collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='filterByType' fullname='org.as3collections.utils:CollectionUtil/filterByType' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;type' param_types='org.as3collections:ICollection;Class' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns the collection object containing only objects of the type of the <code>type</code> argument.

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection for filtering. May be <code>null</code>.

		 ]]></param>
<param><![CDATA[type 		the type of the objects that should remain in the collection.

		 ]]></param>
<return><![CDATA[the collection object containing only objects of the type of the <code>type</code> argument.
		 ]]></return>
</method>
<method name='getDuplicate' fullname='org.as3collections.utils:CollectionUtil/getDuplicate' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='org.as3collections:ICollection'>
</method>
<method name='maxValueIndex' fullname='org.as3collections.utils:CollectionUtil/maxValueIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Returns the index position of the largest number in the specified collection.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection object to check. May be <code>null</code>.

		 ]]></param>
<return><![CDATA[the index position of the largest number in the collection object. If the collection argument is <code>null</code> or empty then the return is -1.
		 ]]></return>
</method>
<method name='maxValue' fullname='org.as3collections.utils:CollectionUtil/maxValue' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Returns the largest number in the specified collection.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection object to check. May be <code>null</code>.

		 ]]></param>
<return><![CDATA[the largest number in the collection object. If the collection argument is <code>null</code> or empty then the return is <code>NaN</code>.
		 ]]></return>
</method>
<method name='removeAllOccurances' fullname='org.as3collections.utils:CollectionUtil/removeAllOccurances' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;element' param_types='org.as3collections:ICollection;*' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Removes all occurances of a the given <code>element</code> argument from the given collection argument.

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[]]></return>
</method>
<method name='removeDuplicate' fullname='org.as3collections.utils:CollectionUtil/removeDuplicate' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Removes duplicated objects.

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to remove duplicated objects.

		 ]]></param>
<return><![CDATA[the collection object without duplicated objects.
		 ]]></return>
</method>
<method name='shuffle' fullname='org.as3collections.utils:CollectionUtil/shuffle' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Shuffles the position of the elements of the given <code>collection</code>.

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to shuffle. May be <code>null</code>.

		 ]]></param>
<return><![CDATA[the modified collection.
		 ]]></return>
</method>
<method name='sortAlphabeticallyByObjectProperty' fullname='org.as3collections.utils:CollectionUtil/sortAlphabeticallyByObjectProperty' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;property;comparison' param_types='org.as3collections:ICollection;String;org.as3coreaddendum.system.comparators:AlphabeticalComparison' param_defaults='undefined;undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the collection of objects alphabetically through the object's <code>property</code>.

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortAlphabeticallyByObjectProperty</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 		the collection to sort.

		 ]]></param>
<param><![CDATA[property 		the name of the property to be recovered and compared between the objects.

		 ]]></param>
<param><![CDATA[comparison		indicates which type of comparison will be used.

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='sortAlphabetically' fullname='org.as3collections.utils:CollectionUtil/sortAlphabetically' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;comparison' param_types='org.as3collections:ICollection;org.as3coreaddendum.system.comparators:AlphabeticalComparison' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the collection of <code>String</code> objects alphabetically.

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortAlphabetically</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 		the collection to sort.

		 ]]></param>
<param><![CDATA[comparison		indicates which type of comparison will be used.

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='sortAscendingByObjectProperty' fullname='org.as3collections.utils:CollectionUtil/sortAscendingByObjectProperty' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;property' param_types='org.as3collections:ICollection;String' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the collection of objects ascending through the object's property (must be a numeric value).

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortAscendingByObjectProperty</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to sort.

		 ]]></param>
<param><![CDATA[property 	the name of the property to be recovered and compared between the objects.

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='sortAscending' fullname='org.as3collections.utils:CollectionUtil/sortAscending' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the collection of <code>Number</code> objects ascending.

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortAscending</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to sort.

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='sortDescendingByObjectProperty' fullname='org.as3collections.utils:CollectionUtil/sortDescendingByObjectProperty' isStatic='true' isFinal='false' isOverride='false'  param_names='collection;property' param_types='org.as3collections:ICollection;String' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the array of objects descending through the object's property (must be a numeric value).

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortDescendingByObjectProperty</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to sort. 	

		 ]]></param>
<param><![CDATA[property 	the name of the property to be recovered and compared between the objects. 	

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='sortDescending' fullname='org.as3collections.utils:CollectionUtil/sortDescending' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Sorts the array of <code>Number</code> objects descending.

		 <p>This method uses the <code>org.as3coreaddendum.utils.ArrayUtil.sortDescending</code> method.</p>

		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to sort.

		 ]]></param>
<return><![CDATA[the sorted collection.
		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections.utils:CollectionUtil/toString' isStatic='true' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 Returns the string representation of the <code>collection</code> argument.

		 

		 ]]></description>
<param><![CDATA[collection 	the target collection.

		 ]]></param>
<return><![CDATA[the string representation of the target collection.

 		 ]]></return>
</method>
<interfaceRec name='IIterable' fullname='org.as3collections:IIterable' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IIterable.as' namespace='org.as3collections' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 Implementing this interface allows an object to be iterable.
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<see><![CDATA[org.as3collections.IIterator IIterator
	 ]]></see>
</interfaceRec>
<method name='iterator' fullname='org.as3collections:IIterable/org.as3collections:IIterable:iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[
		 Returns an iterator over a set of elements.
		 
		 ]]></description>
<return><![CDATA[an iterator over a set of elements.
 		 ]]></return>
</method>
<interfaceRec name='IIterator' fullname='org.as3collections:IIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IIterator.as' namespace='org.as3collections' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator over a collection.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</interfaceRec>
<method name='hasNext' fullname='org.as3collections:IIterator/org.as3collections:IIterator:hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns <code>true</code> if the iteration has more elements.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements.
 		 ]]></return>
</method>
<method name='next' fullname='org.as3collections:IIterator/org.as3collections:IIterator:next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the next element in the iteration.
		 

		 ]]></description>
<return><![CDATA[the next element in the iteration.
 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no more elements.

		 ]]></throws>
</method>
<method name='pointer' fullname='org.as3collections:IIterator/org.as3collections:IIterator:pointer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the internal pointer of the iteration.

		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <code>int</code>.</p>

		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 ]]></description>
<return><![CDATA[the internal pointer of the iteration.
 		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections:IIterator/org.as3collections:IIterator:remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes from the underlying collection the last element returned by the iterator (optional operation).

		 <p>This method can be called only once per call to <code>next</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method.

		 ]]></throws>
</method>
<method name='reset' fullname='org.as3collections:IIterator/org.as3collections:IIterator:reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resets the internal pointer of the iterator.
		 ]]></description>
</method>
<interfaceRec name='IListMapIterator' fullname='org.as3collections:IListMapIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IListMapIterator.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator for maps that allows the programmer to traverse the map in either direction, modify the map during iteration, and obtain the iterator's current position in the map.
	 <p>Note that the <code>remove</code> and <code>set</code> methods are defined to operate on the last mapping returned by a call to <code>next</code> or <code>previous</code>.</p>

	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</interfaceRec>
<method name='hasPrevious' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if the iteration has more mappings when traversing the map in the reverse direction.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more mappings when traversing the map in the reverse direction.

 		 ]]></return>
</method>
<method name='nextIndex' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:nextIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the index of the mapping that would be returned by a subsequent call to <code>next</code>.

		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 ]]></description>
<return><![CDATA[the index of the mapping that would be returned by a subsequent call to <code>next</code>, or map size if map iterator is at end of map.
 		 ]]></return>
</method>
<method name='previousIndex' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:previousIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the index of the mapping that would be returned by a subsequent call to <code>previous</code>.

		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 ]]></description>
<return><![CDATA[the index of the mapping that would be returned by a subsequent call to <code>previous</code>, or -1 if map iterator is at beginning of map.
 		 ]]></return>
</method>
<method name='previous' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the previous mapping in the iteration.

		 

		 ]]></description>
<return><![CDATA[the previous mapping in the iteration.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 			if the iteration has no previous mappings.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map. (optional operation)

		 The mapping is inserted immediately before the next mapping that would be returned by <code>next</code>, if any, and after the next mapping that would be returned by <code>previous</code>, if any.

		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)

		 The new mapping is inserted before the implicit cursor: a subsequent call to <code>next</code> would be unaffected, and a subsequent call to <code>previous</code> would return the new mapping.

		 (This call increases by one the value that would be returned by a call to <code>nextIndex</code> or <code>previousIndex</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the map already contains the specified key.

		 ]]></throws>
</method>
<method name='set' fullname='org.as3collections:IListMapIterator/org.as3collections:IListMapIterator:set' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Replaces the last mapping returned by <code>next</code> or <code>previous</code> with the specified mapping (optional operation).

		 This call can be made only if neither <code>IListMapIterator.remove</code> nor <code>IListMapIterator.add</code> have been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key. 

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>set</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if neither <code>next</code> or <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the map already contains the specified key and it is not the replaced key.

		 ]]></throws>
</method>
<interfaceRec name='IListIterator' fullname='org.as3collections:IListIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IListIterator.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list.
	 <p>Note that the <code>remove</code> and <code>set</code> methods are defined to operate on the last element returned by a call to <code>next</code> or <code>previous</code>.</p>

	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</interfaceRec>
<method name='add' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <code>next</code>, if any, and after the next element that would be returned by <code>previous</code>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <code>next</code> would be unaffected, and a subsequent call to <code>previous</code> would return the new element. (This call increases by one the value that would be returned by a call to <code>nextIndex</code> or <code>previousIndex</code>.) 

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the list has changed as a result of the call. Returns <code>false</code> if the list does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='hasPrevious' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if the iteration has more elements when traversing the list in the reverse direction.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements when traversing the list in the reverse direction.

 		 ]]></return>
</method>
<method name='nextIndex' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:nextIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the index of the element that would be returned by a subsequent call to <code>next</code>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 ]]></description>
<return><![CDATA[the index of the element that would be returned by a subsequent call to <code>next</code>, or list size if list iterator is at end of list.
 		 ]]></return>
</method>
<method name='previousIndex' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:previousIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the index of the element that would be returned by a subsequent call to <code>previous</code>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 ]]></description>
<return><![CDATA[the index of the element that would be returned by a subsequent call to <code>previous</code>, or -1 if list iterator is at beginning of list.
 		 ]]></return>
</method>
<method name='previous' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the previous element in the iteration.

		 

		 ]]></description>
<return><![CDATA[the previous element in the iteration.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 			if the iteration has no previous elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='set' fullname='org.as3collections:IListIterator/org.as3collections:IListIterator:set' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Replaces the last element returned by <code>next</code> or <code>previous</code> with the specified element (optional operation). This call can be made only if neither <code>IListIterator.remove</code> nor <code>IListIterator.add</code> have been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<param><![CDATA[element 	the element with which to replace the last element returned by <code>next</code> or <code>previous</code>. 

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>set</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if neither <code>next</code> or <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>.

		 ]]></throws>
</method>
<interfaceRec name='IMap' fullname='org.as3collections:IMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IMap.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IIterable;org.as3coreaddendum.system:ICloneable;org.as3coreaddendum.system:IEquatable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An object that maps keys to values.

	 A map cannot contain duplicate keys, each key can map to at most one value.

	 <p>This interface provides three collection views, which allow a map's contents to be viewed as a list of keys, a list of values, or a list of key-value mappings (<code>IMapEntry</code>).

	 Some map implementations, like the <code>ArrayListMap</code> class, make specific guarantees as to their order; others, like the <code>HashMap</code> class, do not.</p>

	 <p>These views, plus <code>IMap.iterator()</code>, enable various forms of iteration over the keys and values of the map.

	 To iterate over the keys/values the user can use <code>IMap.iterator()</code> or <code>IMap.entryList().iterator()</code>.

	 To iterate over the keys the user can use <code>IMap.getKeys().iterator()</code>.

	 To iterate over the values the user can use <code>IMap.getValues().iterator()</code>.</p>

	 <p>Some map implementations have restrictions on the keys and values they may contain.

	 For example, some implementations prohibit <code>null</code> keys and values, and some have restrictions on the types of their keys or values.</p>

	 <p>The methods that modify the map are specified to throw <code>org.as3coreaddendum.errors.UnsupportedOperationError</code> if the map does not support the operation.

	 These methods are documented as "optional operation".</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.AbstractHashMap AbstractHashMap

	 ]]></see>
<see><![CDATA[org.as3collections.AbstractListMap AbstractListMap

	 ]]></see>
<see><![CDATA[org.as3collections.IMapEntry IMapEntry

	 ]]></see>
<see><![CDATA[org.as3collections.IListMap IListMap

	 ]]></see>
</interfaceRec>
<method name='clear' fullname='org.as3collections:IMap/org.as3collections:IMap:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes all of the mappings from this map (optional operation).

		 The map will be empty after this call returns.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>clear</code> operation is not supported by this map.

		 ]]></throws>
</method>
<method name='containsKey' fullname='org.as3collections:IMap/org.as3collections:IMap:containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this map contains a mapping for the specified key.

		 

		 ]]></description>
<param><![CDATA[key 	key whose presence in this map is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map contains a mapping for the specified key.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='containsValue' fullname='org.as3collections:IMap/org.as3collections:IMap:containsValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this map maps one or more keys to the specified value.

		 

		 ]]></description>
<param><![CDATA[value 	value whose presence in this map is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map maps one or more keys to the specified value.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified value is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified value is <code>null</code> and this map does not permit <code>null</code> values (optional).

		 ]]></throws>
</method>
<method name='entryCollection' fullname='org.as3collections:IMap/org.as3collections:IMap:entryCollection' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ICollection</code> object that is a view of the mappings contained in this map.

		 The type of the objects within the map is <code>IMapEntry</code>

		 <p>Modifications in the <code>ICollection</code> object does not affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ICollection</code> object that is a view of the mappings contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IMapEntry IMapEntry

		 ]]></see>
<see><![CDATA[org.as3collections.ICollection ICollection

 		 ]]></see>
</method>
<method name='getKeys' fullname='org.as3collections:IMap/org.as3collections:IMap:getKeys' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ICollection</code> object that is a view of the keys contained in this map.

		 <p>Modifications in the <code>ICollection</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ICollection</code> object that is a view of the keys contained in this map.

 		 ]]></return>
</method>
<method name='getValue' fullname='org.as3collections:IMap/org.as3collections:IMap:getValue' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 <p>If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contains no mapping for the key.

		 It's possible that the map explicitly maps the key to <code>null</code>.

		 The <code>containsKey</code> method may be used to distinguish these two cases.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose associated value is to be returned.

		 ]]></param>
<return><![CDATA[the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='getValues' fullname='org.as3collections:IMap/org.as3collections:IMap:getValues' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ICollection</code> object that is a view of the values contained in this map.

		 <p>Modifications in the <code>ICollection</code> object does not affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ICollection</code> object that is a view of the values contained in this map.

 		 ]]></return>
</method>
<method name='isEmpty' fullname='org.as3collections:IMap/org.as3collections:IMap:isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this map contains no key-value mappings.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if this map contains no key-value mappings.

 		 ]]></return>
</method>
<method name='putAllByObject' fullname='org.as3collections:IMap/org.as3collections:IMap:putAllByObject' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Retrieves each property of the specified object, calling <code>put</code> on this map once for each property (optional operation).

		 

		 ]]></description>
<param><![CDATA[o the object to retrieve the properties.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAllByObject</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified object is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified object is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified object contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putAll' fullname='org.as3collections:IMap/org.as3collections:IMap:putAll' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Copies all of the mappings from the specified map to this map (optional operation).

		 The effect of this call is equivalent to that of calling <code>put(k, v)</code> on this map once for each mapping from key <code>k</code> to value <code>v</code> in the specified map.

		 

		 ]]></description>
<param><![CDATA[map 	mappings to be stored in this map.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified map is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified map contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putEntry' fullname='org.as3collections:IMap/org.as3collections:IMap:putEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified <code>entry.value</code> with the specified <code>entry.key</code> in this map (optional operation).

		 If the map previously contained a mapping for the <code>entry.key</code>, the old value is replaced by the specified <code>entry.value</code>. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 <p>The effect of this call is equivalent to that of calling <code>put(entry.key, entry.value)</code> on this map.</p>

		 

		 ]]></description>
<param><![CDATA[entry 	entry to put in this map.

		 ]]></param>
<return><![CDATA[the previous value associated with <code>entry.key</code>, or <code>null</code> if there was no mapping for <code>entry.key</code>. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with <code>entry.key</code>, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putEntry</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified <code>entry.key</code> or <code>entry.value</code> is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified entry is <code>null</code>, or if the specified <code>entry.key</code> or <code>entry.value</code> is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections:IMap/org.as3collections:IMap:put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map (optional operation).

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>put</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified key or value is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections:IMap/org.as3collections:IMap:removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).

		 The elements in the specified collection are interpreted as keys.

		 <p>The effect of this call is equivalent to that of calling <code>remove</code> on this map once for each element in the speficied collection.</p>

		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be removed from the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of an element in the specified collection is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified collection is <code>null</code>, or if this map does not permit <code>null</code> keys, and the specified collections contains <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections:IMap/org.as3collections:IMap:remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the mapping for a key from this map if it is present (optional operation).

		 <p>Returns the value to which this map previously associated the key, or <code>null</code> if the map contained no mapping for the key.

		 If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <code>null</code>.</p>

		 <p>The map will not contain a mapping for the specified key once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose mapping is to be removed from the map.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for <code>key</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections:IMap/org.as3collections:IMap:retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).

		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.

		 The elements in the specified collection are interpreted as keys.

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be retained in the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>retainAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more keys in this map are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> keys (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='size' fullname='org.as3collections:IMap/org.as3collections:IMap:size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the number of key-value mappings in this map. 

		 

		 ]]></description>
<return><![CDATA[the number of key-value mappings in this map.

 		 ]]></return>
</method>
<method name='allKeysEquatable' fullname='org.as3collections:IMap/org.as3collections:IMap:allKeysEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Indicates whether all keys in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='allValuesEquatable' fullname='org.as3collections:IMap/org.as3collections:IMap:allValuesEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Indicates whether all values in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<interfaceRec name='ICollection' fullname='org.as3collections:ICollection' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\ICollection.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IIterable;org.as3coreaddendum.system:ICloneable;org.as3coreaddendum.system:IEquatable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The root interface in the <em>collection hierarchy</em>.

	 A collection represents a group of objects, known as its <em>elements</em>.

	 <p>Some collections allow duplicate elements and others do not. Some are ordered and others unordered.</p>

	 <p>This interface is typically used to pass collections around and manipulate them where maximum generality is desired.</p>

	 <p>The methods that modify the collection are specified to throw org.as3coreaddendum.errors.UnsupportedOperationError if the collection does not support the operation.

	 These methods are documented as "optional operation".</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.AbstractArrayCollection AbstractArrayCollection

	 ]]></see>
<see><![CDATA[org.as3collections.IIterable IIterable

	 ]]></see>
<see><![CDATA[org.as3collections.IList IList

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ICloneable.html	org.as3coreaddendum.system.ICloneable

	 ]]></see>
</interfaceRec>
<method name='addAll' fullname='org.as3collections:ICollection/org.as3collections:ICollection:addAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Adds all of the elements in the specified collection to this collection (optional operation).

		 

		 ]]></description>
<param><![CDATA[collection 	collection containing elements to be added to this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAll</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of an element of the specified collection prevents it from being added to this collection.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements, or if the specified collection is <code>null</code>. 

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:ICollection/org.as3collections:ICollection:add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Ensures that this collection contains the specified element (optional operation). 

		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.

		 In particular, some collections will refuse to add <code>null</code> elements, and others will impose restrictions on the type of elements that may be added.

		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>

		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <em>must</em> throw an error (rather than returning <code>false</code>).

		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call. Returns <code>false</code> if this collection does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>add</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this collection.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified element is <code>null</code> and this collection does not permit <code>null</code> elements.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections:ICollection/org.as3collections:ICollection:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes all of the elements from this collection (optional operation).

		 The collection will be empty after this method returns.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>clear</code> operation is not supported by this collection.

		 ]]></throws>
</method>
<method name='containsAll' fullname='org.as3collections:ICollection/org.as3collections:ICollection:containsAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this collection contains all of the elements in the specified collection. 

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to be checked for containment in this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection contains all of the elements in the specified collection.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in the specified collection are incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains one or more <code>null</code> elements and this collection does not permit <code>null</code> elements (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='contains' fullname='org.as3collections:ICollection/org.as3collections:ICollection:contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this collection contains the specified object.

		 

		 ]]></description>
<param><![CDATA[o 	object whose presence in this collection is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection contains the specified object.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified object is incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified object is <code>null</code> and this collection does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='isEmpty' fullname='org.as3collections:ICollection/org.as3collections:ICollection:isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this collection contains no elements.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if this collection contains no elements.

 		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3collections:ICollection/org.as3collections:ICollection:removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes all elements of this collection that are also contained in the specified collection (optional operation).

		 After this call returns, this collection will contain no elements in common with the specified collection.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be removed from this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection has changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAll</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in this collection are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections:ICollection/org.as3collections:ICollection:remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).

		 

		 ]]></description>
<param><![CDATA[o 	the object to be removed from this collection, if present.

		 ]]></param>
<return><![CDATA[<code>true</code> if an object was removed as a result of this call.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#removeAllOccurances() 	CollectionUtil.removeAllOccurances()

		 ]]></see>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified object is incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified object is <code>null</code> and this collection does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections:ICollection/org.as3collections:ICollection:retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Retains only the elements in this collection that are contained in the specified collection (optional operation).

		 In other words, removes from this collection all of its elements that are not contained in the specified collection.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be retained in this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call. 	

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>retainAll</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in this collection are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='size' fullname='org.as3collections:ICollection/org.as3collections:ICollection:size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the number of elements in this collection.

		 

		 ]]></description>
<return><![CDATA[the number of elements in this collection.

 		 ]]></return>
</method>
<method name='toArray' fullname='org.as3collections:ICollection/org.as3collections:ICollection:toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 Returns an array containing all of the elements in this collection.

		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>

		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.

		 (In other words, this method must allocate a new array even if this collection is backed by an array).

		 The caller is thus free to modify the returned array.</p>

		 

		 ]]></description>
<return><![CDATA[a new array object containing all of the elements in this collection.

 		 ]]></return>
</method>
<method name='allEquatable' fullname='org.as3collections:ICollection/org.as3collections:ICollection:allEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Indicates whether all elements in this collection implement the interface <code>org.as3coreaddendum.system.IEquatable</code>.

		 ]]></description>
</method>
<interfaceRec name='IMapEntry' fullname='org.as3collections:IMapEntry' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IMapEntry.as' namespace='org.as3collections' access='public' baseClasses='org.as3coreaddendum.system:ICloneable;org.as3coreaddendum.system:IEquatable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A map entry (key-value pair). The <code>IMap.entryList</code> method returns a collection-view of the map, whose elements type are of this class.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</interfaceRec>
<method name='key' fullname='org.as3collections:IMapEntry/org.as3collections:IMapEntry:key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key corresponding to this entry.
		 ]]></description>
</method>
<method name='value' fullname='org.as3collections:IMapEntry/org.as3collections:IMapEntry:value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the value corresponding to this entry.
		 ]]></description>
</method>
<interfaceRec name='IListMap' fullname='org.as3collections:IListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IListMap.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An ordered map.

	 The user of this interface has precise control over where in the map each mapping is inserted.

	 The user can access mappings by their integer index (position in the map), and search for mappings in the map.

	 <p>The <code>IListMap</code> interface provides the special <code>IListMapIterator</code> iterator, that allows mapping insertion and replacement, and bidirectional access in addition to the normal operations that the <code>IIterator</code> interface provides.

	 The <code>listMapIterator()</code> method is provided to obtain a <code>IListMapIterator</code> implementation that may start at a specified position in the map.</p>

	 <p>This interface has the purpose to, in certain degree, unify <code>IList</code> and <code>IMap</code> interfaces.</p>

	 <p>The methods that modify the map are specified to throw <code>org.as3coreaddendum.errors.UnsupportedOperationError</code> if the map does not support the operation.

	 These methods are documented as "optional operation".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.AbstractListMap AbstractListMap

	 ]]></see>
<see><![CDATA[org.as3collections.IMap IMap

	 ]]></see>
<see><![CDATA[org.as3collections.ISortedMap ISortedMap

	 ]]></see>
<see><![CDATA[org.as3collections.IListMapIterator IListMapIterator

	 ]]></see>
</interfaceRec>
<method name='getKeyAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:getKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the key at the specified position in this map.

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to return.

		 ]]></param>
<return><![CDATA[the key at the specified position in this map.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='getValueAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:getValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the value at the specified position in this map.

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to return.

		 ]]></param>
<return><![CDATA[the value at the specified position in this map.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='headMap' fullname='org.as3collections:IListMap/org.as3collections:IListMap:headMap' isStatic='false' isFinal='false' isOverride='false'  param_names='toKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new <code>IListMap</code> object that is a view of the portion of this map whose keys are strictly less than <code>toKey</code>.

		 The returned map supports all optional map operations that this map supports.

		 

		 ]]></description>
<param><![CDATA[toKey 	high endpoint (exclusive) of the keys in the returned map.

		 ]]></param>
<return><![CDATA[a new <code>IListMap</code> that is a view of the portion of this map whose keys are strictly less than <code>toKey</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError 	if <code>toKey</code> is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError 	if <code>containsKey(toKey)</code> returns <code>false</code>.

		 ]]></throws>
</method>
<method name='indexOfKey' fullname='org.as3collections:IListMap/org.as3collections:IListMap:indexOfKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>first occurrence</em> of the specified key in this map, or -1 if this map does not contain the key.

		 

		 ]]></description>
<param><![CDATA[key 	the key to search for.

		 ]]></param>
<return><![CDATA[the index of the first occurrence of the specified key in this map, or -1 if this map does not contain the key.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='indexOfValue' fullname='org.as3collections:IListMap/org.as3collections:IListMap:indexOfValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>first occurrence</em> of the specified value in this map, or -1 if this map does not contain the value.

		 

		 ]]></description>
<param><![CDATA[value 	the value to search for.

		 ]]></param>
<return><![CDATA[the index of the first occurrence of the specified value in this map, or -1 if this map does not contain the value.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified value is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified value is <code>null</code> and this map does not permit <code>null</code> values (optional).

		 ]]></throws>
</method>
<method name='listMapIterator' fullname='org.as3collections:IListMap/org.as3collections:IListMap:listMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListMapIterator'>
<description><![CDATA[

		 Returns a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 The specified index indicates the first value that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the value with the specified index minus one.

		 

		 ]]></description>
<param><![CDATA[index 	index of first value to be returned from the iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 ]]></return>
</method>
<method name='putAllAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:putAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;map' param_types='int;org.as3collections:IMap' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Copies all of the mappings from the specified map to this map (optional operation).

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).

		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.

		 

		 ]]></description>
<param><![CDATA[index 	index at which to insert the first entry from the specified map.

		 ]]></param>
<param><![CDATA[map 	mappings to be stored in this map.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAllAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified map is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified map contains <code>null</code> keys or values.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map contains one or more keys already added in this map.

		 ]]></throws>
</method>
<method name='putAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:putAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key;value' param_types='int;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Associates the specified value with the specified key at the specified position in this map (optional operation).

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).

		 

		 ]]></description>
<param><![CDATA[index 	index at which the specified entry is to be inserted.

		 ]]></param>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the specified key or value is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='removeAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='org.as3collections:IMapEntry'>
<description><![CDATA[

		 Removes the mapping at the specified position in this map (optional operation).

		 Shifts any subsequent mappings to the left (subtracts one from their indices).

		 Returns an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map. 

		 

		 ]]></description>
<param><![CDATA[index 	the index of the mapping to be removed.

		 ]]></param>
<return><![CDATA[an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections:IListMap/org.as3collections:IListMap:removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Removes all of the mappings whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (optional operation).

		 Shifts any subsequent mappings to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new map containing all the removed mappings.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeRange</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='reverse' fullname='org.as3collections:IListMap/org.as3collections:IListMap:reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Reverses the order of the mappings in this map.

		 ]]></description>
</method>
<method name='setKeyAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:setKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the key at the specified position in this map with the specified key (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to replace.

		 ]]></param>
<param><![CDATA[key 	key to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the key previously at the specified position.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setKeyAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified key prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified key is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='setValueAt' fullname='org.as3collections:IListMap/org.as3collections:IListMap:setValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;value' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the value at the specified position in this map with the specified value (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to replace.

		 ]]></param>
<param><![CDATA[value 	value to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the value previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setValueAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified value prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified value is <code>null</code> and this map does not permit <code>null</code> values.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='subMap' fullname='org.as3collections:IListMap/org.as3collections:IListMap:subMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new <code>IListMap</code> object that is a view of the portion of this map between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>The returned map supports all of the optional map operations supported by this map.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new map that is a view of the specified range within this map.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subMap</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='tailMap' fullname='org.as3collections:IListMap/org.as3collections:IListMap:tailMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new <code>IListMap</code> object that is a view of the portion of this map whose keys are greater than or equal to <code>fromKey</code>.

		 The returned map supports all optional map operations that this map supports.

		 

		 ]]></description>
<param><![CDATA[fromKey 	low endpoint (inclusive) of the keys in the returned map.

		 ]]></param>
<return><![CDATA[a new map that is a view of the portion of this map whose keys are greater than or equal to <code>fromKey</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError 	if <code>fromKey</code> is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError 	if <code>containsKey(fromKey)</code> returns <code>false</code>.

		 ]]></throws>
</method>
<method name='modCount' fullname='org.as3collections:IListMap/org.as3collections:IListMap:modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 The number of times this map has been <em>structurally modified</em>.

		 Structural modifications are those that change the size of the map.

		 <p>This field is used by the <code>IListMapIterator</code> implementation returned by the <code>listMapIterator</code> method.

		 If the value of this field changes unexpectedly, the <code>IListMapIterator</code> object will throw a <code>org.as3collections.errors.ConcurrentModificationError</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code> or <code>put</code> operations.</p>

		 <p>Implementations merely has to increment this field in its <code>put</code>, <code>remove</code> and any other methods that result in structural modifications to the map.

		 A single call to <code>put</code> or <code>remove</code> must add no more than one to this field.</p>

		 

		 ]]></description>
</method>
<classRec name='AbstractHashMap' fullname='org.as3collections:AbstractHashMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\AbstractHashMap.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:IMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This class provides a skeletal hash table based implementation of the <code>IMap</code> interface, to minimize the effort required to implement this interface.

	 <p>This is an abstract class and shouldn't be instantiated directly.</p>

	 <p>This class maintains a native <code>flash.utils.Dictionary</code> object as its source.</p>

	 <p>This class makes no guarantees as to the order of the map.

	 In particular, it does not guarantee that the order will remain constant over time.</p>

	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.

	 Each of these methods may be overridden if the map being implemented admits a more efficient implementation.</p>

	 <p><b>IMPORTANT:</b></p>

	 <p>This class implements equality through <code>org.as3coreaddendum.system.IEquatable</code> interface in the <code>equals</code> method and in all methods that compares the elements inside this collection (i.e. <code>containsKey</code>, <code>containsValue</code>, <code>put</code>, <code>remove</code>, <code>removeAll</code> and <code>retainAll</code>).</p>

	 <p>In order to this map uses the <code>equals</code> method of its keys and/or values in comparisons (rather than default '==' operator), <b>all keys and/or values in this map must implement the</b> <code>org.as3coreaddendum.system.IEquatable</code> <b>interface and also the supplied key and/or value.</b></p>

	 <p>For example:</p>

	 <p>myMap.containsKey(myKey);</p>

	 <p>All keys (but in this case only keys) inside <code>myMap</code>, and <code>myKey</code>, must implement the <code>org.as3coreaddendum.system.IEquatable</code> interface so that <code>equals</code> method of each key can be used in the comparison.

	 Otherwise '==' operator is used. The same is true for values.

	 The use of equality for keys and values are independent.

	 It's possible to use only keys that implement <code>IEquatable</code>, only values, both, or none.

	 This usage varies according to application needs.</p>

	 <p>All subclasses of this class <em>must</em> conform with this behavior.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.IMap IMap

	 ]]></see>
<see><![CDATA[org.as3collections.HashMap HashMap

	 ]]></see>
<see><![CDATA[org.as3collections.AbstractListMap AbstractListMap

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

	 ]]></see>
</classRec>
<method name='AbstractHashMap' fullname='org.as3collections:AbstractHashMap/AbstractHashMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source;weakKeys' param_types='org.as3collections:IMap;Boolean' param_defaults='null;false' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>AbstractHashMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		a map with wich fill this map.

		 ]]></param>
<param><![CDATA[weakKeys 	instructs the backed <code>Dictionary</code> object to use "weak" references on object keys. If the only reference to an object is in the specified <code>Dictionary</code> object, the key is eligible for garbage collection and is removed from the table when the object is collected.

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.

		 ]]></throws>
</method>
<method name='_init' fullname='org.as3collections:AbstractHashMap/protected:_init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clear' fullname='org.as3collections:AbstractHashMap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes all of the mappings from this map (optional operation).

		 The map will be empty after this call returns.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>clear</code> operation is not supported by this map.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections:AbstractHashMap/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a shallow copy of this collection.

		 <p>This implementation always throws a <code>CloneNotSupportedError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[A new object that is a shallow copy of this instance.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.CloneNotSupportedError  	if this map doesn't support clone.

		 ]]></throws>
</method>
<method name='containsKeyByEquality' fullname='org.as3collections:AbstractHashMap/private:containsKeyByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='containsKey' fullname='org.as3collections:AbstractHashMap/containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this map contains a mapping for the specified key.

		 <p>If all keys in this map and <code>key</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this map using <code>equals</code> method of the keys.

		 Otherwise this implementation uses <code>Dictionary[key] !== undefined</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='containsValueByEquality' fullname='org.as3collections:AbstractHashMap/private:containsValueByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='containsValue' fullname='org.as3collections:AbstractHashMap/containsValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this map maps one or more keys to the specified value.

		 <p>If all values in this map and <code>value</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this map using <code>equals</code> method of the values.

		 Otherwise this implementation uses <code>Dictionary[value] !== undefined</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified value is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified value is <code>null</code> and this map does not permit <code>null</code> values (optional).

		 ]]></throws>
</method>
<method name='entryCollection' fullname='org.as3collections:AbstractHashMap/entryCollection' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the mappings contained in this map.

		 The type of the objects within the list is <code>IMapEntry</code>

		 <p>There's no guarantee that the order will remain constant over time.</p>

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the mappings contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IMapEntry IMapEntry

		 ]]></see>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='equals' fullname='org.as3collections:AbstractHashMap/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>MapUtil.equalNotConsideringOrder</code> method to perform equality, sending this map and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.MapUtil#equalNotConsideringOrder() MapUtil.equalNotConsideringOrder()

		 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

		 ]]></see>
</method>
<method name='getKeys' fullname='org.as3collections:AbstractHashMap/getKeys' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the keys contained in this map.

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the keys contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='getValueByEquality' fullname='org.as3collections:AbstractHashMap/protected:getValueByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getValue' fullname='org.as3collections:AbstractHashMap/getValue' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 <p>If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contains no mapping for the key.

		 It's possible that the map explicitly maps the key to <code>null</code>.

		 The <code>containsKey</code> method may be used to distinguish these two cases.</p>

		 <p>If all keys in this map and <code>key</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this map using <code>equals</code> method of the keys.

		 Otherwise this implementation returns <code>Dictionary[key]</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose associated value is to be returned.

		 ]]></param>
<return><![CDATA[the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='getValues' fullname='org.as3collections:AbstractHashMap/getValues' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the values contained in this map.

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the values contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='isEmpty' fullname='org.as3collections:AbstractHashMap/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if this map contains no key-value mappings.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if this map contains no key-value mappings.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections:AbstractHashMap/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	this method must be overridden in subclass.

 		 ]]></throws>
</method>
<method name='keyAdded' fullname='org.as3collections:AbstractHashMap/protected:keyAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='keyRemoved' fullname='org.as3collections:AbstractHashMap/protected:keyRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='putAllByObject' fullname='org.as3collections:AbstractHashMap/putAllByObject' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation performs a <code>for..in</code> in the specified object, calling <code>put</code> on this map once for each iteration (optional operation).

		 

		 ]]></description>
<param><![CDATA[o 	the object to retrieve the properties.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAllByObject</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified object is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified object is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified object contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putAll' fullname='org.as3collections:AbstractHashMap/putAll' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Copies all of the mappings from the specified map to this map (optional operation).

		 The effect of this call is equivalent to that of calling <code>put(k, v)</code> on this map once for each mapping from key <code>k</code> to value <code>v</code> in the specified map.

		 <p>This implementation iterates over the specified map, and calls this map's <code>put</code> operation once for each entry returned by the iteration.</p>

		 

		 ]]></description>
<param><![CDATA[map 	mappings to be stored in this map.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified map is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified map contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putEntry' fullname='org.as3collections:AbstractHashMap/putEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified <code>entry.value</code> with the specified <code>entry.key</code> in this map (optional operation).

		 If the map previously contained a mapping for the <code>entry.key</code>, the old value is replaced by the specified <code>entry.value</code>. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 <p>This implementation calls <code>put(entry.key, entry.value)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[entry 	entry to put in this map.

		 ]]></param>
<return><![CDATA[the previous value associated with <code>entry.key</code>, or <code>null</code> if there was no mapping for <code>entry.key</code>. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with <code>entry.key</code>, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putEntry</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified <code>entry.key</code> or <code>entry.value</code> is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified entry is <code>null</code>, or if the specified <code>entry.key</code> or <code>entry.value</code> is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections:AbstractHashMap/put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map (optional operation).

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value.

		 (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>put</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified key or value is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections:AbstractHashMap/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).

		 The elements in the specified collection are interpreted as keys.

		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified <code>keys</code> collection (using <code>contains</code> method of the <code>keys</code> argument).

		 If it's so contained, it's removed from this map with the iterator's <code>remove</code> method.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this map contains one or more keys in common with the specified collection.</p>

		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be removed from the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of an element in the specified collection is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the specified collection is <code>null</code>, or if this map does not permit <code>null</code> keys, and the specified collections contains <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections:AbstractHashMap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the mapping for a key from this map if it is present (optional operation).

		 <p>Returns the value to which this map previously associated the key, or <code>null</code> if the map contained no mapping for the key.

		 If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <code>null</code>.</p>

		 <p>The map will not contain a mapping for the specified key once the call returns.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose mapping is to be removed from the map.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for <code>key</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections:AbstractHashMap/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).

		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified <code>keys</code> collection (using <code>contains</code> method of the <code>keys</code> argument).

		 The elements in the specified collection are interpreted as keys.

		 <p>This implementation iterates over this map and calls <code>IIterator.remove</code> once for each key that are not contained in the specified collection.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this map contains one or more keys not present in the specified collection.</p>

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be retained in the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>retainAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more keys in this map are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> keys (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='size' fullname='org.as3collections:AbstractHashMap/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 

		 Returns the number of key-value mappings in this map. 

		 

		 ]]></description>
<return><![CDATA[the number of key-value mappings in this map.

 		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections:AbstractHashMap/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 <p>This method uses <code>MapUtil.toString</code> method.</p>

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.MapUtil#toString() MapUtil.toString()

 		 ]]></see>
</method>
<method name='valueAdded' fullname='org.as3collections:AbstractHashMap/protected:valueAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='valueRemoved' fullname='org.as3collections:AbstractHashMap/protected:valueRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allKeysEquatable' fullname='org.as3collections:AbstractHashMap/allKeysEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all keys in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='allValuesEquatable' fullname='org.as3collections:AbstractHashMap/allValuesEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all values in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='map' fullname='org.as3collections:AbstractHashMap/protected:map/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='values' fullname='org.as3collections:AbstractHashMap/protected:values/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_map' fullname='org.as3collections:AbstractHashMap/private:_map' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='_size' fullname='org.as3collections:AbstractHashMap/protected:_size' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_totalKeysEquatable' fullname='org.as3collections:AbstractHashMap/private:_totalKeysEquatable' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_totalValuesEquatable' fullname='org.as3collections:AbstractHashMap/private:_totalValuesEquatable' type='int' isStatic='false' isConst='false' >
</field>
<field name='_values' fullname='org.as3collections:AbstractHashMap/private:_values' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='_weakKeys' fullname='org.as3collections:AbstractHashMap/private:_weakKeys' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='TypedCollection' fullname='org.as3collections:TypedCollection' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\TypedCollection.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:ICollection;org.as3coreaddendum.system:ITypeable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <p><code>TypedCollection</code> works as a wrapper for a collection.</p>

	 <p>Since ActionScript 3.0 does not support typed arrays, <code>TypedCollection</code> is a way to create typed collections.</p>

	 <p>It stores the <code>wrapCollection</code> constructor's argument internally.

	 So every method call to this class is forwarded to the <code>wrappedCollection</code> object.

	 The methods that need to be checked for the type of the elements are previously validated with the <code>validateType</code> or <code>validateCollection</code> method before forward the call.

	 If the type of an element requested to be added to this collection is incompatible with the type of the collection a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedCollection</code> returns the return of the <code>wrappedCollection</code> call.</p>

	 <p>The <code>TypedCollection.type</code> setter is not supported and will thrown an <code>UnsupportedOperationError</code> if used.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='TypedCollection' fullname='org.as3collections:TypedCollection/TypedCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapCollection;type' param_types='org.as3collections:ICollection;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedCollection</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapCollection 	the target collection to wrap.

		 ]]></param>
<param><![CDATA[type 			the type of the elements allowed by this collection.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapCollection</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapCollection</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='addAll' fullname='org.as3collections:TypedCollection/addAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 The collection is validated with the <code>validateCollection</code> method to be forwarded to <code>wrappedCollection.addAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to forward to <code>wrappedCollection.addAll</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.addAll</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>collection</code> argument are incompatible with the type of this collection.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:TypedCollection/add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 The element is validated with the <code>validateType</code> method to be forwarded to <code>wrappedCollection.add</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to forward to <code>wrappedCollection.add</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.add</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the element is incompatible with the type of this collection.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections:TypedCollection/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.clear</code>.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections:TypedCollection/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedCollection</code> object with the clone of the <code>wrappedCollection</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedCollection</code> object with the clone of the <code>wrappedCollection</code> object.

 		 ]]></return>
</method>
<method name='containsAll' fullname='org.as3collections:TypedCollection/containsAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.containsAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.containsAll</code>.

		 ]]></return>
</method>
<method name='contains' fullname='org.as3collections:TypedCollection/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.contains</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.contains</code>.

		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections:TypedCollection/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method first checks if <code>other</code> argument is a <code>TypedCollection</code>.

		 If not it returns <code>false</code>. If <code>true</code> it checks the <code>type</code> property of both lists.

		 If they are different it returns <code>false</code>.

		 Otherwise it uses <code>CollectionUtil.equalNotConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalNotConsideringOrder() CollectionUtil.equalNotConsideringOrder()

		 ]]></see>
</method>
<method name='getInvalidElementError' fullname='org.as3collections:TypedCollection/private:getInvalidElementError' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isEmpty' fullname='org.as3collections:TypedCollection/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.isEmpty</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.isEmpty</code>.

 		 ]]></return>
</method>
<method name='isValidElement' fullname='org.as3collections:TypedCollection/protected:isValidElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='iterator' fullname='org.as3collections:TypedCollection/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.iterator</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.iterator</code>.

 		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3collections:TypedCollection/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.removeAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.removeAll</code>.

		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections:TypedCollection/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.remove</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.remove</code>.

		 ]]></return>
</method>
<method name='retainAll' fullname='org.as3collections:TypedCollection/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.retainAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.retainAll</code>.

		 ]]></return>
</method>
<method name='size' fullname='org.as3collections:TypedCollection/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.size</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.size</code>.

 		 ]]></return>
</method>
<method name='toArray' fullname='org.as3collections:TypedCollection/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.toArray</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.toArray</code>.

 		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections:TypedCollection/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 <p>This method uses <code>CollectionUtil.toString</code> method.</p>

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

 		 ]]></return>
</method>
<method name='validateCollection' fullname='org.as3collections:TypedCollection/protected:validateCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateElement' fullname='org.as3collections:TypedCollection/protected:validateElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allEquatable' fullname='org.as3collections:TypedCollection/allEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all elements in this collection implement the interface <code>org.as3coreaddendum.system.IEquatable</code>.

		 ]]></description>
</method>
<method name='type' fullname='org.as3collections:TypedCollection/type/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Defines the acceptable type of the elements by this collection.

		 <p>The setter is not supported and will thrown an <code>UnsupportedOperationError</code> if used.</p>

		 ]]></description>
</method>
<method name='wrappedCollection' fullname='org.as3collections:TypedCollection/protected:wrappedCollection/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='type' fullname='org.as3collections:TypedCollection/type/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
</method>
<field name='_type' fullname='org.as3collections:TypedCollection/private:_type' type='' isStatic='false' isConst='false' >
</field>
<field name='_wrappedCollection' fullname='org.as3collections:TypedCollection/private:_wrappedCollection' type='org.as3collections:ICollection' isStatic='false' isConst='false' >
</field>
<classRec name='UniqueCollection' fullname='org.as3collections:UniqueCollection' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\UniqueCollection.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>UniqueCollection</code> works as a wrapper for a collection.

	 <p>It does not allow duplicate elements in the collection.</p>

	 <p>It stores the <code>wrapCollection</code> constructor's argument internally.

	 So every method call to this class is forwarded to the <code>wrappedCollection</code> object.

	 The methods that need to be checked for duplication are previously validated before forward the call.

	 No error is thrown by the validation of duplication.

	 The calls that are forwarded to the <code>wrappedCollection</code> returns the return of the <code>wrappedCollection</code> call.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='UniqueCollection' fullname='org.as3collections:UniqueCollection/UniqueCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapCollection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>UniqueCollection</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapCollection 	the target collection to wrap.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapCollection</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='addAll' fullname='org.as3collections:UniqueCollection/addAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 If the specified collection is empty returns <code>false</code>. Otherwise, it clones the specified collection, removes all elements that already are in the <code>wrappedCollection</code> and removes all duplicates. Then it forwards the call to <code>wrappedCollection.addAll</code> sending the cloned and filtered collection.

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to forward to <code>wrappedCollection.addAll</code>.

		 ]]></param>
<return><![CDATA[<code>false</code> if the specified collection is <code>null</code> or empty. Otherwise returns the return of the call <code>wrappedCollection.addAll</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError  	 if the specified collection contains a <code>null</code> element and <code>wrappedCollection</code> does not permit <code>null</code> elements, or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:UniqueCollection/add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 If <code>wrappedCollection.contains(element)</code> returns <code>true</code>, then this method returns <code>false</code>. Otherwise, it forwards the call to <code>wrappedCollection.add</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to forward to <code>wrappedCollection.add</code>.

		 ]]></param>
<return><![CDATA[<code>false</code> if <code>wrappedCollection.contains(element)</code> returns <code>true</code>. Otherwise returns the return of the call <code>wrappedCollection.add</code>.

		 ]]></return>
</method>
<method name='clear' fullname='org.as3collections:UniqueCollection/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.clear</code>.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections:UniqueCollection/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>UniqueCollection</code> object with the clone of the <code>wrappedCollection</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>UniqueCollection</code> object with the clone of the <code>wrappedCollection</code> object.

 		 ]]></return>
</method>
<method name='containsAll' fullname='org.as3collections:UniqueCollection/containsAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.containsAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.containsAll</code>.

		 ]]></return>
</method>
<method name='contains' fullname='org.as3collections:UniqueCollection/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.contains</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.contains</code>.

		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections:UniqueCollection/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalNotConsideringOrder</code> method to perform equality, sending this collection and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalNotConsideringOrder() CollectionUtil.equalNotConsideringOrder()

		 ]]></see>
</method>
<method name='filterCollection' fullname='org.as3collections:UniqueCollection/protected:filterCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isEmpty' fullname='org.as3collections:UniqueCollection/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.isEmpty</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.isEmpty</code>.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections:UniqueCollection/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.iterator</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.iterator</code>.

 		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3collections:UniqueCollection/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.removeAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.removeAll</code>.

		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections:UniqueCollection/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.remove</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.remove</code>.

		 ]]></return>
</method>
<method name='retainAll' fullname='org.as3collections:UniqueCollection/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.retainAll</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.retainAll</code>.

		 ]]></return>
</method>
<method name='size' fullname='org.as3collections:UniqueCollection/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.size</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.size</code>.

 		 ]]></return>
</method>
<method name='toArray' fullname='org.as3collections:UniqueCollection/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedCollection.toArray</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedCollection.toArray</code>.

 		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections:UniqueCollection/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 <p>This method uses <code>CollectionUtil.toString</code> method.</p>

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

 		 ]]></return>
</method>
<method name='allEquatable' fullname='org.as3collections:UniqueCollection/allEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all elements in this collection implement the interface <code>org.as3coreaddendum.system.IEquatable</code>.

		 ]]></description>
</method>
<method name='wrappedCollection' fullname='org.as3collections:UniqueCollection/protected:wrappedCollection/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_wrappedCollection' fullname='org.as3collections:UniqueCollection/private:_wrappedCollection' type='org.as3collections:ICollection' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IList' fullname='org.as3collections:IList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IList.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An ordered collection.

	 The user of this interface has precise control over where in the list each element is inserted.

	 The user can access elements by their integer index (position in the list), and search for elements in the list.

	 <p>Lists typically allow duplicate elements and multiple <code>null</code> elements if they allow <code>null</code> elements at all.

	 But there are lists that prohibits duplicates and/or <code>null</code> elements, by throwing runtime errors when the user attempts to insert them.</p>

	 <p>The <code>IList</code> interface provides the special <code>IListIterator</code> iterator, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the <code>IIterator</code> interface provides.

	 The <code>listIterator()</code> method is provided to obtain a <code>IListIterator</code> implementation that may start at a specified position in the list.</p>

	 <p>The methods that modify the list are specified to throw <code>org.as3coreaddendum.errors.UnsupportedOperationError</code> if the list does not support the operation.

	 These methods are documented as "optional operation".</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<see><![CDATA[org.as3collections.AbstractList AbstractList

	 ]]></see>
<see><![CDATA[org.as3collections.ICollection ICollection

	 ]]></see>
<see><![CDATA[org.as3collections.ISortedList ISortedList

	 ]]></see>
<see><![CDATA[org.as3collections.IListIterator IListIterator
	 ]]></see>
</interfaceRec>
<method name='addAllAt' fullname='org.as3collections:IList/org.as3collections:IList:addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;collection' param_types='int;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).

		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.

		 

		 ]]></description>
<param><![CDATA[index 		index at which to insert the first element from the specified collection.

		 ]]></param>
<param><![CDATA[collection 	the collection containing elements to be added to this list.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAllAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of an element of the specified collection prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this list does not permit <code>null</code> elements, or if the specified collection is <code>null</code>. 

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='addAt' fullname='org.as3collections:IList/org.as3collections:IList:addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element at the specified position in this list (optional operation).

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).

		 

		 ]]></description>
<param><![CDATA[index 		index at which the specified element is to be inserted.

		 ]]></param>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call. Returns <code>false</code> if this list does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified element is <code>null</code> and this list does not permit <code>null</code> elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='getAt' fullname='org.as3collections:IList/org.as3collections:IList:getAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the element at the specified position in this list.

		 

		 ]]></description>
<param><![CDATA[index 	index of the element to return.

		 ]]></param>
<return><![CDATA[the element at the specified position in this list.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='indexOf' fullname='org.as3collections:IList/org.as3collections:IList:indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>first occurrence</em> of the specified element in this list, or -1 if this list does not contain the element.

		 

		 ]]></description>
<param><![CDATA[element 	the element to search for.

		 ]]></param>
<param><![CDATA[fromIndex 	the position in the list from which to start searching for the element (inclusive).

		 ]]></param>
<return><![CDATA[the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element is incompatible with this list (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code> and this list does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='lastIndexOf' fullname='org.as3collections:IList/org.as3collections:IList:lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0x7fffffff' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>last occurrence</em> of the specified element in this list, or -1 if this list does not contain the element.

		 

		 ]]></description>
<param><![CDATA[element 	the element to search for.

		 ]]></param>
<param><![CDATA[fromIndex 	the position in the list from which to start searching for the element (inclusive). The default is the maximum value allowed for an index. If you do not specify <code>fromIndex</code>, the search starts at the last item in the list.

		 ]]></param>
<return><![CDATA[the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element is incompatible with this list (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  									if the specified element is <code>null</code> and this list does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='listIterator' fullname='org.as3collections:IList/org.as3collections:IList:listIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 The specified index indicates the first element that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the element with the specified index minus one. 

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.IListIterator IListIterator

		 ]]></see>
</method>
<method name='removeAt' fullname='org.as3collections:IList/org.as3collections:IList:removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the element at the specified position in this list (optional operation).

		 Shifts any subsequent elements to the left (subtracts one from their indices).

		 Returns the element that was removed from the list. 

		 

		 ]]></description>
<param><![CDATA[index 	the index of the element to be removed.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections:IList/org.as3collections:IList:removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Removes all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (optional operation).

		 Shifts any subsequent elements to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing elements (exclusive).

		 ]]></param>
<return><![CDATA[a new collection containing all the removed elements.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeRange</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='reverse' fullname='org.as3collections:IList/org.as3collections:IList:reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Reverses the order of the elements in this list.

		 ]]></description>
</method>
<method name='setAt' fullname='org.as3collections:IList/org.as3collections:IList:setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the element at the specified position in this list with the specified element (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 		index of the element to replace.

		 ]]></param>
<param><![CDATA[element 	element to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified element is <code>null</code> and this list does not permit <code>null</code> elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='subList' fullname='org.as3collections:IList/org.as3collections:IList:subList' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new list that is a view of the portion of this list between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>The returned list supports all of the optional list operations supported by this list.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new list that is a view of the specified range within this list.
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subList</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='modCount' fullname='org.as3collections:IList/org.as3collections:IList:modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 The number of times this list has been <em>structurally modified</em>.

		 Structural modifications are those that change the size of the list.

		 <p>This field is used by the list iterator implementation returned by the <code>listIterator</code> method.

		 If the value of this field changes unexpectedly, the list iterator will throw a <code>org.as3collections.errors.ConcurrentModificationError</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code>, <code>set</code> or <code>add</code> operations.</p>

		 <p>Implementations merely has to increment this field in its <code>add</code>, <code>remove</code> and any other methods that result in structural modifications to the list.

		 A single call to <code>add</code> or <code>remove</code> must add no more than one to this field.</p>

		 

		 ]]></description>
</method>
<classRec name='AbstractArrayCollection' fullname='org.as3collections:AbstractArrayCollection' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\AbstractArrayCollection.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This class provides a skeletal implementation of the <code>ICollection</code> interface, to minimize the effort required to implement this interface. 

	 <p>This is an abstract class and shouldn't be instantiated directly.</p>

	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.

	 Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.</p>

	 <p>This class maintains a native <code>Array</code> object as its source.</p>

	 <p><b>IMPORTANT:</b></p>

	 <p>This class implements equality through <code>org.as3coreaddendum.system.IEquatable</code> interface in the <code>equals</code> method and in all methods that compares the elements inside this collection (i.e. <code>contains</code>, <code>containsAll</code>, <code>remove</code>, <code>removeAll</code> and <code>retainAll</code>).</p>

	 <p>In order to this collection uses the <code>equals</code> method of its elements in comparisons (rather than default '==' operator), <b>all elements in this collection must implement the</b> <code>org.as3coreaddendum.system.IEquatable</code> <b>interface and also the supplied element.</b></p>

	 <p>For example:</p>

	 <p>myCollection.contains(myElement);</p>

	 <p>All elements inside <code>myCollection</code>, and <code>myElement</code>, must implement the <code>org.as3coreaddendum.system.IEquatable</code> interface so that <code>equals</code> method of each element can be used in the comparison.

	 Otherwise '==' operator is used.</p>

	 <p>All subclasses of this class <em>must</em> conform with this behavior.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.ICollection ICollection

	 ]]></see>
<see><![CDATA[org.as3collections.AbstractList AbstractList

	 ]]></see>
<see><![CDATA[org.as3collections.AbstractQueue AbstractQueue

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

	 ]]></see>
</classRec>
<method name='AbstractArrayCollection' fullname='org.as3collections:AbstractArrayCollection/AbstractArrayCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 This is an abstract class and shouldn't be instantiated directly.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the collection.

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If this class is instantiated directly. In other words, if there is <em>not</em> another class extending this class.

		 ]]></throws>
</method>
<method name='addAll' fullname='org.as3collections:AbstractArrayCollection/addAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Adds all of the elements in the specified collection to this collection (optional operation).

		 <p>This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> unless <code>add</code> is overridden (assuming the specified collection is non-empty).</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be added to this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAll</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of an element of the specified collection prevents it from being added to this collection.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements, or if the specified collection is <code>null</code>. 

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:AbstractArrayCollection/add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Ensures that this collection contains the specified element (optional operation). 

		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.

		 In particular, some collections will refuse to add <code>null</code> elements, and others will impose restrictions on the type of elements that may be added.

		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>

		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <em>must</em> throw an error (rather than returning <code>false</code>).

		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call. Returns <code>false</code> if this collection does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>add</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this collection.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified element is <code>null</code> and this collection does not permit <code>null</code> elements.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections:AbstractArrayCollection/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes all of the elements from this collection (optional operation).

		 The collection will be empty after this method returns.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the clear operation is not supported by this collection.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections:AbstractArrayCollection/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a shallow copy of this collection.

		 <p>This implementation always throws a <code>org.as3coreaddendum.errors.CloneNotSupportedError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[A new object that is a shallow copy of this instance.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.CloneNotSupportedError  	if this collection doesn't support clone.

		 ]]></throws>
</method>
<method name='containsAllByEquality' fullname='org.as3collections:AbstractArrayCollection/private:containsAllByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='containsAll' fullname='org.as3collections:AbstractArrayCollection/containsAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this collection contains all of the elements in the specified collection. 

		 <p>This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection.

		 If all elements are so contained <code>true</code> is returned, otherwise <code>false</code>.</p>

		 <p>If all elements in this collection and all elements in <code>collection</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, <code>equals</code> method of the elements will be used.

		 Otherwise this implementation uses native <code>Array.indexOf</code> method.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection to be checked for containment in this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection contains all of the elements in the specified collection.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in the specified collection are incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains one or more <code>null</code> elements and this collection does not permit <code>null</code> elements (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='containsByEquality' fullname='org.as3collections:AbstractArrayCollection/private:containsByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='contains' fullname='org.as3collections:AbstractArrayCollection/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Returns <code>true</code> if this collection contains the specified object.

		 <p>If all elements in this collection and <code>o</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this collection using <code>equals</code> method of the elements.

		 Otherwise this implementation uses native <code>Array.indexOf</code> method.</p>

		 

		 ]]></description>
<param><![CDATA[o 	object whose presence in this collection is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection contains the specified object.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified object is incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified object is <code>null</code> and this collection does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='elementAdded' fullname='org.as3collections:AbstractArrayCollection/protected:elementAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementRemoved' fullname='org.as3collections:AbstractArrayCollection/protected:elementRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='equals' fullname='org.as3collections:AbstractArrayCollection/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalNotConsideringOrder</code> method to perform equality, sending this collection and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalNotConsideringOrder() CollectionUtil.equalNotConsideringOrder()

		 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

		 ]]></see>
</method>
<method name='isEmpty' fullname='org.as3collections:AbstractArrayCollection/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if this collection contains no elements.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if this collection contains no elements.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections:AbstractArrayCollection/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of elements.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of elements.

		 ]]></return>
<see><![CDATA[org.as3collections.IIterator IIterator

 		 ]]></see>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	this method must be overridden in subclass.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections:AbstractArrayCollection/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes all of this collection's elements that are also contained in the specified collection (optional operation).

		 After this call returns, this collection will contain no elements in common with the specified collection.

		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <code>contains</code> method of the <code>collection</code> argument).

		 If it's so contained, it's removed from this collection with the iterator's <code>remove</code> method.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this collection contains one or more elements in common with the specified collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be removed from this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the removeAll operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in the specified collection are incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements, or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='removeByEquality' fullname='org.as3collections:AbstractArrayCollection/private:removeByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeByInstance' fullname='org.as3collections:AbstractArrayCollection/private:removeByInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='remove' fullname='org.as3collections:AbstractArrayCollection/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).

		 <p>If all elements in this collection and <code>o</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation iterates over this collection looking for the specified element.

		 If it finds the element, it removes the element from the collection using the iterator's remove method.

		 In this case, note that this implementation throws an <code>UnsupportedOperationError</code> if the iterator returned by this collection's iterator method does not implement the <code>remove</code> method.</p>

		 <p>Otherwise this implementation uses native <code>Array.indexOf</code> method to get the index of the element and then uses native <code>Array.splice</code> method to remove it.</p>

		 

		 ]]></description>
<param><![CDATA[o 	the object to be removed from this collection, if present.

		 ]]></param>
<return><![CDATA[<code>true</code> if an object was removed as a result of this call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified object is incompatible with this collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified object is <code>null</code> and this collection does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections:AbstractArrayCollection/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Retains only the elements in this collection that are contained in the specified collection (optional operation).

		 In other words, removes from this collection all of its elements that are not contained in the specified collection.

		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <code>contains</code> method of the <code>collection</code> argument).

		 If it's not so contained, it's removed from this collection with the iterator's <code>remove</code> method.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this collection contains one or more elements not present in the specified collection.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be retained in this collection.

		 ]]></param>
<return><![CDATA[<code>true</code> if this collection changed as a result of the call. 	

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>retainAll</code> operation is not supported by this collection.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more elements in this collection are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> elements (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='size' fullname='org.as3collections:AbstractArrayCollection/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 

		 Returns the number of elements in this collection.

		 

		 ]]></description>
<return><![CDATA[the number of elements in this collection.

 		 ]]></return>
</method>
<method name='toArray' fullname='org.as3collections:AbstractArrayCollection/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 

		 Returns an array containing all of the elements in this collection.

		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>

		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.

		 (In other words, this method must allocate a new array even if this collection is backed by an array).

		 The caller is thus free to modify the returned array.</p>

		 

		 ]]></description>
<return><![CDATA[a new array object containing all of the elements in this collection.

 		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections:AbstractArrayCollection/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 <p>This method uses <code>CollectionUtil.toString</code> method.</p>

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#toString() CollectionUtil.toString()

 		 ]]></see>
</method>
<method name='allEquatable' fullname='org.as3collections:AbstractArrayCollection/allEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all elements in this collection implement the interface <code>org.as3coreaddendum.system.IEquatable</code>.

		 ]]></description>
</method>
<method name='data' fullname='org.as3collections:AbstractArrayCollection/protected:data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_data' fullname='org.as3collections:AbstractArrayCollection/private:_data' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_totalEquatable' fullname='org.as3collections:AbstractArrayCollection/protected:_totalEquatable' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<interfaceRec name='IQueue' fullname='org.as3collections:IQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\IQueue.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A collection designed for holding elements prior to processing.

	 Besides basic <code>ICollection</code> operations, queues provide additional insertion, extraction, and inspection operations.

	 Each of these methods exists in two forms: one throws an error if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation).
	 <p>

	 <table class="innertable">

	 <tr>

	 <th></th>

	 <th><em>Throws error</em></th>

	 <th><em>Returns special value</em></th>

	 </tr>

	 <tr>

	 <td><b>Insert</b></td>

	 <td><code>add</code></td>

	 <td><code>offer</code></td>

	 </tr>

	 <tr>

	 <td><b>Remove</b></td>

	 <td><code>dequeue</code></td>

	 <td><code>poll</code></td>

	 </tr>

	 <tr>

	 <td><b>Examine</b></td>

	 <td><code>element</code></td>

	 <td><code>peek</code></td>

	 </tr>

	 </table>

	 </p>

	 <p>Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner.

	 Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out).

	 Whatever the ordering used, the head of the queue is that element which would be removed by a call to <code>dequeue</code> or <code>poll</code>.

	 In a FIFO queue, all new elements are inserted at the <em>tail</em> of the queue.

	 Other kinds of queues may use different placement rules.

	 Every <code>IQueue</code> implementation must specify its ordering properties.</p>

	 <p>The <code>offer</code> method inserts an element if possible, otherwise returning <code>false</code>.

	 This differs from the <code>add</code> method, which can fail to add an element only by throwing an error.

	 The <code>offer</code> method is designed for use when failure is a normal, rather than exceptional occurrence.</p>

	 <p>The <code>dequeue</code> and <code>poll</code> methods remove and return the head of the queue.

	 Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation.

	 The <code>dequeue</code> and <code>poll</code> methods differ only in their behavior when the queue is empty: the <code>dequeue</code> method throws an error, while the <code>poll</code> method returns <code>null</code>.</p> 

	 <p>The <code>element</code> and <code>peek</code> methods return, but do not remove, the head of the queue.

	 The <code>element</code> and <code>peek</code> methods differ only in their behavior when the queue is empty: the <code>element</code> method throws an error, while the <code>peek</code> method returns null.</p>

	 <p><code>IQueue</code> implementations generally do not allow insertion of <code>null</code> elements</p>

	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</interfaceRec>
<method name='dequeue' fullname='org.as3collections:IQueue/org.as3collections:IQueue:dequeue' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Retrieves and removes the head of this queue.

		 

		 ]]></description>
<return><![CDATA[the head of this queue.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if this queue is empty.

		 ]]></throws>
</method>
<method name='element' fullname='org.as3collections:IQueue/org.as3collections:IQueue:element' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Retrieves, but does not remove, the head of this queue.

		 This method differs from <code>peek</code> only in that it throws an error if this queue is empty. 
		 

		 ]]></description>
<return><![CDATA[the head of this queue.
 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if this queue is empty.
		 ]]></throws>
</method>
<method name='offer' fullname='org.as3collections:IQueue/org.as3collections:IQueue:offer' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 
		 ]]></return>
</method>
<method name='peek' fullname='org.as3collections:IQueue/org.as3collections:IQueue:peek' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty. 
		 
		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.
 		 ]]></return>
</method>
<method name='poll' fullname='org.as3collections:IQueue/org.as3collections:IQueue:poll' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty. 
		 
		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.
 		 ]]></return>
</method>
<classRec name='MapEntry' fullname='org.as3collections:MapEntry' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\MapEntry.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:IMapEntry' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An entry maintaining a key and a value.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</classRec>
<method name='MapEntry' fullname='org.as3collections:MapEntry/MapEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>MapEntry</code> object.

		 

		 ]]></description>
<param><![CDATA[key 	the key represented by this entry.

		 ]]></param>
<param><![CDATA[value 	the value represented by this entry.

		 ]]></param>
</method>
<method name='clone' fullname='org.as3collections:MapEntry/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>MapEntry</code> object with the same key-value mapping.

		 

		 ]]></description>
<return><![CDATA[a new <code>MapEntry</code> object with the same key-value mapping.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections:MapEntry/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class</li>

		 <li>A.key == B.key</li>

		 <li>A.value == B.value</li>

		 </ul></p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections:MapEntry/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

 		 ]]></return>
</method>
<method name='key' fullname='org.as3collections:MapEntry/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key corresponding to this entry.
		 ]]></description>
</method>
<method name='value' fullname='org.as3collections:MapEntry/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the value corresponding to this entry.
		 ]]></description>
</method>
<field name='_key' fullname='org.as3collections:MapEntry/private:_key' type='' isStatic='false' isConst='false' >
</field>
<field name='_value' fullname='org.as3collections:MapEntry/private:_value' type='' isStatic='false' isConst='false' >
</field>
<classRec name='SortMapBy' fullname='org.as3collections:SortMapBy' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\SortMapBy.as' namespace='org.as3collections' access='public' baseclass='org.as3coreaddendum.system:Enum' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The enumeration class that defines the acceptable values for sort maps by keys or values.

	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.

	 All acceptable values will be created automaticaly by this class internaly, through the constants.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='SortMapBy' fullname='org.as3collections:SortMapBy/SortMapBy' isStatic='false' isFinal='false' isOverride='false'  param_names='name;ordinal' param_types='String;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>SortMapBy</code> object.

		 

		 ]]></description>
<param><![CDATA[name 			The name of this enumeration constant.

		 ]]></param>
<param><![CDATA[ordinal 		The ordinal of this enumeration constant, that is its position in the enum declaration (where the initial constant is assigned an ordinal of zero).

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If there is an attempt to instantiation outside the internal code of this class. All acceptable values will be created automaticaly by this class internaly, through the constants. There's no possibility to use this constructor externally.

		 ]]></throws>
</method>
<field name='KEY' fullname='org.as3collections:SortMapBy/KEY' type='org.as3collections:SortMapBy' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[

		 Defines the constant that indicates that the map should be sorted by its keys.

		 ]]></description>
</field>
<field name='VALUE' fullname='org.as3collections:SortMapBy/VALUE' type='org.as3collections:SortMapBy' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[

		 Defines the constant that indicates that the map should be sorted by its values.

		 ]]></description>
</field>
<field name='_created' fullname='org.as3collections:SortMapBy/private:_created' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AbstractListMap' fullname='org.as3collections:AbstractListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\AbstractListMap.as' namespace='org.as3collections' access='public' baseclass='Object' interfaces='org.as3collections:IListMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This class provides a skeletal implementation of the <code>IListMap</code> interface, to minimize the effort required to implement this interface.

	 <p>This class maintains two <code>ArrayList</code> objects as its source, one for <code>keys</code> and one for <code>values</code>.</p>

	 <p>This is an abstract class and shouldn't be instantiated directly.</p>

	 <p>This class makes guarantees as to the order of the map.

	 The order in which elements are stored is the order in which they were inserted.</p>

	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.

	 Each of these methods may be overridden if the map being implemented admits a more efficient implementation.</p>

	 <p><b>IMPORTANT:</b></p>

	 <p>This class implements equality through <code>org.as3coreaddendum.system.IEquatable</code> interface in the <code>equals</code> method and in all methods that compares the elements inside this collection (i.e. <code>containsKey</code>, <code>containsValue</code>, <code>put</code>, <code>remove</code>, <code>removeAll</code> and <code>retainAll</code>).</p>

	 <p>In order to this map uses the <code>equals</code> method of its keys and/or values in comparisons (rather than default '==' operator), <b>all keys and/or values in this map must implement the</b> <code>org.as3coreaddendum.system.IEquatable</code> <b>interface and also the supplied key and/or value.</b></p>

	 <p>For example:</p>

	 <p>myMap.containsKey(myKey);</p>

	 <p>All keys (but in this case only keys) inside <code>myMap</code>, and <code>myKey</code>, must implement the <code>org.as3coreaddendum.system.IEquatable</code> interface so that <code>equals</code> method of each key can be used in the comparison.

	 Otherwise '==' operator is used. The same is true for values.

	 The use of equality for keys and values are independent.

	 It's possible to use only keys that implement <code>IEquatable</code>, only values, both, or none.

	 This usage varies according to application needs.</p>

	 <p>All subclasses of this class <em>must</em> conform with this behavior.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.IListMap IListMap

	 ]]></see>
<see><![CDATA[org.as3collections.IList IList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html	org.as3coreaddendum.system.IEquatable

	 ]]></see>
</classRec>
<method name='AbstractListMap' fullname='org.as3collections:AbstractListMap/AbstractListMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new AbstractListMap object.

		 

		 ]]></description>
<param><![CDATA[source 	a map with wich fill this map.

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.

		 ]]></throws>
</method>
<method name='_init' fullname='org.as3collections:AbstractListMap/private:_init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkIndex' fullname='org.as3collections:AbstractListMap/protected:checkIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;max' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clear' fullname='org.as3collections:AbstractListMap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes all of the mappings from this map (optional operation).

		 The map will be empty after this call returns.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>clear</code> operation is not supported by this map.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections:AbstractListMap/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a shallow copy of this collection.

		 <p>This implementation always throws a <code>CloneNotSupportedError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[A new object that is a shallow copy of this instance.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.CloneNotSupportedError  	if this map doesn't support clone.

		 ]]></throws>
</method>
<method name='containsKey' fullname='org.as3collections:AbstractListMap/containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if this map contains a mapping for the specified key.

		 

		 ]]></description>
<param><![CDATA[key 	key whose presence in this map is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map contains a mapping for the specified key.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='containsValue' fullname='org.as3collections:AbstractListMap/containsValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if this map maps one or more keys to the specified value.

		 

		 ]]></description>
<param><![CDATA[value 	value whose presence in this map is to be tested.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map maps one or more keys to the specified value.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified value is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError	if the specified value is <code>null</code> and this map does not permit <code>null</code> values (optional).

		 ]]></throws>
</method>
<method name='entryCollection' fullname='org.as3collections:AbstractListMap/entryCollection' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the mappings contained in this map (in the same order).

		 The type of the objects within the list is <code>IMapEntry</code>

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the mappings contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IMapEntry IMapEntry

		 ]]></see>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='equals' fullname='org.as3collections:AbstractListMap/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>MapUtil.equalConsideringOrder</code> method to perform equality, sending this map and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.MapUtil#equalConsideringOrder() MapUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='getKeyAt' fullname='org.as3collections:AbstractListMap/getKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the key at the specified position in this map.

		 <p>This implementation forwards the call to <code>keys.getAt(index)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to return.

		 ]]></param>
<return><![CDATA[the key at the specified position in this map.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='getKeys' fullname='org.as3collections:AbstractListMap/getKeys' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the keys contained in this map.

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the keys contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='getValueAt' fullname='org.as3collections:AbstractListMap/getValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the value at the specified position in this map.

		 <p>This implementation forwards the call to <code>values.getAt(index)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to return.

		 ]]></param>
<return><![CDATA[the value at the specified position in this map.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='getValue' fullname='org.as3collections:AbstractListMap/getValue' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 <p>If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contains no mapping for the key.

		 It's possible that the map explicitly maps the key to <code>null</code>.

		 The <code>containsKey</code> method may be used to distinguish these two cases.</p>

		 <p>This implementation uses <code>indexOfKey</code> method to get the index of the key/value and then calls <code>values.getAt</code> method.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose associated value is to be returned.

		 ]]></param>
<return><![CDATA[the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='getValues' fullname='org.as3collections:AbstractListMap/getValues' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Returns an <code>ArrayList</code> object that is a view of the values contained in this map.

		 <p>Modifications in the <code>ArrayList</code> object doesn't affect this map.</p>

		 

		 ]]></description>
<return><![CDATA[an <code>ArrayList</code> object that is a view of the values contained in this map.

		 ]]></return>
<see><![CDATA[org.as3collections.IList IList

		 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

 		 ]]></see>
</method>
<method name='headMap' fullname='org.as3collections:AbstractListMap/headMap' isStatic='false' isFinal='false' isOverride='false'  param_names='toKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new <code>IListMap</code> object that is a view of the portion of this map whose keys are strictly less than <code>toKey</code>.

		 The returned map supports all optional map operations that this map supports.

		 <p>This implementation uses <code>subMap(0, indexOfKey(toKey))</code>.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> unless <code>subMap</code> is overridden.</p>

		 

		 ]]></description>
<param><![CDATA[toKey 	high endpoint (exclusive) of the keys in the returned map.

		 ]]></param>
<return><![CDATA[a new <code>IListMap</code> that is a view of the portion of this map whose keys are strictly less than <code>toKey</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError 	if <code>toKey</code> is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError 	if <code>containsKey(toKey)</code> returns <code>false</code>.

		 ]]></throws>
</method>
<method name='indexOfKey' fullname='org.as3collections:AbstractListMap/indexOfKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Returns the position of the specified key.

		 <p>This implementation forwards the call to <code>keys.indexOf(key)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key to search for.

		 ]]></param>
<return><![CDATA[the position of the specified key.

 		 ]]></return>
</method>
<method name='indexOfValue' fullname='org.as3collections:AbstractListMap/indexOfValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Returns the position of the specified value.

		 <p>This implementation forwards the call to <code>values.indexOf(value)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[value 	the value to search for.

		 ]]></param>
<return><![CDATA[the position of the specified value.

 		 ]]></return>
</method>
<method name='isEmpty' fullname='org.as3collections:AbstractListMap/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if this map contains no key-value mappings.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if this map contains no key-value mappings.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections:AbstractListMap/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	this method must be overridden in subclass.

 		 ]]></throws>
</method>
<method name='keyAdded' fullname='org.as3collections:AbstractListMap/protected:keyAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='keyRemoved' fullname='org.as3collections:AbstractListMap/protected:keyRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='listMapIterator' fullname='org.as3collections:AbstractListMap/listMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListMapIterator'>
<description><![CDATA[

		 Returns a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 The specified index indicates the first value that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the value with the specified index minus one.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first value to be returned from the iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 ]]></return>
</method>
<method name='putAllAt' fullname='org.as3collections:AbstractListMap/putAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;map' param_types='int;org.as3collections:IMap' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Copies all of the mappings from the specified map to this map (optional operation).

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).

		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.

		 <p>This implementation iterates over the specified map, and calls this map's <code>putAt</code> operation once for each entry returned by the iteration.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index at which to insert the first entry from the specified map.

		 ]]></param>
<param><![CDATA[map 	mappings to be stored in this map.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAllAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified map is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified map contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putAllByObject' fullname='org.as3collections:AbstractListMap/putAllByObject' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation performs a <code>for..in</code> in the specified object, calling <code>put</code> on this map once for each iteration (optional operation).

		 

		 ]]></description>
<param><![CDATA[o 	the object to retrieve the properties.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAllByObject</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified object is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified object is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified object contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putAll' fullname='org.as3collections:AbstractListMap/putAll' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Copies all of the mappings from the specified map to this map (optional operation).

		 The effect of this call is equivalent to that of calling <code>put(k, v)</code> on this map once for each mapping from key <code>k</code> to value <code>v</code> in the specified map.

		 <p>This implementation calls <code>putAllAt(size(), collection)</code>.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> unless <code>putAt</code> is overridden (assuming the specified map is non-empty).</p>

		 

		 ]]></description>
<param><![CDATA[map 	mappings to be stored in this map.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of a key or value in the specified map is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified map is <code>null</code>, or if this map does not permit <code>null</code> keys or values, and the specified map contains <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='putAt' fullname='org.as3collections:AbstractListMap/putAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key;value' param_types='int;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Associates the specified value with the specified key at the specified position in this map (optional operation).

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index at which the specified entry is to be inserted.

		 ]]></param>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the specified key or value is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='putEntry' fullname='org.as3collections:AbstractListMap/putEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified <code>entry.value</code> with the specified <code>entry.key</code> in this map (optional operation).

		 If the map previously contained a mapping for the <code>entry.key</code>, the old value is replaced by the specified <code>entry.value</code>. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 <p>This implementation calls <code>put(entry.key, entry.value)</code>.</p>

		 

		 ]]></description>
<param><![CDATA[entry 	entry to put in this map.

		 ]]></param>
<return><![CDATA[the previous value associated with <code>entry.key</code>, or <code>null</code> if there was no mapping for <code>entry.key</code>. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with <code>entry.key</code>, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>putEntry</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified <code>entry.key</code> or <code>entry.value</code> is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified entry is <code>null</code>, or if the specified <code>entry.key</code> or <code>entry.value</code> is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections:AbstractListMap/put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map (optional operation).

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value, and the order of the key is not affected.

		 (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, if the implementation supports <code>null</code> values.)

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>put</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError											if the specified key or value is <code>null</code> and this map does not permit <code>null</code> keys or values.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections:AbstractListMap/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).

		 The elements in the specified collection are interpreted as keys.

		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified collection.

		 If it's so contained, it's removed from this map with the iterator's <code>remove</code> method.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this map contains one or more keys in common with the specified collection.</p>

		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be removed from the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of an element in the specified collection is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified collection is <code>null</code>, or if this map does not permit <code>null</code> keys, and the specified collections contains <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='removeAt' fullname='org.as3collections:AbstractListMap/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='org.as3collections:IMapEntry'>
<description><![CDATA[

		 Removes the mapping at the specified position in this map (optional operation).

		 Shifts any subsequent mappings to the left (subtracts one from their indices).

		 Returns an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p> 

		 

		 ]]></description>
<param><![CDATA[index 	the index of the mapping to be removed.

		 ]]></param>
<return><![CDATA[an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections:AbstractListMap/removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Removes all of the mappings whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (optional operation).

		 Shifts any subsequent mappings to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new map containing all the removed mappings.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeRange</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections:AbstractListMap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the mapping for a key from this map if it is present (optional operation).

		 <p>Returns the value to which this map previously associated the key, or <code>null</code> if the map contained no mapping for the key.

		 If this map permits <code>null</code> values, then a return value of <code>null</code> does not <em>necessarily</em> indicate that the map contained no mapping for the key.

		 It's possible that the map explicitly mapped the key to <code>null</code>.</p>

		 <p>The map will not contain a mapping for the specified key once the call returns.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose mapping is to be removed from the map.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for <code>key</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the type of the specified key is incompatible with this map (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  			if the specified key is <code>null</code> and this map does not permit <code>null</code> keys (optional).

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections:AbstractListMap/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).

		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.

		 The elements in the specified collection are interpreted as keys.

		 <p>This implementation iterates over this map and calls <code>IIterator.remove</code> once for each key that are not contained in the specified collection.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> if the iterator returned by the iterator method does not implement the <code>remove</code> method and this map contains one or more keys not present in the specified collection.</p>

		 

		 ]]></description>
<param><![CDATA[keys 	the collection whose elements are interpreted as keys to be retained in the map.

		 ]]></param>
<return><![CDATA[<code>true</code> if this map changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>retainAll</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the types of one or more keys in this map are incompatible with the specified collection (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains a <code>null</code> element and this collection does not permit <code>null</code> keys (optional), or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='reverse' fullname='org.as3collections:AbstractListMap/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 

		 Reverses the order of the mappings in this map.

		 ]]></description>
</method>
<method name='setKeyAt' fullname='org.as3collections:AbstractListMap/setKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the key at the specified position in this map with the specified key (optional operation).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to replace.

		 ]]></param>
<param><![CDATA[key 	key to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the key previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setKeyAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified key prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified key is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='setValueAt' fullname='org.as3collections:AbstractListMap/setValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;value' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the value at the specified position in this map with the specified value (optional operation).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to replace.

		 ]]></param>
<param><![CDATA[value 	value to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the value previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setValueAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified value prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified value is <code>null</code> and this map does not permit <code>null</code> values.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='size' fullname='org.as3collections:AbstractListMap/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 

		 Returns the number of key-value mappings in this map. 

		 

		 ]]></description>
<return><![CDATA[the number of key-value mappings in this map.

 		 ]]></return>
</method>
<method name='subMap' fullname='org.as3collections:AbstractListMap/subMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new map that is a view of the portion of this map between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>The returned map supports all of the optional map operations supported by this map.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new list that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subMap</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='tailMap' fullname='org.as3collections:AbstractListMap/tailMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 

		 Returns a new <code>IListMap</code> object that is a view of the portion of this map whose keys are greater than or equal to <code>fromKey</code>.

		 The returned map supports all optional map operations that this map supports.

		 

		 ]]></description>
<param><![CDATA[fromKey 	low endpoint (inclusive) of the keys in the returned map.

		 ]]></param>
<return><![CDATA[a new map that is a view of the portion of this map whose keys are greater than or equal to <code>fromKey</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError 	if <code>containsKey(fromKey)</code> returns <code>false</code>.

		 ]]></throws>
</method>
<method name='toString' fullname='org.as3collections:AbstractListMap/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

 		 ]]></return>
</method>
<method name='valueAdded' fullname='org.as3collections:AbstractListMap/protected:valueAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='valueRemoved' fullname='org.as3collections:AbstractListMap/protected:valueRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allKeysEquatable' fullname='org.as3collections:AbstractListMap/allKeysEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all keys in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='allValuesEquatable' fullname='org.as3collections:AbstractListMap/allValuesEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all values in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='keys' fullname='org.as3collections:AbstractListMap/protected:keys/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='modCount' fullname='org.as3collections:AbstractListMap/modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 

		 The number of times this map has been <em>structurally modified</em>.

		 Structural modifications are those that change the size of the map.

		 <p>This field is used by the <code>IListMapIterator</code> implementation returned by the <code>listMapIterator</code> method.

		 If the value of this field changes unexpectedly, the <code>IListMapIterator</code> object will throw a <code>org.as3collections.errors.ConcurrentModificationError</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code> or <code>put</code> operations.</p>

		 <p>Implementations merely has to increment this field in its <code>put</code>, <code>remove</code> and any other methods that result in structural modifications to the map.

		 A single call to <code>put</code> or <code>remove</code> must add no more than one to this field.</p>

		 

		 ]]></description>
</method>
<method name='values' fullname='org.as3collections:AbstractListMap/protected:values/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='keys' fullname='org.as3collections:AbstractListMap/protected:keys/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3collections:IList' param_defaults='undefined' result_type='void'>
</method>
<method name='values' fullname='org.as3collections:AbstractListMap/protected:values/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3collections:IList' param_defaults='undefined' result_type='void'>
</method>
<field name='_keys' fullname='org.as3collections:AbstractListMap/private:_keys' type='org.as3collections:IList' isStatic='false' isConst='false' >
</field>
<field name='_modCount' fullname='org.as3collections:AbstractListMap/protected:_modCount' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_values' fullname='org.as3collections:AbstractListMap/private:_values' type='org.as3collections:IList' isStatic='false' isConst='false' >
</field>
<interfaceRec name='ISortedMap' fullname='org.as3collections:ISortedMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\ISortedMap.as' namespace='org.as3collections' access='public' baseClasses='org.as3coreaddendum.system:ISortable;org.as3collections:IListMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A map that provides a <em>total ordering</em> on its mappings, sorting by keys or values.

	 The map is ordered according to the <em>natural ordering</em> of its keys or values, by a <em>IComparator</em> typically provided at sorted map creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.

	 The <code>sortBy</code> property defines whether the sorting will be made by <code>key</code> or <code>value</code>.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</interfaceRec>
<method name='sortOn' fullname='org.as3collections:ISortedMap/org.as3collections:ISortedMap:sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()

		 ]]></see>
</method>
<method name='sortBy' fullname='org.as3collections:ISortedMap/org.as3collections:ISortedMap:sortBy/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:SortMapBy'>
<description><![CDATA[

		 Defines whether the map should be sorted by its keys or values. The default is <code>SortMapBy.KEY</code>.

 		 ]]></description>
</method>
<method name='sortBy' fullname='org.as3collections:ISortedMap/org.as3collections:ISortedMap:sortBy/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3collections:SortMapBy' param_defaults='undefined' result_type='void'>
</method>
<interfaceRec name='ISortedList' fullname='org.as3collections:ISortedList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\ISortedList.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IList;org.as3coreaddendum.system:ISortable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A list that provides a <em>total ordering</em> on its elements.

	 The list is ordered according to the <em>natural ordering</em> of its elements, by a <code>IComparator</code> typically provided at sorted list creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<see><![CDATA[org.as3collections.lists.SortedArrayList SortedArrayList

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ISortable.html	org.as3coreaddendum.system.ISortable
	 ]]></see>
</interfaceRec>
<method name='sortOn' fullname='org.as3collections:ISortedList/org.as3collections:ISortedList:sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()
		 ]]></see>
</method>
<classRec name='AbstractList' fullname='org.as3collections:AbstractList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\AbstractList.as' namespace='org.as3collections' access='public' baseclass='org.as3collections:AbstractArrayCollection' interfaces='org.as3collections:IList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This class provides a skeletal implementation of the <code>IList</code> interface, to minimize the effort required to implement this interface.

	 <p>This is an abstract class and shouldn't be instantiated directly.</p>

	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.

	 Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p> 

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<see><![CDATA[org.as3collections.IList IList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

	 ]]></see>
</classRec>
<method name='AbstractList' fullname='org.as3collections:AbstractList/AbstractList' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 This is an abstract class and shouldn't be instantiated directly.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the list.

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.

		 ]]></throws>
</method>
<method name='addAllAt' fullname='org.as3collections:AbstractList/addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;collection' param_types='int;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).

		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.

		 <p>This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using <code>addAt</code>.

		 Other implementations can override this method for efficiency.</p>

		 <p>Note that this implementation throws an <code>UnsupportedOperationError</code> unless <code>addAt</code> is overridden.</p>

		 

		 ]]></description>
<param><![CDATA[index 		index at which to insert the first element from the specified collection.

		 ]]></param>
<param><![CDATA[collection 	the collection containing elements to be added to this list.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAllAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of an element of the specified collection prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified collection contains a <code>null</code> element and this list does not permit <code>null</code> elements, or if the specified collection is <code>null</code>. 

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='addAll' fullname='org.as3collections:AbstractList/addAll' isStatic='false' isFinal='false' isOverride='true'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Adds all of the elements in the specified collection to this list (optional operation).

		 <p>This implementation calls <code>addAllAt(size(), collection)</code>.</p>

		 <p>Note that this implementation will throw an <code>UnsupportedOperationError</code> unless <code>addAt</code> is overridden (assuming the specified collection is non-empty).</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be added to this list.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAll</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of an element of the specified collection prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified collection contains a <code>null</code> element and this list does not permit <code>null</code> elements, or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='addAt' fullname='org.as3collections:AbstractList/addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element at the specified position in this list (optional operation).

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 		index at which the specified element is to be inserted.

		 ]]></param>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call. Returns <code>false</code> if this list does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>addAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified element is <code>null</code> and this list does not permit <code>null</code> elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:AbstractList/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Appends the specified element to the end of this list (optional operation).

		 <p>Lists that support this operation may place limitations on what elements may be added to this list.

		 In particular, some lists will refuse to add <code>null</code> elements, and others will impose restrictions on the type of elements that may be added.

		 Lists classes should clearly specify in their documentation any restrictions on what elements may be added.</p>

		 <p>If a list refuses to add a particular element for any reason other than that it already contains the element, it <em>must</em> throw an error (rather than returning <code>false</code>).

		 This preserves the invariant that a list always contains the specified element after this call returns.</p>

		 <p>This implementation calls <code>addAt(size(), element)</code>.</p>

		 <p>Note that this implementation throws an <code>UnsupportedOperationError</code> unless <code>addAt</code> is overridden.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call. Returns <code>false</code> if this list does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>add</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified element is <code>null</code> and this list does not permit <code>null</code> elements.

		 ]]></throws>
</method>
<method name='checkIndex' fullname='org.as3collections:AbstractList/protected:checkIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;max' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementAdded' fullname='org.as3collections:AbstractList/protected:elementAdded' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementRemoved' fullname='org.as3collections:AbstractList/protected:elementRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='equals' fullname='org.as3collections:AbstractList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='getAt' fullname='org.as3collections:AbstractList/getAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 

		 Returns the element at the specified position in this list.

		 

		 ]]></description>
<param><![CDATA[index 	index of the element to return.

		 ]]></param>
<return><![CDATA[the element at the specified position in this list.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 	if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='indexOfByEquality' fullname='org.as3collections:AbstractList/private:indexOfByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='indexOf' fullname='org.as3collections:AbstractList/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>first occurrence</em> of the specified element in this list, or -1 if this list does not contain the element.

		 <p>If all elements in this list and <code>element</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this list using <code>equals</code> method of the elements.

		 Otherwise this implementation uses native <code>Array.indexOf</code> method.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to search for.

		 ]]></param>
<param><![CDATA[fromIndex 	the position in the list from which to start searching for the element.

		 ]]></param>
<return><![CDATA[the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element is incompatible with this list (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code> and this list does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='lastIndexOfByEquality' fullname='org.as3collections:AbstractList/private:lastIndexOfByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0x7fffffff' result_type='int'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='lastIndexOf' fullname='org.as3collections:AbstractList/lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0x7fffffff' result_type='int'>
<description><![CDATA[

		 Returns the index of the <em>last occurrence</em> of the specified element in this list, or -1 if this list does not contain the element.

		 <p>If all elements in this list and <code>element</code> argument implement <code>org.as3coreaddendum.system.IEquatable</code>, this implementation will iterate over this list using <code>equals</code> method of the elements.

		 Otherwise this implementation uses native <code>Array.lastIndexOf</code> method.</p>

		 

		 ]]></description>
<param><![CDATA[element 		the element to search for.

		 ]]></param>
<param><![CDATA[fromIndex 	the position in the list from which to start searching for the element. The default is the maximum value allowed for an index. If you do not specify <code>fromIndex</code>, the search starts at the last item in the list.

		 ]]></param>
<return><![CDATA[the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element is incompatible with this list (optional).

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code> and this list does not permit <code>null</code> elements (optional).

		 ]]></throws>
</method>
<method name='listIterator' fullname='org.as3collections:AbstractList/listIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 The specified index indicates the first element that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the element with the specified index minus one.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.IListIterator IListIterator

		 ]]></see>
</method>
<method name='removeAt' fullname='org.as3collections:AbstractList/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the element at the specified position in this list (optional operation).

		 Shifts any subsequent elements to the left (subtracts one from their indices).

		 Returns the element that was removed from the list. 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	the index of the element to be removed.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections:AbstractList/removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Removes all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (optional operation).

		 Shifts any subsequent elements to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing elements (exclusive).

		 ]]></param>
<return><![CDATA[a new collection containing all the removed elements.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeRange</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='reverse' fullname='org.as3collections:AbstractList/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Reverses the order of the elements in this list.

		 This implementation uses native <code>Array.reverse</code> method.

		 ]]></description>
</method>
<method name='setAt' fullname='org.as3collections:AbstractList/setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the element at the specified position in this list with the specified element (optional operation).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 		index of the element to replace.

		 ]]></param>
<param><![CDATA[element 	element to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setAt</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 		if the specified element is <code>null</code> and this list does not permit <code>null</code> elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='subList' fullname='org.as3collections:AbstractList/subList' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new list that is a view of the portion of this list between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>This list should not be modified.</p>

		 <p>The returned list should support all of the optional list operations supported by this list.</p>

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new list that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subList</code> operation is not supported by this list.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='modCount' fullname='org.as3collections:AbstractList/modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 

		 The number of times this list has been <em>structurally modified</em>.

		 Structural modifications are those that change the size of the list.

		 <p>This field is used by the list iterator implementation returned by the <code>listIterator</code> method.

		 If the value of this field changes unexpectedly, the list iterator will throw a <code>org.as3collections.errors.ConcurrentModificationError</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code>, <code>set</code> or <code>add</code> operations.</p>

		 <p>Implementations merely has to increment this field in its <code>add</code>, <code>remove</code> and any other methods that result in structural modifications to the list.

		 A single call to <code>add</code> or <code>remove</code> must add no more than one to this field.</p>

		 

		 ]]></description>
</method>
<field name='_modCount' fullname='org.as3collections:AbstractList/protected:_modCount' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AbstractQueue' fullname='org.as3collections:AbstractQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\AbstractQueue.as' namespace='org.as3collections' access='public' baseclass='org.as3collections:AbstractArrayCollection' interfaces='org.as3collections:IQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This class provides skeletal implementations of some <code>IQueue</code> operations.

	 The implementations in this class are appropriate when the base implementation does not allow <code>null</code> elements.

	 Methods <code>add</code>, <code>dequeue</code>, and <code>element</code> are based on <code>offer</code>, <code>poll</code>, and <code>peek</code>, respectively but throw errors instead of indicating failure via <code>false</code> or <code>null</code> returns. 

	 <p>An <code>IQueue</code> implementation that extends this class must minimally define a method <code>offer</code> which does not permit insertion of <code>null</code> elements, along with methods <code>peek</code>, <code>poll</code>, <code>ICollection.iterator</code> supporting <code>IIterator.remove</code> and <code>clone</code>.

	 Typically, additional methods will be overridden as well.

	 If these requirements cannot be met, consider instead subclassing <code>AbstractArrayCollection</code>.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='AbstractQueue' fullname='org.as3collections:AbstractQueue/AbstractQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>AbstractQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the queue.

		 ]]></param>
<throws><![CDATA[IllegalOperationError 	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections:AbstractQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 This method differs from <code>offer</code> only in that it throws an error if the element cannot be inserted.

		 <p>This implementation returns the result of <code>offer</code> unless the element cannot be inserted.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element prevents it from being added to this queue.

		 ]]></throws>
<throws><![CDATA[flash.errors.IllegalOperationError  			if the specified element cannot be inserted.

		 ]]></throws>
</method>
<method name='dequeue' fullname='org.as3collections:AbstractQueue/dequeue' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Retrieves and removes the head of this queue.

		 This method differs from <code>poll</code> only in that it throws an error if this queue is empty.

		 <p>This implementation returns the result of <code>poll</code> unless the queue is empty.</p>

		 

		 ]]></description>
<return><![CDATA[the head of this queue.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError  		if this queue is empty.

		 ]]></throws>
</method>
<method name='element' fullname='org.as3collections:AbstractQueue/element' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Retrieves, but does not remove, the head of this queue.

		 This method differs from <code>peek</code> only in that it throws an error if this queue is empty. 

		 <p>This implementation returns the result of <code>peek</code>  unless the queue is empty.</p>

		 

		 ]]></description>
<return><![CDATA[the head of this queue.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if this queue is empty.

		 ]]></throws>
</method>
<method name='equals' fullname='org.as3collections:AbstractQueue/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='offer' fullname='org.as3collections:AbstractQueue/offer' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>offer</code> operation is not supported by this queue.

		 ]]></throws>
</method>
<method name='peek' fullname='org.as3collections:AbstractQueue/peek' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty. 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>peek</code> operation is not supported by this queue.

		 ]]></throws>
</method>
<method name='poll' fullname='org.as3collections:AbstractQueue/poll' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty. 

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.

 		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>poll</code> operation is not supported by this queue.

		 ]]></throws>
</method>
<interfaceRec name='ISortedQueue' fullname='org.as3collections:ISortedQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\ISortedQueue.as' namespace='org.as3collections' access='public' baseClasses='org.as3collections:IQueue;org.as3coreaddendum.system:ISortable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A queue that provides a <em>total ordering</em> on its elements.

	 The queue is ordered according to the <em>natural ordering</em> of its elements, by a <em>IComparator</em> typically provided at sorted queue creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</interfaceRec>
<method name='sortOn' fullname='org.as3collections:ISortedQueue/org.as3collections:ISortedQueue:sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()

		 ]]></see>
</method>
<classRec name='MapIterator' fullname='org.as3collections.iterators:MapIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\MapIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='Object' interfaces='org.as3collections:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over maps (implementations of the <code>IMap</code> interface).
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IIterator;

	 import org.as3collections.IMap;

	 import org.as3collections.maps.ArrayListMap;

	 

	 var map1:IMap = new ArrayListMap();

	 map1.put("element-1", 1);

	 map1.put("element-3", 3);

	 map1.put("element-5", 5);

	 map1.put("element-7", 7);

	 

	 map1                             // ["element-1"=1,"element-3"=3,"element-5"=5,"element-7"=7]

	 

	 var it:IIterator = map1.iterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	     ITERATION N.1

	 

	     it.pointer()                  // null

	 

	     e = it.next();

	     e                             // 1

	 

	     it.pointer()                  // "element-1"

	 

	     ITERATION N.2

	 

	     it.pointer()                  // "element-1"

	 

	     e = it.next();

	     e                             // 3

	 

	     it.pointer()                  // "element-3"

	 

	     if (e == 3)

	     {

	         it.remove();

	         map1                      // ["element-1"=1,"element-5"=5,"element-7"=7]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                  // "element-1"

	 

	     e = it.next();

	     e                             // 5

	 

	     it.pointer()                  // "element-5"

	 

	     ITERATION N.4

	 

	     it.pointer()                  // "element-5"

	 

	     e = it.next();

	     e                             // 7

	 

	     it.pointer()                  // "element-7"

	 }

	 </listing>

	 
	 ]]></example>
</classRec>
<method name='MapIterator' fullname='org.as3collections.iterators:MapIterator/MapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>MapIterator</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	the source map to iterate over.

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='hasNext' fullname='org.as3collections.iterators:MapIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 
		 Returns <code>true</code> if the iteration has more elements.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements.
 		 ]]></return>
</method>
<method name='next' fullname='org.as3collections.iterators:MapIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 
		 Returns the next element in the iteration.
		 

		 ]]></description>
<return><![CDATA[the next element in the iteration.
 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no more elements.

 		 ]]></throws>
</method>
<method name='pointer' fullname='org.as3collections.iterators:MapIterator/pointer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 
		 Returns the internal pointer of the iteration.

		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <code>int</code>.</p>

		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 ]]></description>
<return><![CDATA[the internal pointer of the iteration.
 		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections.iterators:MapIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).

		 <p>This method can be called only once per call to <code>next</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  	if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method.

		 ]]></throws>
</method>
<method name='reset' fullname='org.as3collections.iterators:MapIterator/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 
		 Resets the internal pointer of the iterator.
		 ]]></description>
</method>
<field name='_key' fullname='org.as3collections.iterators:MapIterator/private:_key' type='' isStatic='false' isConst='false' >
</field>
<field name='_keysIterator' fullname='org.as3collections.iterators:MapIterator/private:_keysIterator' type='org.as3collections:IIterator' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='org.as3collections.iterators:MapIterator/private:_source' type='org.as3collections:IMap' isStatic='false' isConst='false' >
</field>
<field name='_values' fullname='org.as3collections.iterators:MapIterator/private:_values' type='Array' isStatic='false' isConst='false' >
</field>
<classRec name='ArrayIterator' fullname='org.as3collections.iterators:ArrayIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ArrayIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='Object' interfaces='org.as3collections:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over an <code>Array</code> object.
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IIterator;

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 

	 var list1:IList = new ArrayList([1, 3, 5, 7]);

	 

	 list1                             // [1,3,5,7]

	 

	 var it:IIterator = list1.iterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	     ITERATION N.1

	 

	     it.pointer()                  // -1

	 

	     e = it.next();

	     e                             // 1

	 

	     it.pointer()                  // 0

	 

	     ITERATION N.2

	 

	     it.pointer()                  // 0

	 

	     e = it.next();

	     e                             // 3

	 

	     it.pointer()                  // 1

	 

	     if (e == 3)

	     {

	         it.remove();

	         list1                     // [1,5,7]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                  // 0

	 

	     e = it.next();

	     e                             // 5

	 

	     it.pointer()                  // 1

	 

	     ITERATION N.4

	 

	     it.pointer()                  // 1

	 

	     e = it.next();

	     e                             // 7

	 

	     it.pointer()                  // 2

	 }

	 </listing>

	 
	 ]]></example>
</classRec>
<method name='ArrayIterator' fullname='org.as3collections.iterators:ArrayIterator/ArrayIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new ArrayIterator object.

		 

		 ]]></description>
<param><![CDATA[source 	the source array to iterate over.

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='hasNext' fullname='org.as3collections.iterators:ArrayIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if the iteration has more elements.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements.
 		 ]]></return>
</method>
<method name='next' fullname='org.as3collections.iterators:ArrayIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next element in the iteration.
		 

		 ]]></description>
<return><![CDATA[the next element in the iteration.
 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no more elements.
 		 ]]></throws>
</method>
<method name='pointer' fullname='org.as3collections.iterators:ArrayIterator/pointer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the internal pointer of the iteration.

		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <code>int</code>.</p>

		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 ]]></description>
<return><![CDATA[the internal pointer of the iteration.
 		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections.iterators:ArrayIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).

		 <p>This method can be called only once per call to <code>next</code>.</p>

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  	if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method.
		 ]]></throws>
</method>
<method name='reset' fullname='org.as3collections.iterators:ArrayIterator/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the internal pointer of the iterator.
		 ]]></description>
</method>
<field name='_allowRemove' fullname='org.as3collections.iterators:ArrayIterator/private:_allowRemove' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_pointer' fullname='org.as3collections.iterators:ArrayIterator/private:_pointer' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='_source' fullname='org.as3collections.iterators:ArrayIterator/private:_source' type='Array' isStatic='false' isConst='false' >
</field>
<classRec name='ReadOnlyMapIterator' fullname='org.as3collections.iterators:ReadOnlyMapIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ReadOnlyMapIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='org.as3collections.iterators:MapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over maps (implementations of the <code>IMap</code> interface).

	 This implementation doesn't allow modifications in the map.

	 All methods that change the map will throw an <code>UnsupportedOperationError</code>.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</classRec>
<method name='ReadOnlyMapIterator' fullname='org.as3collections.iterators:ReadOnlyMapIterator/ReadOnlyMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ReadOnlyMapIterator</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	the source map to iterate over.

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.iterators:ReadOnlyMapIterator/remove' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyMapIterator</code> is a read-only iterator and doesn't allow modifications in the map.

		 ]]></throws>
</method>
<classRec name='ListMapIterator' fullname='org.as3collections.iterators:ListMapIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ListMapIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='Object' interfaces='org.as3collections:IListMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over implementations of <code>IListMap</code> interface.

	 <code>ListMapIterator</code> allows to traverse the map in either direction.

	 <p><b>IMPORTANT:</b></p>

	 <p>A <code>ListMapIterator</code> has no current mapping; its cursor position always lies between the mapping that would be returned by a call to <code>previous()</code> and the mapping that would be returned by a call to <code>next()</code>.

	 An iterator for a map of length <code>n</code> has <code>n+1</code> possible cursor positions, as illustrated by the carets (^) below:</p>

	 <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(0)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(1)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(2)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ... Element(n-1)</p>

	 <p>cursor positions:

	 &#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^</p>

	 <p>Note that the <code>remove()</code> and <code>set()</code> methods are <em>not</em> defined in terms of the cursor position; they are defined to operate on the last mapping returned by a call to <code>next()</code> or <code>previous()</code>.</p>

	 <p>For further information do not hesitate to see the examples at the end of the page.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <b>Example 1</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IListMap;

	 import org.as3collections.IListMapIterator;

	 import org.as3collections.maps.ArrayListMap;

	 

	 var map1:IListMap = new ArrayListMap();

	 map1.put("element-1", 1);

	 map1.put("element-3", 3);

	 map1.put("element-5", 5);

	 

	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]

	 

	 var it:IListMapIterator = map1.listMapIterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	 

	     ITERATION N.1

	 

	     it.pointer()                    // null

	     it.nextIndex()                  // 0

	     it.previousIndex()              // -1

	 

	     e = it.next();

	     e                               // 1

	 

	     it.pointer()                    // "element-1"

	     it.nextIndex()                  // 1

	     it.previousIndex()              // 0

	 

	     ITERATION N.2

	 

	     it.pointer()                    // "element-1"

	     it.nextIndex()                  // 1

	     it.previousIndex()              // 0

	 

	     e = it.next();

	     e                               // 3

	 

	     it.pointer()                    // "element-3"

	     it.nextIndex()                  // 2

	     it.previousIndex()              // 1

	 

	     if (e == 3)

	     {

	         //map1.put("element-4", 4)  // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).

	         it.put("element-4", 4);

	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4,"element-5"=5]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                    // "element-4"

	     it.nextIndex()                  // 3

	     it.previousIndex()              // 2

	 

	     e = it.next();

	     e                               // 5

	 

	     it.pointer()                    // "element-5"

	     it.nextIndex()                  // 4

	     it.previousIndex()              // 3

	 

	     if (e == 5)

	     {

	         it.remove();

	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4]

	     }

	 }

	 </listing>

	 

	 <b>Example 2</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IListMap;

	 import org.as3collections.IListMapIterator;

	 import org.as3collections.maps.ArrayListMap;

	 

	 var map1:IListMap = new ArrayListMap();

	 map1.put("element-1", 1);

	 map1.put("element-3", 3);

	 map1.put("element-5", 5);

	 

	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]

	 

	 var it:IListMapIterator = map1.listIterator(map1.size());

	 var e:int;

	 

	 while (it.hasPrevious())

	 

	 {

	 

	     ITERATION N.1

	 

	     it.pointer()                    // "element-5"

	     it.nextIndex()                  // 3

	     it.previousIndex()              // 2

	 

	     e = it.previous();

	     e                               // 5

	 

	     it.pointer()                    // "element-3"

	     it.nextIndex()                  // 2

	     it.previousIndex()              // 1

	 

	     if (e == 5)

	     {

	         it.remove()

	         map1                        // ["element-1"=1,"element-3"=3]

	     }

	 

	     ITERATION N.2

	 

	     it.pointer()                    // "element-3"

	     it.nextIndex()                  // 2

	     it.previousIndex()              // 1

	 

	     e = it.previous();

	     e                               // 3

	 

	     it.pointer()                    // "element-1"

	     it.nextIndex()                  // 1

	     it.previousIndex()              // 0

	 

	     if (e == 3)

	     {

	         //map1.put("element-4", 4); // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).

	         it.put("element-4", 4);

	         map1                        // [1,4,3]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                    // "element-3"

	     it.nextIndex()                  // 2

	     it.previousIndex()              // 1

	 

	     e = it.previous();

	     e                               // 4

	 

	     it.pointer()                    // "element-1"

	     it.nextIndex()                  // 1

	     it.previousIndex()              // 0

	 

	     ITERATION N.4

	 

	     it.pointer()                    // "element-1"

	     it.nextIndex()                  // 1

	     it.previousIndex()              // 0

	 

	     e = it.previous();

	     e                               // 1

	 

	     it.pointer()                    // null

	     it.nextIndex()                  // 0

	     it.previousIndex()              // -1

	 }

	 </listing>

	 

	 ]]></example>
</classRec>
<method name='ListMapIterator' fullname='org.as3collections.iterators:ListMapIterator/ListMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source;position' param_types='org.as3collections:IListMap;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ListMapIterator</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		the source <code>ListMapIterator</code> to iterate over.

		 ]]></param>
<param><![CDATA[position 	indicates the first mapping that would be returned by an initial call to <code>next</code>. An initial call to <code>previous</code> would return the mapping with the specified position minus one. 

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='checkConcurrentModificationError' fullname='org.as3collections.iterators:ListMapIterator/checkConcurrentModificationError' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hasNext' fullname='org.as3collections.iterators:ListMapIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 
		 Returns <code>true</code> if the iteration has more elements.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements.
 		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3collections.iterators:ListMapIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if the iteration has more mappings when traversing the map in the reverse direction.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more mappings when traversing the map in the reverse direction.

 		 ]]></return>
</method>
<method name='nextIndex' fullname='org.as3collections.iterators:ListMapIterator/nextIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 
		 Returns the index of the mapping that would be returned by a subsequent call to <code>next</code>.

		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 ]]></description>
<return><![CDATA[the index of the mapping that would be returned by a subsequent call to <code>next</code>, or map size if map iterator is at end of map.
 		 ]]></return>
</method>
<method name='next' fullname='org.as3collections.iterators:ListMapIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the next <code>value</code> in the iteration.

		 The <code>pointer</code> operation returns the <code>key</code> associated with the returned <code>value</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no more mappings.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='pointer' fullname='org.as3collections.iterators:ListMapIterator/pointer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the internal pointer of the iteration.

		 <p>In this implementation the pointer is a <code>key</code>.</p>

		 

		 ]]></description>
<return><![CDATA[the internal pointer of the iteration.

 		 ]]></return>
</method>
<method name='previousIndex' fullname='org.as3collections.iterators:ListMapIterator/previousIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 
		 Returns the index of the mapping that would be returned by a subsequent call to <code>previous</code>.

		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 ]]></description>
<return><![CDATA[the index of the mapping that would be returned by a subsequent call to <code>previous</code>, or -1 if map iterator is at beginning of map.
 		 ]]></return>
</method>
<method name='previous' fullname='org.as3collections.iterators:ListMapIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the previous <code>value</code> in the iteration.

		 The <code>pointer</code> operation returns the <code>key</code> associated with the returned <code>value</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no previous mappings.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections.iterators:ListMapIterator/put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map.

		 The mapping is inserted immediately before the next mapping that would be returned by <code>next</code>, if any, and after the next mapping that would be returned by <code>previous</code>, if any.

		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)

		 The new mapping is inserted before the implicit cursor: a subsequent call to <code>next</code> would be unaffected, and a subsequent call to <code>previous</code> would return the new mapping.

		 (This call increases by one the value that would be returned by a call to <code>nextIndex</code> or <code>previousIndex</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the map already contains the specified key.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.iterators:ListMapIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes from the map the last mapping that was returned by <code>next</code> or <code>previous</code>.

		 This call can only be made once per call to <code>next</code> or <code>previous</code>.

		 It can be made only if <code>IListMapIterator.add</code> has not been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the map was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='reset' fullname='org.as3collections.iterators:ListMapIterator/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 
		 Resets the internal pointer of the iterator.
		 ]]></description>
</method>
<method name='set' fullname='org.as3collections.iterators:ListMapIterator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Replaces the last mapping returned by <code>next</code> or <code>previous</code> with the specified mapping.

		 This call can be made only if neither <code>IListMapIterator.remove</code> nor <code>IListMapIterator.add</code> have been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key. 

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>set</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified key or value prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if neither <code>next</code> or <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if the map already contains the specified key and it is not the replaced key.

		 ]]></throws>
</method>
<field name='_allowModification' fullname='org.as3collections.iterators:ListMapIterator/private:_allowModification' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_modCount' fullname='org.as3collections.iterators:ListMapIterator/private:_modCount' type='int' isStatic='false' isConst='false' >
</field>
<field name='_pointer' fullname='org.as3collections.iterators:ListMapIterator/private:_pointer' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='_removePointer' fullname='org.as3collections.iterators:ListMapIterator/private:_removePointer' type='int' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='org.as3collections.iterators:ListMapIterator/private:_source' type='org.as3collections:IListMap' isStatic='false' isConst='false' >
</field>
<classRec name='ListIterator' fullname='org.as3collections.iterators:ListIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ListIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='Object' interfaces='org.as3collections:IListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over lists (implementations of the <code>IList</code> interface).

	 <code>ListIterator</code> allows to traverse the list in either direction.

	 <p><b>IMPORTANT:</b></p>

	 <p>A <code>ListIterator</code> has no current element; its cursor position always lies between the element that would be returned by a call to <code>previous()</code> and the element that would be returned by a call to <code>next()</code>.

	 An iterator for a list of length <code>n</code> has <code>n+1</code> possible cursor positions, as illustrated by the carets (^) below:</p>

	 <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(0)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(1)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 Element(2)&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ... Element(n-1)</p>

	 <p>cursor positions:

	 &#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

	 ^</p>

	 <p>Note that the <code>remove()</code> and <code>set()</code> methods are <em>not</em> defined in terms of the cursor position; they are defined to operate on the last element returned by a call to <code>next()</code> or <code>previous()</code>.</p>

	 <p>For further information do not hesitate to see the examples at the end of the page.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <b>Example 1</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.ArrayList;

	 

	 var list1:IList = new ArrayList([1, 3, 5]);

	 

	 list1                             // [1,3,5]

	 

	 var it:IListIterator = list1.listIterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	 

	     ITERATION N.1

	 

	     it.pointer()                  // -1

	     it.nextIndex()                // 0

	     it.previousIndex()            // -1

	 

	     e = it.next();

	     e                             // 1

	 

	     it.pointer()                  // 0

	     it.nextIndex()                // 1

	     it.previousIndex()            // 0

	 

	     ITERATION N.2

	 

	     it.pointer()                  // 0

	     it.nextIndex()                // 1

	     it.previousIndex()            // 0

	 

	     e = it.next();

	     e                             // 3

	 

	     it.pointer()                  // 1

	     it.nextIndex()                // 2

	     it.previousIndex()            // 1

	 

	     if (e == 3)

	     {

	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).

	         it.add(4);

	         list1                     // [1,3,4,5]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                  // 2

	     it.nextIndex()                // 3

	     it.previousIndex()            // 2

	 

	     e = it.next();

	     e                             // 5

	 

	     it.pointer()                  // 3

	     it.nextIndex()                // 4

	     it.previousIndex()            // 3

	 

	     if (e == 5)

	     {

	         it.remove();

	         list1                     // [1,3,4]

	     }

	 }

	 </listing>

	 

	 <b>Example 2</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.ArrayList;

	 

	 var list1:IList = new ArrayList([1, 3, 5]);

	 

	 list1                             // [1,3,5]

	 

	 var it:IListIterator = list1.listIterator(list1.size());

	 var e:int;

	 

	 while (it.hasPrevious())

	 

	 {

	 

	     ITERATION N.1

	 

	     it.pointer()                  // 2

	     it.nextIndex()                // 3

	     it.previousIndex()            // 2

	 

	     e = it.previous();

	     e                             // 5

	 

	     it.pointer()                  // 1

	     it.nextIndex()                // 2

	     it.previousIndex()            // 1

	 

	     if (e == 5)

	     {

	         it.remove()

	         list1                     // [1,3]

	     }

	 

	     ITERATION N.2

	 

	     it.pointer()                  // 1

	     it.nextIndex()                // 2

	     it.previousIndex()            // 1

	 

	     e = it.previous();

	     e                             // 3

	 

	     it.pointer()                  // 0

	     it.nextIndex()                // 1

	     it.previousIndex()            // 0

	 

	     if (e == 3)

	     {

	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).

	         it.add(4);

	         list1                     // [1,4,3]

	     }

	 

	     ITERATION N.3

	 

	     it.pointer()                  // 1

	     it.nextIndex()                // 2

	     it.previousIndex()            // 1

	 

	     e = it.previous();

	     e                             // 4

	 

	     it.pointer()                  // 0

	     it.nextIndex()                // 1

	     it.previousIndex()            // 0

	 

	     ITERATION N.4

	 

	     it.pointer()                  // 0

	     it.nextIndex()                // 1

	     it.previousIndex()            // 0

	 

	     e = it.previous();

	     e                             // 1

	 

	     it.pointer()                  // -1

	     it.nextIndex()                // 0

	     it.previousIndex()            // -1

	 }

	 </listing>

	 

	 ]]></example>
</classRec>
<method name='ListIterator' fullname='org.as3collections.iterators:ListIterator/ListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source;position' param_types='org.as3collections:IList;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ListIterator</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		the source <code>ListIterator</code> to iterate over.

		 ]]></param>
<param><![CDATA[position 	indicates the first element that would be returned by an initial call to <code>next</code>. An initial call to <code>previous</code> would return the element with the specified position minus one. 

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections.iterators:ListIterator/add' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 

		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <code>next</code>, if any, and after the next element that would be returned by <code>previous</code>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <code>next</code> would be unaffected, and a subsequent call to <code>previous</code> would return the new element. (This call increases by one the value that would be returned by a call to <code>nextIndex</code> or <code>previousIndex</code>.) 

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the list has changed as a result of the call. Returns <code>false</code> if the list does not permit duplicates and already contains the specified element.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='checkConcurrentModificationError' fullname='org.as3collections.iterators:ListIterator/checkConcurrentModificationError' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hasNext' fullname='org.as3collections.iterators:ListIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 
		 Returns <code>true</code> if the iteration has more elements.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements.
 		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3collections.iterators:ListIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Returns <code>true</code> if the iteration has more elements when traversing the list in the reverse direction.

		 

		 ]]></description>
<return><![CDATA[<code>true</code> if the iteration has more elements when traversing the list in the reverse direction.

 		 ]]></return>
</method>
<method name='nextIndex' fullname='org.as3collections.iterators:ListIterator/nextIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 
		 Returns the index of the element that would be returned by a subsequent call to <code>next</code>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 ]]></description>
<return><![CDATA[the index of the element that would be returned by a subsequent call to <code>next</code>, or list size if list iterator is at end of list.
 		 ]]></return>
</method>
<method name='next' fullname='org.as3collections.iterators:ListIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 
		 Returns the next element in the iteration.
		 

		 ]]></description>
<return><![CDATA[the next element in the iteration.
 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no more elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='pointer' fullname='org.as3collections.iterators:ListIterator/pointer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Returns the internal pointer of the iteration.

		 <p>In this implementation the pointer is the index (position) of the iteration, typically an <code>int</code>.</p>

		 

		 ]]></description>
<return><![CDATA[the internal pointer of the iteration.

 		 ]]></return>
</method>
<method name='previousIndex' fullname='org.as3collections.iterators:ListIterator/previousIndex' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 
		 Returns the index of the element that would be returned by a subsequent call to <code>previous</code>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 ]]></description>
<return><![CDATA[the index of the element that would be returned by a subsequent call to <code>previous</code>, or -1 if list iterator is at beginning of list.
 		 ]]></return>
</method>
<method name='previous' fullname='org.as3collections.iterators:ListIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 

		 Returns the previous element in the iteration.

		 

		 ]]></description>
<return><![CDATA[the previous element in the iteration.

 		 ]]></return>
<throws><![CDATA[org.as3collections.errors.NoSuchElementError 	if the iteration has no previous elements.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.iterators:ListIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Removes from the list the last element that was returned by <code>next</code> or <code>previous</code>. This call can only be made once per call to <code>next</code> or <code>previous</code>. It can be made only if <code>IListIterator.add</code> has not been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>remove</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.ConcurrentModificationError 	if the list was changed directly (without using the iterator) during iteration.

		 ]]></throws>
</method>
<method name='reset' fullname='org.as3collections.iterators:ListIterator/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 
		 Resets the internal pointer of the iterator.
		 ]]></description>
</method>
<method name='set' fullname='org.as3collections.iterators:ListIterator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Replaces the last element returned by <code>next</code> or <code>previous</code> with the specified element (optional operation). This call can be made only if neither <code>IListIterator.remove</code> nor <code>IListIterator.add</code> have been called after the last call to <code>next</code> or <code>previous</code>. 

		 

		 ]]></description>
<param><![CDATA[element 	the element with which to replace the last element returned by <code>next</code> or <code>previous</code>.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>set</code> operation is not supported by this iterator.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified element prevents it from being added to this list.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.IllegalStateError  			if neither <code>next</code> or <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>.

		 ]]></throws>
</method>
<field name='_allowModification' fullname='org.as3collections.iterators:ListIterator/private:_allowModification' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_modCount' fullname='org.as3collections.iterators:ListIterator/private:_modCount' type='int' isStatic='false' isConst='false' >
</field>
<field name='_pointer' fullname='org.as3collections.iterators:ListIterator/private:_pointer' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='_removePointer' fullname='org.as3collections.iterators:ListIterator/private:_removePointer' type='int' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='org.as3collections.iterators:ListIterator/private:_source' type='org.as3collections:IList' isStatic='false' isConst='false' >
</field>
<classRec name='ReadOnlyArrayIterator' fullname='org.as3collections.iterators:ReadOnlyArrayIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ReadOnlyArrayIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='org.as3collections.iterators:ArrayIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over an <code>Array</code> object.

	 This implementation doesn't allow modifications in the collection.

	 All methods that change the collection will throw an <code>UnsupportedOperationError</code>.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</classRec>
<method name='ReadOnlyArrayIterator' fullname='org.as3collections.iterators:ReadOnlyArrayIterator/ReadOnlyArrayIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new ReadOnlyArrayIterator object.

		 

		 ]]></description>
<param><![CDATA[source 	the source array to iterate over.

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.iterators:ReadOnlyArrayIterator/remove' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayIterator</code> is a read-only iterator and doesn't allow modifications in the collection.
		 ]]></throws>
</method>
<classRec name='ReadOnlyListIterator' fullname='org.as3collections.iterators:ReadOnlyListIterator' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\iterators\ReadOnlyListIterator.as' namespace='org.as3collections.iterators' access='public' baseclass='org.as3collections.iterators:ListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An iterator to iterate over lists.

	 This implementation doesn't allow modifications in the list.

	 All methods that change the list will throw an <code>UnsupportedOperationError</code>.
	 
	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
</classRec>
<method name='ReadOnlyListIterator' fullname='org.as3collections.iterators:ReadOnlyListIterator/ReadOnlyListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='source;position' param_types='org.as3collections:IList;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ReadOnlyListIterator</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	the source <code>ReadOnlyListIterator</code> to iterate over.

		 ]]></param>
<param><![CDATA[position 	indicates the first element that would be returned by an initial call to <code>next</code>. An initial call to <code>previous</code> would return the element with the specified position minus one.

		 ]]></param>
<throws><![CDATA[ArgumentError  if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections.iterators:ReadOnlyListIterator/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyListIterator</code> is a read-only iterator and doesn't allow modifications in the list.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.iterators:ReadOnlyListIterator/remove' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyListIterator</code> is a read-only iterator and doesn't allow modifications in the list.
		 ]]></throws>
</method>
<method name='set' fullname='org.as3collections.iterators:ReadOnlyListIterator/set' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element with which to replace the last element returned by <code>next</code> or <code>previous</code>.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyListIterator</code> is a read-only iterator and doesn't allow modifications in the list.

		 ]]></throws>
</method>
<classRec name='ConcurrentModificationError' fullname='org.as3collections.errors:ConcurrentModificationError' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\errors\ConcurrentModificationError.as' namespace='org.as3collections.errors' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The error that is thrown by methods that have detected concurrent modification of an object when such modification is not permissible.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='ConcurrentModificationError' fullname='org.as3collections.errors:ConcurrentModificationError/ConcurrentModificationError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new ConcurrentModificationError instance.

		 

		 ]]></description>
<param><![CDATA[message	A string associated with the error object.

		 ]]></param>
</method>
<classRec name='IndexOutOfBoundsError' fullname='org.as3collections.errors:IndexOutOfBoundsError' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\errors\IndexOutOfBoundsError.as' namespace='org.as3collections.errors' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The error that is thrown to indicate that an index of some sort (such as to an array) is out of range.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='IndexOutOfBoundsError' fullname='org.as3collections.errors:IndexOutOfBoundsError/IndexOutOfBoundsError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new IndexOutOfBoundsError instance.

		 

		 ]]></description>
<param><![CDATA[message	A string associated with the error object.

		 ]]></param>
</method>
<classRec name='NoSuchElementError' fullname='org.as3collections.errors:NoSuchElementError' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\errors\NoSuchElementError.as' namespace='org.as3collections.errors' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The error that is thrown to indicate that there are no more elements in the iteration.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
</classRec>
<method name='NoSuchElementError' fullname='org.as3collections.errors:NoSuchElementError/NoSuchElementError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new NoSuchElementError instance.

		 

		 ]]></description>
<param><![CDATA[message	A string associated with the error object.

		 ]]></param>
</method>
<classRec name='TypedMap' fullname='org.as3collections.maps:TypedMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\TypedMap.as' namespace='org.as3collections.maps' access='public' baseclass='Object' interfaces='org.as3collections:IMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedMap</code> works as a wrapper for a map.

	 It stores the <code>wrapMap</code> constructor's argument in the <code>wrappedMap</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedMap</code> object.

	 The methods that need to be checked for the type of the keys and values are previously validated with the <code>validateKeyType</code>, <code>validateValueType</code> or <code>validateMap</code> method before forward the call.

	 If the type of a key or value requested to be inserted to this map is incompatible with the type of the map a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedMap</code> returns the return of the <code>wrappedMap</code> call.

	 <p><code>TypedMap</code> does not allow <code>null</code> keys or values.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IMap;

	 import org.as3collections.maps.ArrayListMap;

	 import org.as3collections.maps.TypedMap;

	 

	 var map1:IMap = new ArrayListMap();

	 

	 map1.put("e", 1)            // null

	 map1.put("d", 2)            // null

	 map1.put("c", 3)            // null

	 map1.put("b", 4)            // null

	 map1.put("a", 5)            // null

	 

	 map1                        // {e=1,d=2,c=3,b=4,a=5}

	 map1.size()                 // 5

	 

	 var map2:IMap = new TypedMap(map1, String, Number); // you can use this way

	 

	 //var map2:IMap = MapUtil.getTypedMap(map1, String, Number); // or you can use this way

	 

	 map2                        // {e=1,d=2,c=3,b=4,a=5}

	 map2.size()                 // 5

	 

	 map2.equals(map1)           // false

	 

	 map2.put("f", 6)            // null

	 map2                        // {e=1,d=2,c=3,b=4,a=5,f=6}

	 map2.size()                 // 6

	 

	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number

	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedMap() MapUtil.getTypedMap()

	 ]]></see>
</classRec>
<method name='TypedMap' fullname='org.as3collections.maps:TypedMap/TypedMap' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:IMap;*;*' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedMap</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to wrap.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by this map.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by this map.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections.maps:TypedMap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.clear</code>.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections.maps:TypedMap/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedMap</code> object with the clone of the <code>wrappedMap</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedMap</code> object with the clone of the <code>wrappedMap</code> object.

 		 ]]></return>
</method>
<method name='containsKey' fullname='org.as3collections.maps:TypedMap/containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.containsKey</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.containsKey</code>.

		 ]]></return>
</method>
<method name='containsValue' fullname='org.as3collections.maps:TypedMap/containsValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.containsValue</code>.

		 

		 ]]></description>
<param><![CDATA[value

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.containsValue</code>.

		 ]]></return>
</method>
<method name='entryCollection' fullname='org.as3collections.maps:TypedMap/entryCollection' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.entryCollection</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.maps:TypedMap/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>MapUtil.equalNotConsideringOrder</code> or <code>MapUtil.equalConsideringOrder</code> method to perform equality, sending this map and <code>other</code> argument.

		 <p>If <code>wrappedMap</code> is of type <code>AbstractListMap</code> then <code>MapUtil.equalConsideringOrder</code> method is used.

		 Otherwise <code>MapUtil.equalNotConsideringOrder</code> method is used.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.MapUtil#equalConsideringOrder() MapUtil.equalConsideringOrder()

		 ]]></see>
<see><![CDATA[org.as3collections.utils.MapUtil#equalNotConsideringOrder() MapUtil.equalNotConsideringOrder()

		 ]]></see>
</method>
<method name='getInvalidKeyError' fullname='org.as3collections.maps:TypedMap/private:getInvalidKeyError' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getInvalidValueError' fullname='org.as3collections.maps:TypedMap/private:getInvalidValueError' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getKeys' fullname='org.as3collections.maps:TypedMap/getKeys' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.getKeys</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='getValue' fullname='org.as3collections.maps:TypedMap/getValue' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.getValue</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
</method>
<method name='getValues' fullname='org.as3collections.maps:TypedMap/getValues' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.getValues</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='isEmpty' fullname='org.as3collections.maps:TypedMap/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.isEmpty</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='isValidKey' fullname='org.as3collections.maps:TypedMap/protected:isValidKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isValidValue' fullname='org.as3collections.maps:TypedMap/protected:isValidValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='iterator' fullname='org.as3collections.maps:TypedMap/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.iterator</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='putAllByObject' fullname='org.as3collections.maps:TypedMap/putAllByObject' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 The objects is validated to be forwarded to <code>wrappedMap.putAllByObject</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
</method>
<method name='putAll' fullname='org.as3collections.maps:TypedMap/putAll' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 The map is validated with the <code>validateMap</code> method to be forwarded to <code>wrappedMap.putAll</code>.

		 

		 ]]></description>
<param><![CDATA[map

		 ]]></param>
</method>
<method name='putEntry' fullname='org.as3collections.maps:TypedMap/putEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 The entry is validated with the <code>validateKeyType</code> and <code>validateValueType</code> methods to be forwarded to <code>wrappedMap.putEntry</code>.

		 

		 ]]></description>
<param><![CDATA[entry

		 ]]></param>
</method>
<method name='put' fullname='org.as3collections.maps:TypedMap/put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 The key and value are validated with the <code>validateKeyType</code> and <code>validateValueType</code> methods to be forwarded to <code>wrappedMap.put</code>.

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.put</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections.maps:TypedMap/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.removeAll</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections.maps:TypedMap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.remove</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
</method>
<method name='retainAll' fullname='org.as3collections.maps:TypedMap/retainAll' isStatic='false' isFinal='false' isOverride='false'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.retainAll</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='size' fullname='org.as3collections.maps:TypedMap/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.size</code>.

		 

		 ]]></description>
<return><![CDATA[
 		 ]]></return>
</method>
<method name='toString' fullname='org.as3collections.maps:TypedMap/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the string representation of this instance.

		 

		 ]]></description>
<return><![CDATA[the string representation of this instance.

 		 ]]></return>
</method>
<method name='validateKey' fullname='org.as3collections.maps:TypedMap/protected:validateKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateMap' fullname='org.as3collections.maps:TypedMap/protected:validateMap' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateValue' fullname='org.as3collections.maps:TypedMap/protected:validateValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allKeysEquatable' fullname='org.as3collections.maps:TypedMap/allKeysEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all keys in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='allValuesEquatable' fullname='org.as3collections.maps:TypedMap/allValuesEquatable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 

		 Indicates whether all values in this map implements <code>org.as3coreaddendum.system.IEquatable</code> interface.

		 ]]></description>
</method>
<method name='typeKeys' fullname='org.as3collections.maps:TypedMap/typeKeys/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Defines the acceptable type of the keys by this map.

		 ]]></description>
</method>
<method name='typeValues' fullname='org.as3collections.maps:TypedMap/typeValues/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Defines the acceptable type of the values by this map.

		 ]]></description>
</method>
<method name='wrappedMap' fullname='org.as3collections.maps:TypedMap/protected:wrappedMap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IMap'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_typeKeys' fullname='org.as3collections.maps:TypedMap/private:_typeKeys' type='' isStatic='false' isConst='false' >
</field>
<field name='_typeValues' fullname='org.as3collections.maps:TypedMap/private:_typeValues' type='' isStatic='false' isConst='false' >
</field>
<field name='_wrappedMap' fullname='org.as3collections.maps:TypedMap/private:_wrappedMap' type='org.as3collections:IMap' isStatic='false' isConst='false' >
</field>
<classRec name='TypedListMap' fullname='org.as3collections.maps:TypedListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\TypedListMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections.maps:TypedMap' interfaces='org.as3collections:IListMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedSortedMap</code> works as a wrapper for a map.

	 It stores the <code>wrapMap</code> constructor's argument in the <code>wrappedMap</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedMap</code> object.

	 The methods that need to be checked for the type of the keys and values are previously validated with the <code>validateKeyType</code>, <code>validateValueType</code> or <code>validateMap</code> method before forward the call.

	 If the type of a key or value requested to be inserted to this map is incompatible with the type of the map a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedMap</code> returns the return of the <code>wrappedMap</code> call.

	 <p><code>TypedSortedMap</code> does not allow <code>null</code> keys or values.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedMap;

	 import org.as3collections.maps.SortedArrayListMap;

	 import org.as3collections.maps.TypedSortedMap;

	 

	 var map1:ISortedMap = new SortedArrayListMap();

	 

	 map1.put("e", 1)            // null

	 map1.put("d", 2)            // null

	 map1.put("c", 3)            // null

	 map1.put("b", 4)            // null

	 map1.put("a", 5)            // null

	 

	 map1                        // {a=5,b=4,c=3,d=2,e=1}

	 map1.size()                 // 5

	 

	 var map2:ISortedMap = new TypedSortedMap(map1, String, Number); // you can use this way

	 

	 //var map2:ISortedMap = MapUtil.getTypedSortedMap(map1, String, Number); // or you can use this way

	 

	 map2                        // {a=5,b=4,c=3,d=2,e=1}

	 map2.size()                 // 5

	 

	 map2.equals(map1)           // false

	 

	 map2.put("f", 6)            // null

	 map2                        // {a=5,b=4,c=3,d=2,e=1,f=6}

	 map2.size()                 // 6

	 

	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number

	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedSortedMap() MapUtil.getTypedSortedMap()

	 ]]></see>
</classRec>
<method name='TypedListMap' fullname='org.as3collections.maps:TypedListMap/TypedListMap' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:IListMap;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedSortedMap</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to wrap.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by this map.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by this map.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.maps:TypedListMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedListMap</code> object with the clone of the <code>wrappedMap</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedListMap</code> object with the clone of the <code>wrappedMap</code> object.

 		 ]]></return>
</method>
<method name='getKeyAt' fullname='org.as3collections.maps:TypedListMap/getKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.getKeyAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='getValueAt' fullname='org.as3collections.maps:TypedListMap/getValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.getValueAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='headMap' fullname='org.as3collections.maps:TypedListMap/headMap' isStatic='false' isFinal='false' isOverride='false'  param_names='toKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.headMap</code>.

		 

		 ]]></description>
<param><![CDATA[toKey

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='indexOfKey' fullname='org.as3collections.maps:TypedListMap/indexOfKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.indexOfKey</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='indexOfValue' fullname='org.as3collections.maps:TypedListMap/indexOfValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.indexOfValue</code>.

		 

		 ]]></description>
<param><![CDATA[value

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='listMapIterator' fullname='org.as3collections.maps:TypedListMap/listMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListMapIterator'>
<description><![CDATA[

		 Returns a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 The specified index indicates the first value that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the value with the specified index minus one.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first value to be returned from the iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 ]]></return>
</method>
<method name='putAllAt' fullname='org.as3collections.maps:TypedListMap/putAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;map' param_types='int;org.as3collections:IMap' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 The map is validated to be forwarded to <code>wrappedMap.putAllAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[map

		 ]]></param>
</method>
<method name='putAt' fullname='org.as3collections.maps:TypedListMap/putAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key;value' param_types='int;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 The key and value are validated to be forwarded to <code>wrappedMap.putAt</code>.

		 

		 ]]></description>
<param><![CDATA[index 	index at which the specified mapping is to be inserted.

		 ]]></param>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.put</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
</method>
<method name='removeAt' fullname='org.as3collections.maps:TypedListMap/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='org.as3collections:IMapEntry'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.removeAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
</method>
<method name='removeRange' fullname='org.as3collections.maps:TypedListMap/removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.removeRange</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.removeRange</code>.

		 ]]></return>
</method>
<method name='reverse' fullname='org.as3collections.maps:TypedListMap/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.reverse</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
</method>
<method name='setKeyAt' fullname='org.as3collections.maps:TypedListMap/setKeyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;key' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 The key is validated to be forwarded to <code>wrappedMap.setKeyAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[key 	the key to forward to <code>wrappedMap.setKeyAt</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.setKeyAt</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
</method>
<method name='setValueAt' fullname='org.as3collections.maps:TypedListMap/setValueAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;value' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 The value is validated to be forwarded to <code>wrappedMap.setValueAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[key 	the key to forward to <code>wrappedMap.setValueAt</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedMap.setValueAt</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the specified key or value is incompatible with this map.

		 ]]></throws>
</method>
<method name='subMap' fullname='org.as3collections.maps:TypedListMap/subMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.subMap</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='tailMap' fullname='org.as3collections.maps:TypedListMap/tailMap' isStatic='false' isFinal='false' isOverride='false'  param_names='fromKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.tailMap</code>.

		 

		 ]]></description>
<param><![CDATA[fromKey

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='modCount' fullname='org.as3collections.maps:TypedListMap/modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the return of the call <code>wrapMap.modCount</code>.

		 ]]></description>
</method>
<method name='wrappedListMap' fullname='org.as3collections.maps:TypedListMap/protected:wrappedListMap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='HashMap' fullname='org.as3collections.maps:HashMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\HashMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections:AbstractHashMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 Hash table based implementation of the <code>IMap</code> interface.

	 This implementation provides all of the optional map operations, and permits <code>null</code> values and the <code>null</code> key.

	 <p>This class makes no guarantees as to the order of the map.

	 In particular, it does not guarantee that the order will remain constant over time.</p>

	 <p>It's possible to create typed maps.

	 You just sends the <code>HashMap</code> object to the wrapper <code>TypedMap</code> or uses the <code>MapUtil.getTypedMap</code>.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IMap;

	 import org.as3collections.IList;

	 import org.as3collections.maps.HashMap;

	 import org.as3collections.maps.MapEntry;

	 

	 var map1:IMap = new HashMap();

	 var tf1:TextField = new TextField();

	 var tf2:TextField = new TextField();

	 

	 map1                            // {}

	 map1.containsKey("a")           // false

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // false

	 map1.containsValue(tf1)         // false

	 map1.isEmpty()                  // true

	 map1.size()                     // 0

	 

	 map1.put("a", 1)                // null

	 map1                            // {a=1}

	 map1.isEmpty()                  // false

	 map1.size()                     // 1

	 map1.containsKey("a")           // true

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // false

	 map1.containsValue(tf1)         // false

	 

	 map1.put("b", 2)                // null

	 map1                            // {b=2,a=1}

	 map1.isEmpty()                  // false

	 map1.size()                     // 2

	 map1.containsKey("a")           // true

	 map1.containsKey("b")           // true

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // true

	 

	 map1.put("c", 3)                // null

	 map1                            // {b=2,a=1,c=3}

	 map1.size()                     // 3

	 

	 map1.put("tf1", tf1)            // null

	 map1                            // {b=2,a=1,c=3,tf1=[object TextField]}

	 map1.size()                     // 4

	 map1.containsValue(tf1)         // true

	 

	 map1.put(tf2, "tf2")            // null

	 map1                            // {b=2,[object TextField]=tf2,a=1,c=3,tf1=[object TextField]}

	 map1.size()                     // 5

	 map1.containsKey(tf2)           // true

	 

	 map1.put("a", 1.1)              // 1

	 map1                            // {b=2,[object TextField]=tf2,a=1.1,c=3,tf1=[object TextField]}

	 map1.size()                     // 5

	 

	 map1.put("tf1", String)         // [object TextField]

	 map1                            // {b=2,[object TextField]=tf2,a=1.1,c=3,tf1=[class String]}

	 map1.size()                     // 5

	 

	 map1.put(tf2, "tf2.1")          // tf2

	 map1                            // {b=2,[object TextField]=tf2.1,a=1.1,c=3,tf1=[class String]}

	 map1.size()                     // 5

	 

	 map1.put(Number, 999)           // null

	 map1                            // {b=2,[object TextField]=tf2.1,[class Number]=999,a=1.1,c=3,tf1=[class String]}

	 map1.size(): 6

	 

	 map1.getValue("b")              // 2

	 

	 map1.getValue(tf2)              // tf2.1

	 

	 map1.putAllByObject({fa:"fb",ga:"gb",ha:"hb"});

	 

	 map1                            // {b=2,[object TextField]=tf2.1,fa=fb,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String],ga=gb}

	 

	 map1.size()                     // 9

	 

	 map1.getValue("fa")             // fb

	 

	 map1.remove("ga")               // gb

	 map1                            // {b=2,[object TextField]=tf2.1,fa=fb,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}

	 map1.size()                     // 8

	 

	 map1.remove("fa")               // fb

	 map1                            // {b=2,[object TextField]=tf2.1,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}

	 map1.size()                     // 7

	 

	 map1.remove(tf2)                // tf2.1

	 map1                            // {b=2,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}

	 map1.size()                     // 6

	 

	 map1.getValue("fa")             // null

	 map1.getValue(tf2)              // null

	 

	 var map2:IMap = map1.clone();

	 

	 map2                            // {b=2,a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}

	 map2.size()                     // 6

	 map2.isEmpty()                  // false

	 

	 map1.equals(map2)               // true

	 map2.equals(map1)               // true

	 map2.equals(map2)               // true

	 

	 map2.remove("b")                // 2

	 map2                            // {a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}

	 map2.equals(map2)               // true

	 map2.size()                     // 5

	 

	 map1.equals(map2)               // false

	 map2.equals(map1)               // false

	 

	 map2.getValues()                // [1.1,999,3,[class String],hb]

	 

	 var keysMap2:IList = map2.getKeys();

	 

	 keysMap2                        // [a,[class Number],c,tf1,ha]

	 

	 keysMap2.remove("c")            // true

	 keysMap2                        // [a,[class Number],tf1,ha]

	 map2                            // {a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}

	 map2.size()                     // 5

	 

	 map2.removeAll(keysMap2)        // true

	 map2                            // {c=3}

	 map2.size()                     // 1

	 map2.isEmpty()                  // false

	 

	 map2.clear();

	 

	 map2                            // {}

	 map2.size()                     // 0

	 map2.isEmpty()                  // true

	 

	 var entry:IMapEntry = new MapEntry("c", 3);

	 

	 entry                           // c=3

	 map2.putEntry(entry)            // null

	 map2                            // {c=3}

	 map2.size()                     // 1

	 

	 map1                            // {b=2,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}

	 map1.retainAll(map2)            // true

	 map1                            // {c=3}

	 map1.size()                     // 1

	 map1.isEmpty()                  // false

	 

	 map1.put("d", 4)                // null

	 map1.put("e", 5)                // null

	 map1.put("f", 6)                // null

	 

	 map1                            // {c=3,d=4,f=6,e=5}

	 map1.size()                     // 4

	 

	 var it:IIterator = map1.iterator();

	 

	 var e:&#42;;

	 

	 while (it.hasNext())

	 {

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // c=3

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // d=4

	 

	     if (e == 4)

	     {

	         it.remove();

	     }

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // f=6

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // e=5

	 }

	 

	 map1                            // {c=3,f=6,e=5}

	 map1.size()                     // 3

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedMap() MapUtil.getTypedMap()

	 ]]></see>
</classRec>
<method name='HashMap' fullname='org.as3collections.maps:HashMap/HashMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source;weakKeys' param_types='org.as3collections:IMap;Boolean' param_defaults='null;false' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>HashMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		a map with wich fill this map.

		 ]]></param>
<param><![CDATA[weakKeys 	instructs the backed <code>Dictionary</code> object to use "weak" references on object keys. If the only reference to an object is in the specified <code>Dictionary</code> object, the key is eligible for garbage collection and is removed from the table when the object is collected.

		 ]]></param>
</method>
<method name='clear' fullname='org.as3collections.maps:HashMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 Removes all of the mappings from this map.

		 The map will be empty after this call returns.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections.maps:HashMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>HashMap</code> object containing all mappings in this map.

		 

		 ]]></description>
<return><![CDATA[a new <code>HashMap</code> object containing all mappings in this map.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections.maps:HashMap/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation returns a <code>MapIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.MapIterator MapIterator

 		 ]]></see>
</method>
<method name='put' fullname='org.as3collections.maps:HashMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map.

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, because this implementation supports <code>null</code> values.)

		 ]]></return>
</method>
<method name='removeByEquality' fullname='org.as3collections.maps:HashMap/private:removeByEquality' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeByInstance' fullname='org.as3collections.maps:HashMap/private:removeByInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='remove' fullname='org.as3collections.maps:HashMap/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the mapping for a key from this map if it is present.

		 <p>Returns the value to which this map previously associated the key, or <code>null</code> if the map contained no mapping for the key.

		 A return value of <code>null</code> does not <em>necessarily</em> indicate that the map contained no mapping for the key.

		 It's possible that the map explicitly mapped the key to <code>null</code>.</p>

		 <p>The map will not contain a mapping for the specified key once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose mapping is to be removed from the map.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for <code>key</code>.

		 ]]></return>
</method>
<method name='valueRemoved' fullname='org.as3collections.maps:HashMap/protected:valueRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='ReadOnlyHashMap' fullname='org.as3collections.maps:ReadOnlyHashMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\ReadOnlyHashMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections:AbstractHashMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A <code>HashMap</code> that doesn't allow modifications.

	 It receives all the mappings by its constructor and can no longer be changed.

	 All methods that change the map will throw an <code>UnsupportedOperationError</code>.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IMap;

	 import org.as3collections.maps.HashMap;

	 import org.as3collections.maps.ReadOnlyHashMap;

	 

	 var obj:Object = {fa:"fb",ga:"gb",ha:"hb"}

	 

	 var map1:IMap = new HashMap();

	 

	 map1.putAllByObject(obj);

	 

	 map1                  // {ha=hb,ga=gb,fa=fb}

	 map1.size()           // 3

	 

	 var map2:IMap = new ReadOnlyHashMap(map1);

	 

	 map2                  // {ha=hb,ga=gb,fa=fb}

	 map2.size()           // 3

	 

	 map2.put(1, 2)        // UnsupportedOperationError: ReadOnlyHashMap is a read-only map and doesn't allow modifications.

	 

	 map2.remove(1)        // UnsupportedOperationError: ReadOnlyHashMap is a read-only map and doesn't allow modifications.

	 </listing>

	 

	 ]]></example>
</classRec>
<method name='ReadOnlyHashMap' fullname='org.as3collections.maps:ReadOnlyHashMap/ReadOnlyHashMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ReadOnlyHashMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an map to fill the list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections.maps:ReadOnlyHashMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.maps:ReadOnlyHashMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>ReadOnlyHashMap</code> object containing all mappings in this map.

		 

		 ]]></description>
<return><![CDATA[a new <code>ReadOnlyHashMap</code> object containing all mappings in this map.

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections.maps:ReadOnlyHashMap/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation returns a <code>ReadOnlyMapIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ReadOnlyMapIterator ReadOnlyMapIterator

		 ]]></see>
</method>
<method name='putAllByObject' fullname='org.as3collections.maps:ReadOnlyHashMap/putAllByObject' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='putAll' fullname='org.as3collections.maps:ReadOnlyHashMap/putAll' isStatic='false' isFinal='false' isOverride='true'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[map

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='putEntry' fullname='org.as3collections.maps:ReadOnlyHashMap/putEntry' isStatic='false' isFinal='false' isOverride='true'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[entry

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections.maps:ReadOnlyHashMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<param><![CDATA[value

		 ]]></param>
<return><![CDATA[

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections.maps:ReadOnlyHashMap/removeAll' isStatic='false' isFinal='false' isOverride='true'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.maps:ReadOnlyHashMap/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections.maps:ReadOnlyHashMap/retainAll' isStatic='false' isFinal='false' isOverride='true'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyHashMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<classRec name='ReadOnlyArrayListMap' fullname='org.as3collections.maps:ReadOnlyArrayListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\ReadOnlyArrayListMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections:AbstractListMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 An <code>ArrayListMap</code> that doesn't allow modifications.

	 It receives all the mappings by its constructor and can no longer be changed.

	 All methods that change the map will throw an <code>UnsupportedOperationError</code>.

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IMap;

	 import org.as3collections.maps.ArrayListMap;

	 import org.as3collections.maps.ReadOnlyArrayListMap;

	 

	 var map1:IMap = new ArrayListMap();

	 

	 map1.put("fa", "fb"):     // null

	 map1.put("ga", "gb"):     // null

	 map1.put("ha", "hb"):     // null

	 

	 map1                      // {fa=fb,ga=gb,ha=hb}

	 map1.size()               // 3

	 

	 var map2:IMap = new ReadOnlyArrayListMap(map1);

	 

	 map2                      // {fa=fb,ga=gb,ha=hb}

	 map2.size()               // 3

	 

	 map2.put(1, 2)            // UnsupportedOperationError: ReadOnlyArrayListMap is a read-only map and doesn't allow modifications.

	 

	 map2.remove(1)            // UnsupportedOperationError: ReadOnlyArrayListMap is a read-only map and doesn't allow modifications.

	 </listing>

	 

	 ]]></example>
</classRec>
<method name='ReadOnlyArrayListMap' fullname='org.as3collections.maps:ReadOnlyArrayListMap/ReadOnlyArrayListMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ReadOnlyArrayListMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an map to fill the list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections.maps:ReadOnlyArrayListMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.maps:ReadOnlyArrayListMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>ReadOnlyArrayListMap</code> object containing all mappings in this map (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>ReadOnlyArrayListMap</code> object containing all mappings in this map (in the same order).

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections.maps:ReadOnlyArrayListMap/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation returns a <code>ReadOnlyMapIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ReadOnlyMapIterator ReadOnlyMapIterator

		 ]]></see>
</method>
<method name='putAllByObject' fullname='org.as3collections.maps:ReadOnlyArrayListMap/putAllByObject' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='putAll' fullname='org.as3collections.maps:ReadOnlyArrayListMap/putAll' isStatic='false' isFinal='false' isOverride='true'  param_names='map' param_types='org.as3collections:IMap' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[map

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='putEntry' fullname='org.as3collections.maps:ReadOnlyArrayListMap/putEntry' isStatic='false' isFinal='false' isOverride='true'  param_names='entry' param_types='org.as3collections:IMapEntry' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[entry

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections.maps:ReadOnlyArrayListMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<param><![CDATA[value

		 ]]></param>
<return><![CDATA[

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='removeAll' fullname='org.as3collections.maps:ReadOnlyArrayListMap/removeAll' isStatic='false' isFinal='false' isOverride='true'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.maps:ReadOnlyArrayListMap/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[key

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections.maps:ReadOnlyArrayListMap/retainAll' isStatic='false' isFinal='false' isOverride='true'  param_names='keys' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[keys

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayListMap</code> is a read-only map and doesn't allow modifications.

		 ]]></throws>
</method>
<classRec name='ArrayListMap' fullname='org.as3collections.maps:ArrayListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\ArrayListMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections:AbstractListMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 Array based implementation of the <code>IMap</code> interface.

	 This implementation provides all of the optional map operations, and permits <code>null</code> values and the <code>null</code> key.

	 <p>This class makes guarantees as to the order of the map.

	 The order in which elements are stored is the order in which they were inserted.</p>

	 <p>This class has great similarity to <code>ArrayList</code> class.

	 In a way this class can be thought of as an <code>ArrayList</code> of mappings.</p>

	 <p>It's possible to create typed list maps.

	 You just sends the <code>ArrayListMap</code> object to the wrapper <code>TypedListMap</code> or uses the <code>MapUtil.getTypedListMap</code>.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IMap;

	 import org.as3collections.IList;

	 import org.as3collections.maps.ArrayListMap;

	 import org.as3collections.maps.MapEntry;

	 

	 var map1:IMap = new ArrayListMap();

	 var tf1:TextField = new TextField();

	 var tf2:TextField = new TextField();

	 

	 map1                            // {}

	 map1.containsKey("a")           // false

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // false

	 map1.containsValue(tf1)         // false

	 map1.isEmpty()                  // true

	 map1.size()                     // 0

	 

	 map1.put("a", 1)                // null

	 map1                            // {a=1}

	 map1.isEmpty()                  // false

	 map1.size()                     // 1

	 map1.containsKey("a")           // true

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // false

	 map1.containsValue(tf1)         // false

	 

	 map1.put("b", 2)                // null

	 map1                            // {a=1,b=2}

	 map1.isEmpty()                  // false

	 map1.size()                     // 2

	 map1.containsKey("a")           // true

	 map1.containsKey("b")           // true

	 map1.containsKey(tf2)           // false

	 map1.containsValue(2)           // true

	 

	 map1.put("c", 3)                // null

	 map1                            // {a=1,b=2,c=3}

	 map1.size()                     // 3

	 

	 map1.put("tf1", tf1)            // null

	 map1                            // {a=1,b=2,c=3,tf1=[object TextField]}

	 map1.size()                     // 4

	 map1.containsValue(tf1)         // true

	 

	 map1.put(tf2, "tf2")            // null

	 map1                            // {a=1,b=2,c=3,tf1=[object TextField],[object TextField]=tf2}

	 map1.size()                     // 5

	 map1.containsKey(tf2)           // true

	 

	 map1.put("a", 1.1)              // 1

	 map1                            // {a=1.1,b=2,c=3,tf1=[object TextField],[object TextField]=tf2}

	 map1.size()                     // 5

	 

	 map1.put("tf1", String)         // [object TextField]

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2}

	 map1.size()                     // 5

	 

	 map1.put(tf2, "tf2.1")          // tf2

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1}

	 map1.size()                     // 5

	 

	 map1.put(Number, 999)           // null

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999}

	 map1.size()                     // 6

	 

	 map1.getValue("b")              // 2

	 

	 map1.getValue(tf2)              // tf2.1

	 

	 map1.putAllByObject({fa:"fb",ga:"gb",ha:"hb"});

	 

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb,ga=gb,fa=fb}

	 

	 map1.size()                     // 9

	 

	 map1.getValue("fa")             // fb

	 

	 map1.remove("ga")               // gb

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb,fa=fb}

	 map1.size()                     // 8

	 

	 map1.remove("fa")               // fb

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb}

	 map1.size()                     // 7

	 

	 map1.remove(tf2)                // tf2.1

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}

	 map1.size()                     // 6

	 

	 map1.getValue("fa")             // null

	 map1.getValue(tf2)              // null

	 

	 var map2:IMap = map1.clone();

	 

	 map2                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}

	 map2.size()                     // 6

	 map2.isEmpty()                  // false

	 

	 map1.equals(map2)               // true

	 map2.equals(map1)               // true

	 map2.equals(map2)               // true

	 

	 map2.remove("b")                // 2

	 map2                            // {a=1.1,c=3,tf1=[class String],[class Number]=999,ha=hb}

	 map2.equals(map2)               // true

	 map2.size()                     // 5

	 

	 map1.equals(map2)               // false

	 map2.equals(map1)               // false

	 

	 map2.getValues()                // [1.1,3,[class String],999,hb]

	 

	 var keysMap2:IList = map2.getKeys();

	 

	 keysMap2                        // [a,c,tf1,[class Number],ha]

	 

	 keysMap2.remove("c")            // true

	 keysMap2                        // [a,tf1,[class Number],ha]

	 map2                            // {a=1.1,c=3,tf1=[class String],[class Number]=999,ha=hb}

	 map2.size()                     // 5

	 

	 map2.removeAll(keysMap2)        // true

	 map2                            // {c=3}

	 map2.size()                     // 1

	 map2.isEmpty()                  // false

	 

	 map2.clear();

	 

	 map2                            // {}

	 map2.size()                     // 0

	 map2.isEmpty()                  // true

	 

	 var entry:IMapEntry = new MapEntry("c", 3);

	 

	 entry                           // c=3

	 map2.putEntry(entry)            // null

	 map2                            // {c=3}

	 map2.size()                     // 1

	 

	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}

	 map1.retainAll(map2)            // true

	 map1                            // {c=3}

	 map1.size()                     // 1

	 map1.isEmpty()                  // false

	 

	 map1.put("d", 4)                // null

	 map1.put("e", 5)                // null

	 map1.put("f", 6)                // null

	 map1                            // {c=3,d=4,e=5,f=6}

	 map1.size()                     // 4

	 

	 var it:IIterator = map1.iterator();

	 

	 var e:&#42;;

	 

	 while (it.hasNext())

	 {

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // c=3

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // d=4

	 

	     if (e == 4)

	     {

	         it.remove();

	     }

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // e=5

	 

	     e = it.next();

	     trace(it.pointer() + "=" + e)    // f=6

	 }

	 

	 map1                            // {c=3,e=5,f=6}

	 map1.size()                     // 3

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.AbstractListMap AbstractListMap

	 ]]></see>
<see><![CDATA[org.as3collections.maps.TypedListMap TypedListMap

	 ]]></see>
<see><![CDATA[org.as3collections.maps.SortedArrayListMap SortedArrayListMap

	 ]]></see>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedListMap() MapUtil.getTypedListMap()

	 ]]></see>
</classRec>
<method name='ArrayListMap' fullname='org.as3collections.maps:ArrayListMap/ArrayListMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='org.as3collections:IMap' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ArrayListMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		a map with wich fill this map.

		 ]]></param>
</method>
<method name='clear' fullname='org.as3collections.maps:ArrayListMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 Removes all of the mappings from this map.

		 The map will be empty after this call returns.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections.maps:ArrayListMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>ArrayListMap</code> object containing all mappings in this map (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>ArrayListMap</code> object containing all mappings in this map.

 		 ]]></return>
</method>
<method name='createEmptyMap' fullname='org.as3collections.maps:ArrayListMap/protected:createEmptyMap' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='iterator' fullname='org.as3collections.maps:ArrayListMap/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of mappings.

		 <p>This implementation returns a <code>MapIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of values.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.MapIterator MapIterator

 		 ]]></see>
</method>
<method name='listMapIterator' fullname='org.as3collections.maps:ArrayListMap/listMapIterator' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListMapIterator'>
<description><![CDATA[

		 Returns a <code>IListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 <p>This implementation returns a <code>ListMapIterator</code> object.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first value to be returned from the iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a <code>ListMapIterator</code> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.

		 ]]></return>
</method>
<method name='putAt' fullname='org.as3collections.maps:ArrayListMap/putAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;key;value' param_types='int;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Associates the specified value with the specified key at the specified position in this map.

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).

		 

		 ]]></description>
<param><![CDATA[index 	index at which the specified entry is to be inserted.

		 ]]></param>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='put' fullname='org.as3collections.maps:ArrayListMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Associates the specified value with the specified key in this map.

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value, and the order of the key is not affected.

		 (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, because this implementation supports <code>null</code> values.)

		 ]]></return>
</method>
<method name='removeAt' fullname='org.as3collections.maps:ArrayListMap/removeAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='org.as3collections:IMapEntry'>
<description><![CDATA[

		 Removes the mapping at the specified position in this map (optional operation).

		 Shifts any subsequent mappings to the left (subtracts one from their indices).

		 Returns an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map.

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p> 

		 

		 ]]></description>
<param><![CDATA[index 	the index of the mapping to be removed.

		 ]]></param>
<return><![CDATA[an <code>IMapEntry</code> object containing the mapping (key/value) that was removed from the map.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections.maps:ArrayListMap/removeRange' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Removes all of the mappings whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (optional operation).

		 Shifts any subsequent mappings to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new map containing all the removed mappings.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>removeRange</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.maps:ArrayListMap/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the mapping for a key from this map if it is present.

		 <p>Returns the value to which this map previously associated the key, or <code>null</code> if the map contained no mapping for the key.

		 A return value of <code>null</code> does not <em>necessarily</em> indicate that the map contained no mapping for the key.

		 It's possible that the map explicitly mapped the key to <code>null</code>.</p>

		 <p>The map will not contain a mapping for the specified key once the call returns.</p>

		 

		 ]]></description>
<param><![CDATA[key 	the key whose mapping is to be removed from the map.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for <code>key</code>.

		 ]]></return>
</method>
<method name='setKeyAt' fullname='org.as3collections.maps:ArrayListMap/setKeyAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;key' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the key at the specified position in this map with the specified key (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to replace.

		 ]]></param>
<param><![CDATA[key 	key to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the key previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setKeyAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified key prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified key is <code>null</code> and this map does not permit <code>null</code> keys.

		 ]]></throws>
<throws><![CDATA[ArgumentError  											if this map already contains the specified key.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='setValueAt' fullname='org.as3collections.maps:ArrayListMap/setValueAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;value' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the value at the specified position in this map with the specified value (optional operation).

		 <p>This implementation always throws an <code>UnsupportedOperationError</code>.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to replace.

		 ]]></param>
<param><![CDATA[value 	value to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the value previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>setValueAt</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  				if the class of the specified value prevents it from being added to this map.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	 										if the specified value is <code>null</code> and this map does not permit <code>null</code> values.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='subMap' fullname='org.as3collections.maps:ArrayListMap/subMap' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Returns a new map that is a view of the portion of this map between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>The returned map supports all of the optional map operations supported by this map.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new list that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subMap</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<classRec name='TypedSortedMap' fullname='org.as3collections.maps:TypedSortedMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\TypedSortedMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections.maps:TypedListMap' interfaces='org.as3collections:ISortedMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedSortedMap</code> works as a wrapper for a map.

	 It stores the <code>wrapMap</code> constructor's argument in the <code>wrappedMap</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedMap</code> object.

	 The methods that need to be checked for the type of the keys and values are previously validated with the <code>validateKeyType</code>, <code>validateValueType</code> or <code>validateMap</code> method before forward the call.

	 If the type of a key or value requested to be inserted to this map is incompatible with the type of the map a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedMap</code> returns the return of the <code>wrappedMap</code> call.

	 <p><code>TypedSortedMap</code> does not allow <code>null</code> keys or values.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedMap;

	 import org.as3collections.maps.SortedArrayListMap;

	 import org.as3collections.maps.TypedSortedMap;

	 

	 var map1:ISortedMap = new SortedArrayListMap();

	 

	 map1.put("e", 1)            // null

	 map1.put("d", 2)            // null

	 map1.put("c", 3)            // null

	 map1.put("b", 4)            // null

	 map1.put("a", 5)            // null

	 

	 map1                        // {a=5,b=4,c=3,d=2,e=1}

	 map1.size()                 // 5

	 

	 var map2:ISortedMap = new TypedSortedMap(map1, String, Number); // you can use this way

	 

	 //var map2:ISortedMap = MapUtil.getTypedSortedMap(map1, String, Number); // or you can use this way

	 

	 map2                        // {a=5,b=4,c=3,d=2,e=1}

	 map2.size()                 // 5

	 

	 map2.equals(map1)           // false

	 

	 map2.put("f", 6)            // null

	 map2                        // {a=5,b=4,c=3,d=2,e=1,f=6}

	 map2.size()                 // 6

	 

	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number

	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedSortedMap() MapUtil.getTypedSortedMap()

	 ]]></see>
</classRec>
<method name='TypedSortedMap' fullname='org.as3collections.maps:TypedSortedMap/TypedSortedMap' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapMap;typeKeys;typeValues' param_types='org.as3collections:ISortedMap;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedSortedMap</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapMap 	the target map to wrap.

		 ]]></param>
<param><![CDATA[typeKeys	the type of the keys allowed by this map.

		 ]]></param>
<param><![CDATA[typeValues	the type of the values allowed by this map.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapMap</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeKeys</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>typeValues</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more keys or values in the <code>wrapMap</code> argument are incompatible with the <code>typeKeys</code> or <code>typeValues</code> argument.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.maps:TypedSortedMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedSortedMap</code> object with the clone of the <code>wrappedMap</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedSortedMap</code> object with the clone of the <code>wrappedMap</code> object.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.maps:TypedSortedMap/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all mappings of object B</li>

		 <li>object B contains all mappings of object A</li>

		 <li>mappings have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 <li>object A and object B has the same sortBy</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the mappings in the map.

		 So, for two maps are equal the order of mappings returned by the iterator must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='headMap' fullname='org.as3collections.maps:TypedSortedMap/headMap' isStatic='false' isFinal='false' isOverride='true'  param_names='toKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.headMap</code>.

		 

		 ]]></description>
<param><![CDATA[toKey

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='sortOn' fullname='org.as3collections.maps:TypedSortedMap/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.sortOn</code>.

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='sort' fullname='org.as3collections.maps:TypedSortedMap/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.sort</code>.

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='subMap' fullname='org.as3collections.maps:TypedSortedMap/subMap' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.subMap</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='tailMap' fullname='org.as3collections.maps:TypedSortedMap/tailMap' isStatic='false' isFinal='false' isOverride='true'  param_names='fromKey' param_types='*' param_defaults='undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 Forwards the call to <code>wrappedMap.tailMap</code>.

		 

		 ]]></description>
<param><![CDATA[fromKey

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3collections.maps:TypedSortedMap/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the <code>wrappedMap</code> comparator object to be used automatically to sort.

		 <p>If this value change the <code>wrappedMap</code> is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.maps:TypedSortedMap/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the <code>wrappedMap</code> options to be used automatically to sort.

		 <p>If this value change the map is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='sortBy' fullname='org.as3collections.maps:TypedSortedMap/sortBy/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:SortMapBy'>
<description><![CDATA[

		 Defines whether the <code>wrappedMap</code> should be sorted by its keys or values. The default is <code>SortMapBy.KEY</code>.

		 <p>If this value change the <code>wrappedMap</code> is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='wrappedSortedMap' fullname='org.as3collections.maps:TypedSortedMap/protected:wrappedSortedMap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ISortedMap'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.maps:TypedSortedMap/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.maps:TypedSortedMap/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<method name='sortBy' fullname='org.as3collections.maps:TypedSortedMap/sortBy/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3collections:SortMapBy' param_defaults='undefined' result_type='void'>
</method>
<classRec name='SortedArrayListMap' fullname='org.as3collections.maps:SortedArrayListMap' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\maps\SortedArrayListMap.as' namespace='org.as3collections.maps' access='public' baseclass='org.as3collections.maps:ArrayListMap' interfaces='org.as3collections:ISortedMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A map that provides a <em>total ordering</em> on its mappings.

	 The map is ordered according to the <em>natural ordering</em> of its keys or values, by a <em>IComparator</em> typically provided at sorted map creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.

	 <p>For each change that occurs the map is automatically ordered using the <code>comparator</code> and <code>options</code>.

	 If none was provided the default behavior of the <code>sort</code> method is used.</p>

	 The <code>sortBy</code> property defines whether the sorting will be made by <code>key</code> or <code>value</code>.

	 <p>The user of this map may change their order at any time by calling the <code>sort</code> or <code>sortOn</code> method and imposing others arguments to change the sort behaviour.</p>

	 <p>It's possible to create typed sorted maps.

	 You just sends the <code>SortedArrayListMap</code> object to the wrapper <code>TypedSortedMap</code> or uses the <code>MapUtil.getTypedSortedMap</code>.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedMap;

	 import org.as3collections.maps.SortedArrayListMap;

	 

	 var map1:ISortedMap = new SortedArrayListMap();

	 

	 map1.put("e", 1)            // null

	 map1.put("d", 2)            // null

	 map1.put("c", 3)            // null

	 map1.put("b", 4)            // null

	 map1.put("a", 5)            // null

	 

	 map1                        // {a=5,b=4,c=3,d=2,e=1}

	 

	 map1.firstKey()             // a

	 map1.lastKey()              // e

	 

	 map1.sortBy = SortMapBy.VALUE;

	 

	 map1                        // {e=1,d=2,c=3,b=4,a=5}

	 

	 map1.firstKey()             // e

	 map1.lastKey()              // a

	 

	 map1.sort(null, Array.NUMERIC);

	 

	 map1                        // {e=1,d=2,c=3,b=4,a=5}

	 

	 map1.sort(null, Array.NUMERIC | Array.DESCENDING);

	 

	 map1                        // {a=5,b=4,c=3,d=2,e=1}

	 

	 map1.sortBy = SortMapBy.KEY;

	 

	 map1                        // {a=5,b=4,c=3,d=2,e=1}

	 

	 map1.headMap("d")           // {a=5,b=4,c=3}

	 map1.tailMap("b")           // {b=4,c=3,d=2,e=1}

	 map1.subMap("b", "d")       // {b=4,c=3}

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.MapUtil#getTypedSortedMap() MapUtil.getTypedSortedMap()
	 ]]></see>
</classRec>
<method name='SortedArrayListMap' fullname='org.as3collections.maps:SortedArrayListMap/SortedArrayListMap' isStatic='false' isFinal='false' isOverride='false'  param_names='source;comparator;options' param_types='org.as3collections:IMap;org.as3coreaddendum.system:IComparator;uint' param_defaults='null;null;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>SortedArrayListMap</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		a map with wich fill this map.

		 ]]></param>
<param><![CDATA[comparator 	the comparator object to be used internally to sort.

		 ]]></param>
<param><![CDATA[options 	the options to be used internally to sort.

		 ]]></param>
</method>
<method name='_sort' fullname='org.as3collections.maps:SortedArrayListMap/protected:_sort' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clone' fullname='org.as3collections.maps:SortedArrayListMap/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>SortedArrayListMap</code> object containing all elements in this map (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>SortedArrayListMap</code> object containing all elements in this map (in the same order).

 		 ]]></return>
</method>
<method name='createEmptyMap' fullname='org.as3collections.maps:SortedArrayListMap/protected:createEmptyMap' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='equals' fullname='org.as3collections.maps:SortedArrayListMap/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all mappings of object B</li>

		 <li>object B contains all mappings of object A</li>

		 <li>mappings have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 <li>object A and object B has the same sortBy</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the mappings in the map.

		 So, for two maps are equal the order of mappings returned by the iterator must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='putAt' fullname='org.as3collections.maps:SortedArrayListMap/putAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;key;value' param_types='int;*;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 

		 Associates the specified value with the specified key at the specified position in this map (optional operation).

		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).

		 

		 ]]></description>
<param><![CDATA[index 	index at which the specified entry is to be inserted.

		 ]]></param>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
</method>
<method name='put' fullname='org.as3collections.maps:SortedArrayListMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 

		 Associates the specified value with the specified key in this map (optional operation).

		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if <code>m.containsKey(k)</code> would return <code>true</code>.) 

		 

		 ]]></description>
<param><![CDATA[key 	key with which the specified value is to be associated.

		 ]]></param>
<param><![CDATA[value 	value to be associated with the specified key.

		 ]]></param>
<return><![CDATA[the previous value associated with key, or <code>null</code> if there was no mapping for key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with key, if the implementation supports <code>null</code> values.)

		 ]]></return>
</method>
<method name='setKeyAt' fullname='org.as3collections.maps:SortedArrayListMap/setKeyAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;key' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 

		 Replaces the key at the specified position in this map with the specified key (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 	index of the key to replace.

		 ]]></param>
<param><![CDATA[key 	key to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the key previously at the specified position.
		 ]]></return>
</method>
<method name='setValueAt' fullname='org.as3collections.maps:SortedArrayListMap/setValueAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;value' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 

		 Replaces the value at the specified position in this map with the specified value (optional operation).

		 

		 ]]></description>
<param><![CDATA[index 	index of the value to replace.

		 ]]></param>
<param><![CDATA[value 	value to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the value previously at the specified position.

		 ]]></return>
</method>
<method name='sortOn' fullname='org.as3collections.maps:SortedArrayListMap/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()

		 ]]></see>
</method>
<method name='sort' fullname='org.as3collections.maps:SortedArrayListMap/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Sorts the objects within this class.

		 <p>For more info see <code>org.as3coreaddendum.system.ISortable.sort()</code> in the link below.</p>

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='subMap' fullname='org.as3collections.maps:SortedArrayListMap/subMap' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IListMap'>
<description><![CDATA[

		 inheritDoc 

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving mappings (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving mappings (exclusive).

		 ]]></param>
<return><![CDATA[a new list that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	if the <code>subMap</code> operation is not supported by this map.

		 ]]></throws>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='comparator' fullname='org.as3collections.maps:SortedArrayListMap/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the comparator object to be used automatically to sort.

		 <p>If this value change the map is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.maps:SortedArrayListMap/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the options to be used automatically to sort.

		 <p>If this value change the list is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='sortBy' fullname='org.as3collections.maps:SortedArrayListMap/sortBy/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:SortMapBy'>
<description><![CDATA[

		 Defines whether the map should be sorted by its keys or values. The default is <code>SortMapBy.KEY</code>.

		 <p>If this value change the map is automatically reordered with the new value.</p>

		 

		 ]]></description>
<throws><![CDATA[ArgumentError  	 if try to set a <code>null</code> value.

		 ]]></throws>
</method>
<method name='comparator' fullname='org.as3collections.maps:SortedArrayListMap/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.maps:SortedArrayListMap/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<method name='sortBy' fullname='org.as3collections.maps:SortedArrayListMap/sortBy/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3collections:SortMapBy' param_defaults='undefined' result_type='void'>
</method>
<field name='_comparator' fullname='org.as3collections.maps:SortedArrayListMap/private:_comparator' type='org.as3coreaddendum.system:IComparator' isStatic='false' isConst='false' >
</field>
<field name='_options' fullname='org.as3collections.maps:SortedArrayListMap/private:_options' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_sortBy' fullname='org.as3collections.maps:SortedArrayListMap/private:_sortBy' type='org.as3collections:SortMapBy' isStatic='false' isConst='false' >
</field>
<classRec name='TypedList' fullname='org.as3collections.lists:TypedList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\TypedList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections:TypedCollection' interfaces='org.as3collections:IList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedList</code> works as a wrapper for a <code>IList</code> object.

	 Since ActionScript 3.0 does not support typed arrays, <code>TypedList</code> is a way to create typed lists.

	 It stores the <code>wrapList</code> constructor's argument internaly.

	 So every method call to this class is forwarded to the <code>wrappedList</code> object.

	 The methods that need to be checked for the type of the elements are previously validated before forward the call.

	 If the type of an element requested to be added to this list is incompatible with the type of the list a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedList</code> returns the return of the <code>wrappedList</code> call.

	 <p><code>TypedList</code> does not allow <code>null</code> elements.</p>

	 <p>You can also create unique and typed lists. See below the link "ListUtil.getUniqueTypedList()".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.ArrayList;

	 import org.as3collections.lists.TypedList;

	 import org.as3collections.utils.ListUtil;

	 

	 var l1:IList = new ArrayList([3, 5, 1, 7]);

	 

	 var list1:IList = new TypedList(l1, int); // you can use this way

	 

	 //var list1:IList = ListUtil.getTypedList(l1, int); // or you can use this way

	 

	 list1                          // [3,5,1,7]

	 list1.size()                   // 4

	 

	 list1.add(8)                   // true

	 list1                          // [3,5,1,7,8]

	 list1.size()                   // 5

	 

	 list1.addAt(1, 4)              // true

	 list1                          // [3,4,5,1,7,8]

	 list1.size()                   // 6

	 

	 list1.remove("abc")            // false

	 list1                          // [3,4,5,1,7,8]

	 list1.size()                   // 6

	 

	 var it:IListIterator = list1.listIterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	 

	     e = it.next()

	     e                          // 3

	 

	     e = it.next()

	     e:                         // 4

	 

	     e = it.next()

	     e                          // 5

	 

	     if (e == 5)

	     {

	         it.add(0)

	 

	         list1                  // [3,4,5,0,1,7,8]

	         list1.size()           // 7

	     }

	 

	     e = it.next()

	     e                          // 1

	 

	     if (e == 1)

	     {

	         it.add(3)

	 

	         list1                  // [3,4,5,0,1,3,7,8]

	         list1.size()           // 8

	     }

	 

	     e = it.next()

	     e                          // 7

	 

	     e = it.next()

	     e                          // 8

	 

	     if (e == 8)

	     {

	         it.add("ghi")          // ClassCastError: Invalid element type. element: ghi | type: String | expected type: int

	     }

	 }

	 

	 list1                          // [3,4,5,0,1,3,7,8]

	 list1.size()                   // 8

	 

	 list1.add("def")               // ClassCastError: Invalid element type. element: def | type: String | expected type: int

	 

	 list1.setAt(0, 1)              // 3

	 list1                          // [1,4,5,0,1,3,7,8]

	 list1.size()                   // 8

	 

	 list1.setAt(0, [1,2])          // ClassCastError: Invalid element type. element: 1,2 | type: Array | expected type: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.ListUtil#getTypedList() ListUtil.getTypedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedList() ListUtil.getUniqueTypedList()

	 ]]></see>
</classRec>
<method name='TypedList' fullname='org.as3collections.lists:TypedList/TypedList' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:IList;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedList</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to wrap.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by this list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='addAllAt' fullname='org.as3collections.lists:TypedList/addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;collection' param_types='int;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 The collection is validated to be forwarded to <code>wrappedList.addAllAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[collection 	the collection to forward to <code>wrappedList.addAllAt</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.addAllAt</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>collection</code> argument are incompatible with the type of this list.

		 ]]></throws>
</method>
<method name='addAt' fullname='org.as3collections.lists:TypedList/addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 The element is validated to be forwarded to <code>wrappedList.addAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[element 	the element to forward to <code>wrappedList.addAt</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.addAt</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the element is incompatible with the type of this list.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.lists:TypedList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedList</code> object with a clone of the <code>wrappedList</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedList</code> object with a clone of the <code>wrappedList</code> object.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.lists:TypedList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method first checks if <code>other</code> argument is a <code>TypedList</code>.

		 If not it returns <code>false</code>.

		 If <code>true</code> it checks the <code>type</code> property of both lists.

		 If they are different it returns <code>false</code>.

		 Otherwise it uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='getAt' fullname='org.as3collections.lists:TypedList/getAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.getAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.getAt</code>.

		 ]]></return>
</method>
<method name='indexOf' fullname='org.as3collections.lists:TypedList/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.indexOf</code>.

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<param><![CDATA[fromIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.indexOf</code>.
		 ]]></return>
</method>
<method name='lastIndexOf' fullname='org.as3collections.lists:TypedList/lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0x7fffffff' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.lastIndexOf</code>.

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<param><![CDATA[fromIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.lastIndexOf</code>.

		 ]]></return>
</method>
<method name='listIterator' fullname='org.as3collections.lists:TypedList/listIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list. The specified index indicates the first element that would be returned by an initial call to <code>next</code>. An initial call to <code>previous</code> would return the element with the specified index minus one. 

		 <p>This implementation returns an <code>ListIterator</code> object.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ListIterator ListIterator

		 ]]></see>
</method>
<method name='removeAt' fullname='org.as3collections.lists:TypedList/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.removeAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.removeAt</code>.

		 ]]></return>
</method>
<method name='removeRange' fullname='org.as3collections.lists:TypedList/removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.removeRange</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.removeRange</code>.
		 ]]></return>
</method>
<method name='reverse' fullname='org.as3collections.lists:TypedList/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.reverse</code>.

		 ]]></description>
</method>
<method name='setAt' fullname='org.as3collections.lists:TypedList/setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 The element is validated to be forwarded to <code>wrappedList.setAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[element 	the element to forward to <code>wrappedList.setAt</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.setAt</code>.

		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the element is incompatible with the type of this list.

		 ]]></throws>
</method>
<method name='subList' fullname='org.as3collections.lists:TypedList/subList' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new <code>TypedList(wrappedList.subList(fromIndex, toIndex))</code>. 

		 <p>Modifications in the returned <code>TypedList</code> object does not affect this list.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>TypedList(wrappedList.subList(fromIndex, toIndex))</code>.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='modCount' fullname='org.as3collections.lists:TypedList/modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the return of the call <code>wrappedList.modCount</code>.

		 ]]></description>
</method>
<method name='wrappedList' fullname='org.as3collections.lists:TypedList/protected:wrappedList/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='UniqueList' fullname='org.as3collections.lists:UniqueList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\UniqueList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections:UniqueCollection' interfaces='org.as3collections:IList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>UniqueList</code> works as a wrapper for a <code>IList</code> object.

	 It does not allow duplicated elements in the collection.

	 It stores the <code>wrapList</code> constructor's argument in the <code>wrappedList</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedList</code> object.

	 The methods that need to be checked for duplication are previously validated before forward the call.

	 No error is thrown by the validation of duplication.

	 The calls that are forwarded to the <code>wrappedList</code> returns the return of the <code>wrappedList</code> call.

	 <p>You can also create unique and typed lists. See below the link "ListUtil.getUniqueTypedList()".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.ArrayList;

	 import org.as3collections.lists.UniqueList;

	 import org.as3collections.utils.ListUtil;

	 

	 var l1:IList = new ArrayList([3, 5, 1, 7]);

	 

	 var list1:IList = new UniqueList(l1); // you can use this way

	 

	 //var list1:IList = ListUtil.getUniqueList(l1); // or you can use this way

	 

	 list1                       // [3,5,1,7]

	 list1.size()                // 4

	 

	 list1.addAt(1, 4)           // true

	 list1                       // [3,4,5,1,7]

	 list1.size()                // 5

	 

	 list1.addAt(2, 3)           // false

	 list1                       // [3,4,5,1,7]

	 list1.size()                // 5

	 

	 list1.add(5)                // false

	 list1                       // [3,4,5,1,7]

	 list1.size()                // 5

	 

	 var it:IListIterator = list1.listIterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	 

	     e = it.next()

	     e                       // 3

	 

	     e = it.next()

	     e                       // 4

	 

	     e = it.next()

	     e                       // 5

	 

	     if (e == 5)

	     {

	         it.add(0)

	 

	         list1               // [3,4,5,0,1,7]

	         list1.size()        // 6

	     }

	 

	     e = it.next()

	     e                       // 1

	 

	     if (e == 1)

	     {

	         it.add(3)

	 

	         list1               // [3,4,5,0,1,7]

	         list1.size()        // 6

	     }

	 

	     e = it.next()

	     e                       // 7

	 }

	 

	 list1                       // [3,4,5,0,1,7]

	 list1.size()                // 6

	 

	 var l2:IList = new ArrayList([1, 2, 3, 4, 5, 1, 3, 5]);

	 

	 var list2:IList = new UniqueList(l2); // you can use this way

	 

	 //var list2:IList = ListUtil.getUniqueList(l2); // or you can use this way

	 

	 list2                       // [1,2,3,4,5]

	 list2.size()                // 5

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueList() ListUtil.getUniqueList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedList() ListUtil.getUniqueTypedList()

	 ]]></see>
</classRec>
<method name='UniqueList' fullname='org.as3collections.lists:UniqueList/UniqueList' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapList' param_types='org.as3collections:IList' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>UniqueList</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to wrap.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrappedList</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='addAllAt' fullname='org.as3collections.lists:UniqueList/addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;collection' param_types='int;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 If the specified collection is empty returns <code>false</code>.

		 Otherwise, it clones the specified collection, removes from the cloned collection all elements that already are in the <code>wrappedList</code> and removes all duplicates.

		 Then it forwards the call to <code>wrappedList.addAllAt</code> sending the cloned (and filtered) collection.

		 

		 ]]></description>
<param><![CDATA[index 		index at which to insert the first element from the specified collection.

		 ]]></param>
<param><![CDATA[collection 	the collection to forward to <code>wrappedList.addAllAt</code>.

		 ]]></param>
<return><![CDATA[<code>false</code> if the specified collection is <code>null</code> or empty. Otherwise returns the return of the call <code>wrappedList.addAllAt</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError  	 if the specified collection contains a <code>null</code> element and <code>wrappedList</code> does not permit <code>null</code> elements, or if the specified collection is <code>null</code>.

		 ]]></throws>
</method>
<method name='addAt' fullname='org.as3collections.lists:UniqueList/addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 If <code>wrappedList.contains(element)</code> returns <code>true</code> then returns <code>false</code>.

		 Otherwise, it forwards the call to <code>wrappedList.addAt</code>.

		 

		 ]]></description>
<param><![CDATA[index 		index at which the specified element is to be inserted.

		 ]]></param>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>false</code> if <code>wrappedList.contains(element)</code> returns <code>true</code>. Otherwise returns the return of the call <code>wrappedList.addAt</code>.

		 ]]></return>
</method>
<method name='clone' fullname='org.as3collections.lists:UniqueList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>UniqueList</code> object with the clone of the <code>wrappedList</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>UniqueList</code> object with the clone of the <code>wrappedList</code> object.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.lists:UniqueList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='getAt' fullname='org.as3collections.lists:UniqueList/getAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.getAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.getAt</code>.

		 ]]></return>
</method>
<method name='indexOf' fullname='org.as3collections.lists:UniqueList/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.indexOf</code>.

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<param><![CDATA[fromIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.indexOf</code>.

		 ]]></return>
</method>
<method name='lastIndexOf' fullname='org.as3collections.lists:UniqueList/lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='element;fromIndex' param_types='*;int' param_defaults='undefined;0x7fffffff' result_type='int'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.lastIndexOf</code>.

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<param><![CDATA[fromIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.lastIndexOf</code>.

		 ]]></return>
</method>
<method name='listIterator' fullname='org.as3collections.lists:UniqueList/listIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 The specified index indicates the first element that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the element with the specified index minus one. 

		 <p>This implementation returns an <code>ListIterator</code> object.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ListIterator ListIterator

		 ]]></see>
</method>
<method name='removeAt' fullname='org.as3collections.lists:UniqueList/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.removeAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.removeAt</code>.

		 ]]></return>
</method>
<method name='removeRange' fullname='org.as3collections.lists:UniqueList/removeRange' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.removeRange</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedList.removeRange</code>.

		 ]]></return>
</method>
<method name='reverse' fullname='org.as3collections.lists:UniqueList/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.reverse</code>.

		 ]]></description>
</method>
<method name='setAt' fullname='org.as3collections.lists:UniqueList/setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 If <code>wrappedList.contains(element)</code> returns <code>true</code> then returns <code>false</code>. Otherwise, it forwards the call to <code>wrappedList.setAt</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[<code>false</code> if <code>wrappedList.contains(element)</code> returns <code>true</code>. Otherwise returns the return of the call <code>wrappedList.setAt</code>.

		 ]]></return>
</method>
<method name='subList' fullname='org.as3collections.lists:UniqueList/subList' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new <code>UniqueList(wrappedList.subList(fromIndex, toIndex))</code>. 

		 <p>Modifications in the returned <code>UniqueList</code> object does not affect this list.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>UniqueList(wrappedList.subList(fromIndex, toIndex))</code>.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='modCount' fullname='org.as3collections.lists:UniqueList/modCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the return of the call <code>wrappedList.modCount</code>.

		 ]]></description>
</method>
<method name='wrappedList' fullname='org.as3collections.lists:UniqueList/protected:wrappedList/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='TypedSortedList' fullname='org.as3collections.lists:TypedSortedList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\TypedSortedList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections.lists:TypedList' interfaces='org.as3collections:ISortedList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedSortedList</code> works as a wrapper for a <code>ISortedList</code> object.

	 Since ActionScript 3.0 does not support typed arrays, <code>TypedSortedList</code> is a way to create typed lists.

	 It stores the <code>wrapList</code> constructor's argument internaly.

	 So every method call to this class is forwarded to the <code>wrappedList</code> object.

	 The methods that need to be checked for the type of the elements are previously validated before forward the call.

	 If the type of an element requested to be added to this list is incompatible with the type of the list a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 The calls that are forwarded to the <code>wrappedList</code> returns the return of the <code>wrappedList</code> call.

	 <p><code>TypedSortedList</code> does not allow <code>null</code> elements.</p>

	 <p>You can also create unique and typed sorted lists.

	 See below the link "ListUtil.getUniqueTypedSortedList()".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3collections.lists.TypedSortedList;

	 import org.as3collections.utils.ListUtil;

	 

	 var l1:ISortedList = new SortedArrayList([3, 5, 7], null, Array.NUMERIC);

	 

	 var list1:ISortedList = new TypedSortedList(l1, int); // you can use this way

	 

	 //var list1:ISortedList = ListUtil.getTypedSortedList(l1, int); // or you can use this way

	 

	 list1                          // [3,5,7]

	 list1.size()                   // 3

	 

	 list1.add(8)                   // true

	 list1                          // [3,5,7,8]

	 list1.size()                   // 4

	 

	 list1.remove("abc")            // false

	 list1                          // [3,4,5,7,8]

	 list1.size()                   // 5

	 

	 var it:IListIterator = list1.listIterator();

	 var e:int;

	 

	 while (it.hasNext())

	 {

	 

	     e = it.next()

	     e                          // 3

	 

	     e = it.next()

	     e:                         // 4

	 

	     e = it.next()

	     e                          // 5

	 

	     if (e == 5)

	     {

	         it.add("ghi")          // ClassCastError: Invalid element type. element: ghi | type: String | expected type: int

	     }

	 }

	 

	 list1.setAt(0, [1,2])          // ClassCastError: Invalid element type. element: 1,2 | type: Array | expected type: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.ListUtil#getTypedSortedList() ListUtil.getTypedSortedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedSortedList() ListUtil.getUniqueTypedSortedList()

	 ]]></see>
</classRec>
<method name='TypedSortedList' fullname='org.as3collections.lists:TypedSortedList/TypedSortedList' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapList;type' param_types='org.as3collections:ISortedList;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedList</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to wrap.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by this list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.lists:TypedSortedList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedSortedList</code> object with the clone of the <code>wrappedMap</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedSortedList</code> object with the clone of the <code>wrappedMap</code> object.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.lists:TypedSortedList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 <li>elements have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the elements in the list.

		 So, for two lists are equal the order of elements returned by the iterator must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='sortOn' fullname='org.as3collections.lists:TypedSortedList/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.sortOn</code>.

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='sort' fullname='org.as3collections.lists:TypedSortedList/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.sort</code>.

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='subList' fullname='org.as3collections.lists:TypedSortedList/subList' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.subList</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3collections.lists:TypedSortedList/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the <code>wrappedList</code> comparator object to be used automatically to sort.

		 <p>If this value change the <code>wrappedList</code> is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.lists:TypedSortedList/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the <code>wrappedList</code> options to be used automatically to sort.

		 <p>If this value change the list is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='wrappedSortedList' fullname='org.as3collections.lists:TypedSortedList/protected:wrappedSortedList/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ISortedList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.lists:TypedSortedList/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.lists:TypedSortedList/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<classRec name='UniqueSortedList' fullname='org.as3collections.lists:UniqueSortedList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\UniqueSortedList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections.lists:UniqueList' interfaces='org.as3collections:ISortedList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>UniqueSortedList</code> works as a wrapper for a <code>ISortedList</code> object.

	 It does not allow duplicated elements in the collection.

	 It stores the <code>wrapList</code> constructor's argument in the <code>wrappedList</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedList</code> object.

	 The methods that need to be checked for duplication are previously validated before forward the call.

	 No error is thrown by the validation of duplication.

	 The calls that are forwarded to the <code>wrappedList</code> returns the return of the <code>wrappedList</code> call.

	 <p>You can also create unique and typed sorted lists.

	 See below the link "ListUtil.getUniqueTypedSortedList()".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.IListIterator;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3collections.lists.UniqueSortedList;

	 import org.as3collections.utils.ListUtil;

	 

	 var l1:ISortedList = new SortedArrayList([3, 5, 1, 7], null, Array.NUMERIC);

	 

	 var list1:ISortedList = new UniqueSortedList(l1); // you can use this way

	 

	 //var list1:ISortedList = ListUtil.getUniqueSortedList(l1); // or you can use this way

	 

	 list1                       // [1,3,5,7]

	 list1.size()                // 4

	 

	 list1.addAt(1, 4)           // true

	 list1                       // [1,3,4,5,7]

	 list1.size()                // 5

	 

	 list1.addAt(2, 3)           // false

	 list1                       // [1,3,4,5,7]

	 list1.size()                // 5

	 

	 list1.add(5)                // false

	 list1                       // [1,3,4,5,7]

	 list1.size()                // 5

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueSortedList() ListUtil.getUniqueSortedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedSortedList() ListUtil.getUniqueTypedSortedList()

	 ]]></see>
</classRec>
<method name='UniqueSortedList' fullname='org.as3collections.lists:UniqueSortedList/UniqueSortedList' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapList' param_types='org.as3collections:ISortedList' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedList</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapList 	the target list to wrap.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by this list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapList</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapList</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.lists:UniqueSortedList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>UniqueSortedList</code> object with the clone of the <code>wrappedMap</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>UniqueSortedList</code> object with the clone of the <code>wrappedMap</code> object.

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.lists:UniqueSortedList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 <li>elements have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the elements in the list.

		 So, for two lists are equal the order of elements returned by the iterator must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='sortOn' fullname='org.as3collections.lists:UniqueSortedList/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.sortOn</code>.

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='sort' fullname='org.as3collections.lists:UniqueSortedList/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.sort</code>.

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='subList' fullname='org.as3collections.lists:UniqueSortedList/subList' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Forwards the call to <code>wrappedList.subList</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3collections.lists:UniqueSortedList/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the <code>wrappedList</code> comparator object to be used automatically to sort.

		 <p>If this value change the <code>wrappedList</code> is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.lists:UniqueSortedList/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the <code>wrappedList</code> options to be used automatically to sort.

		 <p>If this value change the list is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='wrappedSortedList' fullname='org.as3collections.lists:UniqueSortedList/protected:wrappedSortedList/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:ISortedList'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.lists:UniqueSortedList/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.lists:UniqueSortedList/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<classRec name='ArrayList' fullname='org.as3collections.lists:ArrayList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\ArrayList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections:AbstractList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 Resizable-array implementation of the <code>IList</code> interface.

	 Implements all optional list operations, and permits all elements, including <code>null</code>.

	 <p>Each <code>ArrayList</code> instance has a capacity.

	 The capacity is the size of the array used to store the elements in the list.

	 It is always at least as large as the list size.

	 As elements are added to an <code>ArrayList</code> object, its capacity grows automatically.</p>

	 <p>In addition to implementing the <code>IList</code> interface, this class provides the <code>ensureCapacity</code> method to arbitrarily manipulate the size of the array (this usage is not common) that is used internally to store the elements.

	 Check the examples at the bottom of the page for further information about usage.</p>

	 <p>It's possible to create unique lists, typed lists and even unique typed lists.

	 You just send the <code>ArrayList</code> object to the wrappers <code>UniqueList</code> or <code>TypedList</code> or uses the <code>ListUtil.getUniqueList</code>, <code>ListUtil.getTypedList</code> or <code>ListUtil.getUniqueTypedList</code>.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <b>Example 1</b>

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 

	 var list1:IList = new ArrayList();

	 

	 list1                           // []

	 

	 list1.size()                    // 0

	 list1.contains(null)            // false

	 list1.contains("abc")           // false

	 list1.isEmpty()                 // true

	 list1.modCount                  // 0

	 

	 list1.clear()

	 

	 list1.modCount                  // 0

	 list1.isEmpty()                 // true

	 list1.size()                    // 0

	 

	 list1.add(null)                 // true

	 list1                           // [null]

	 list1.isEmpty()                 // false

	 list1.size()                    // 1

	 list1.modCount                  // 1

	 list1.contains(null)            // true

	 list1.contains("abc")           // false

	 

	 list1.add("abc")                // true

	 list1                           // [null,abc]

	 list1.size()                    // 2

	 list1.modCount                  // 2

	 list1.contains("abc")           // true

	 

	 list1.add(null)                 // true

	 list1                           // [null,abc,null]

	 list1.size()                    // 3

	 list1.modCount                  // 3

	 list1.indexOf(null)             // 0

	 list1.lastIndexOf(null)         // 2

	 

	 list1.addAt(0, 123)             // true

	 list1                           // [123,null,abc,null]

	 list1.size()                    // 4

	 list1.modCount                  // 4

	 

	 list1.addAt(4, "def")           // true

	 list1                           // [123,null,abc,null,def]

	 list1.size()                    // 5

	 

	 list1.addAt(4, "abc")           // true

	 list1                           // [123,null,abc,null,abc,def]

	 list1.size()                    // 6

	 list1.modCount                  // 6

	 

	 list1.getAt(0)                  // 123

	 list1.getAt(2)                  // abc

	 list1.getAt(5)                  // def

	 

	 list1.removeAt(0)               // 123

	 list1                           // [null,abc,null,abc,def]

	 list1.size()                    // 5

	 list1.modCount                  // 7

	 

	 list1.removeAt(4)               // def

	 list1                           // [null,abc,null,abc]

	 list1.size()                    // 4

	 list1.modCount                  // 8

	 

	 list1.removeAt(0)               // null

	 list1                           // [abc,null,abc]

	 list1.size()                    // 3

	 list1.modCount                  // 9

	 

	 var list2:IList = list1.clone();

	 

	 list2                           // [abc,null,abc]

	 

	 list1.containsAll(list1)        // true

	 list1.containsAll(list2)        // true

	 list2.containsAll(list1)        // true

	 list1.equals(list2)             // true

	 

	 list2.remove("abc")             // true

	 list2.remove("abc")             // true

	 list2.add(null)                 // true

	 list2                           // [null,null]

	 

	 list1.containsAll(list2)        // true

	 list2.containsAll(list1)        // false

	 list1.equals(list2)             // false

	 

	 list1                           // [abc,null,abc]

	 list1.size()                    // 3

	 list1.setAt(2, "ghi")           // abc

	 list1                           // [abc,null,ghi]

	 list1.size()                    // 3

	 list1.modCount                  // 9

	 

	 list1.clear()

	 

	 list1.modCount                  // 10

	 list1.isEmpty()                 // true

	 list1.size()                    // 0

	 </listing>

	 

	 <b>Example 2</b>

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 

	 var arr:Array = [1, 2, 3, 4];

	 var list1:IList = new ArrayList(arr);

	 

	 list1                                 // [1,2,3,4]

	 list1.size()                          // 4

	 list1.isEmpty()                       // false

	 list1.modCount                        // 0

	 

	 var list2:IList = new ArrayList([9, 10, 11, 12]);

	 

	 list2                                 // [9,10,11,12]

	 list2.size()                          // 4

	 list2.isEmpty()                       // false

	 list2.modCount                        // 0

	 

	 list1.addAll(list2)                   // true

	 list1                                 // [1,2,3,4,9,10,11,12]

	 list1.size()                          // 8

	 list1.modCount                        // 4

	 

	 var list3:IList = new ArrayList([5, 6, 7, 8]);

	 

	 list3                                 // [5,6,7,8]

	 list3.size()                          // 4

	 list3.isEmpty()                       // false

	 list3.modCount                        // 0

	 

	 list1.addAllAt(4, list3)              // true

	 list1                                 // [1,2,3,4,5,6,7,8,9,10,11,12]

	 list1.size()                          // 12

	 list1.modCount                        // 8

	 

	 list1.containsAll(list3)              // true

	 list3.containsAll(list1)              // false

	 

	 list1.removeAll(list3)                // true

	 list1                                 // [1,2,3,4,9,10,11,12]

	 list1.size()                          // 8

	 list1.modCount                        // 12

	 

	 list1.removeAll(list3)                // false

	 list1                                 // [1,2,3,4,9,10,11,12]

	 list1.size()                          // 8

	 list1.modCount                        // 12

	 

	 list1.retainAll(list2)                // true

	 list1                                 // [9,10,11,12]

	 list1.size()                          // 4

	 list1.modCount                        // 16

	 

	 list1.subList(0, 1)                   // [9]

	 list1.subList(0, 2)                   // [9,10]

	 list1.subList(0, 4)                   // [9,10,11,12]

	 list1.subList(0, list1.size())        // [9,10,11,12]

	 

	 list1.removeRange(1, 3)               // [10,11]

	 list1                                 // [9,12]

	 list1.size()                          // 2

	 list1.modCount                        // 17

	 

	 list1.remove(9)                       // true

	 list1                                 // [12]

	 list1.size()                          // 1

	 list1.modCount                        // 18

	 

	 list1.retainAll(list3)                // true

	 list1                                 // []

	 list1.size()                          // 0

	 list1.modCount                        // 19

	 </listing>

	 

	 <b>Example 3</b>

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 

	 var list1:ArrayList = new ArrayList();

	 

	 list1                     // []

	 list1.addAt(3, 4)         // IndexOutOfBoundsError: The 'index' argument is out of bounds: 3 (min: 0, max: 0)

	 

	 list1.ensureCapacity(5)

	 

	 list1                     // [undefined,undefined,undefined,undefined,undefined]

	 list1.modCount            // 1

	 list1.isEmpty()           // false

	 list1.size()              // 5

	 

	 list1.addAt(3, 4)         // true

	 list1                     // [undefined,undefined,undefined,4,undefined,undefined]

	 list1.modCount            // 2

	 list1.size()              // 6

	 

	 list1.getAt(1)            // undefined

	 

	 list1.ensureCapacity(3)

	 

	 list1                     // [undefined,undefined,undefined,4,undefined,undefined]

	 list1.modCount            // 2

	 list1.size()              // 6

	 

	 list1.setAt(2, 3)         // undefined

	 list1                     // [undefined,undefined,3,4,undefined,undefined]

	 list1.modCount            // 2

	 list1.size()              // 6

	 

	 list1.remove(undefined)   // true

	 list1.remove(undefined)   // true

	 list1                     // [3,4,undefined,undefined]

	 list1.modCount            // 4

	 list1.size()              // 4

	 </listing>

	 

	 <b>Example 4 - Using equality (org.as3coreaddendum.system.IEquatable)</b>

	 

	 <listing version="3.0">

	 package test

	 {

	     import org.as3coreaddendum.system.IEquatable;

	 

	     public class TestEquatableObject implements IEquatable

	     {

	         private var _id:String;

	 		

	         public function get id(): String { return _id; }

	 

	         public function set id(value:String): void { _id = value; }

	 

	         public function TestEquatableObject(id:String)

	         {

	             _id = id;

	         }

	 

	         public function equals(other:: Boolean

	         {

	             return other is TestEquatableObject &amp;&amp; _id == (other as TestEquatableObject).id;

	         }

	 

	         public function toString(): String

	         {

	             return "[TestEquatableObject " + _id + "]";

	         }

	     }

	 }

	 </listing>

	 

	 <listing version="3.0">

	 import test.TestEquatableObject;

	 

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 import org.as3collections.lists.UniqueList;

	 

	 var list1:ArrayList = new ArrayList();

	 

	 list1                               // []

	 

	 var o1:TestEquatableObject = new TestEquatableObject("o1");

	 var o2:TestEquatableObject = new TestEquatableObject("o2");

	 var o3:TestEquatableObject = new TestEquatableObject("o3");

	 var o4:TestEquatableObject = new TestEquatableObject("o4");

	 

	 list1.contains(o1)                  // false

	 list1.add(o1)                       // true

	 list1                               // [[TestEquatableObject o1]]

	 list1.contains(o1)                  // true

	 

	 var o5:TestEquatableObject = new TestIndexablePriority("o1"); // -> Attention to the id, which is "o1"

	 

	 list1.contains(o5)                  // true -> without equality would return false, because o1 and o5 are different objects.

	 

	 list1.add(o5)                       // true

	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]

	 

	 o1.equals(o5)                       // true

	 o1.equals("abc")                    // false

	 

	 var list2:ArrayList = new ArrayList();

	 

	 list2.equals(list1)                 // false

	 list2.add(o5)                       // true

	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]

	 list2                               // [[TestEquatableObject o1]]

	 list2.equals(list1)                 // false

	 

	 list2.add(o5)                       // true

	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]

	 list2                               // [[TestEquatableObject o1],[TestEquatableObject o1]]

	 list2.equals(list1)                 // true

	 

	 list2.remove(o1)                    // true -> equality used

	 list2                               // [[TestEquatableObject o1]]

	 

	 var uniqueList:UniqueList = new UniqueList(new ArrayList());

	 

	 uniqueList.contains(o1)             // false

	 uniqueList.add(o1)                  // true

	 uniqueList                          // [[TestEquatableObject o1]]

	 uniqueList.contains(o1)             // true

	 

	 uniqueList.add(o5)                  // false

	 uniqueList.contains(o5)             // true -> by equality the object o5 is in the list because its 'id' is the same of the object o1.

	 uniqueList                          // [[TestEquatableObject o1]]

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.AbstractList AbstractList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.TypedList TypedList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.UniqueList UniqueList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.SortedArrayList SortedArrayList

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueList() ListUtil.getUniqueList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getTypedList() ListUtil.getTypedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedList() ListUtil.getUniqueTypedList()

	 ]]></see>
</classRec>
<method name='ArrayList' fullname='org.as3collections.lists:ArrayList/ArrayList' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ArrayList</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the list.

		 ]]></param>
</method>
<method name='addAt' fullname='org.as3collections.lists:ArrayList/addAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element at the specified position in this list.

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).

		 

		 ]]></description>
<param><![CDATA[index 		index at which the specified element is to be inserted.

		 ]]></param>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections.lists:ArrayList/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 Removes all of the elements from this list.

		 The list will be empty after this method returns.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections.lists:ArrayList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>ArrayList</code> object containing all elements in this list (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>ArrayList</code> object containing all elements in this list (in the same order).

 		 ]]></return>
</method>
<method name='ensureCapacity' fullname='org.as3collections.lists:ArrayList/ensureCapacity' isStatic='false' isFinal='false' isOverride='false'  param_names='minCapacity' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Increases the capacity of this <code>ArrayList</code> instance, if necessary, to ensure that it can hold at least the number of elements specified by the <code>minCapacity</code> argument.

		 <p>This implementation uses <code>Array.length = minCapacity</code> of the internal array object.</p>

 		 ]]></description>
</method>
<method name='iterator' fullname='org.as3collections.lists:ArrayList/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of elements.

		 <p>This implementation returns an <code>ArrayIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of elements.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ArrayIterator ArrayIterator

 		 ]]></see>
</method>
<method name='listIterator' fullname='org.as3collections.lists:ArrayList/listIterator' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 The specified index indicates the first element that would be returned by an initial call to <code>next</code>.

		 An initial call to <code>previous</code> would return the element with the specified index minus one. 

		 <p>This implementation returns an <code>ListIterator</code> object.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ListIterator ListIterator

		 ]]></see>
</method>
<method name='removeAt' fullname='org.as3collections.lists:ArrayList/removeAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Removes the element at the specified position in this list.

		 Shifts any subsequent elements to the left (subtracts one from their indices).

		 Returns the element that was removed from the list. 

		 

		 ]]></description>
<param><![CDATA[index 	the index of the element to be removed.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections.lists:ArrayList/removeRange' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 Removes all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 Shifts any subsequent elements to the left (subtracts their indices).

		 <p>If <code>toIndex == fromIndex</code>, this operation has no effect.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start removing elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop removing elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>ArrayList</code> object containing all the removed elements.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='setAt' fullname='org.as3collections.lists:ArrayList/setAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the element at the specified position in this list with the specified element.

		 

		 ]]></description>
<param><![CDATA[index 		index of the element to replace.

		 ]]></param>
<param><![CDATA[element 	element to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='subList' fullname='org.as3collections.lists:ArrayList/subList' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new <code>ArrayList</code> that is a view of the portion of this <code>ArrayList</code> between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 This method uses native <code>Array.slice</code> method.

		 <p>Modifications in the returned <code>ArrayList</code> object doesn't affect this list.</p>

		 <p>This list is not modified.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>ArrayList</code> that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<classRec name='ReadOnlyArrayList' fullname='org.as3collections.lists:ReadOnlyArrayList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\ReadOnlyArrayList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections:AbstractList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A list that does not allow modifications.

	 It receives all the elements by its constructor and can no longer be changed.

	 All methods that change this list will throw an <code>org.as3coreaddendum.errors.UnsupportedOperationError</code>.
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IList;

	 import org.as3collections.lists.ArrayList;

	 import org.as3collections.lists.ReadOnlyArrayList;

	 

	 var list1:IList = new ArrayList([3, 5, 1, 7]);

	 

	 list1                       // [3,5,1,7]

	 

	 var list2:IList = new ReadOnlyArrayList(list1.toArray());

	 

	 list2                       // [3,5,1,7]

	 

	 list2.add(1)                // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.

	 list2.remove(1)             // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.

	 

	 var list3:IList = list2.clone();

	 

	 list3                       // [3,5,1,7]

	 

	 list3.contains(2)           // false

	 list3.contains(5)           // true

	 list3.indexOf(5)            // 1

	 list3.containsAll(list1)    // true

	 list3.equals(list1)         // false

	 list3.getAt(2)              // 1

	 list3.subList(1, 3)         // [5,1]

	 

	 list3.addAll(list2)         // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.

	 list3.removeRange(1, 3)     // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.

	 

	 var it:IIterator = list3.iterator();

	 

	 while (it.hasNext())

	 {

	     it.next()

	 

	     it.remove()             // UnsupportedOperationError: ReadOnlyArrayIterator is a read-only iterator and doesn't allow modifications in the collection.

	 }

	 

	 var it2:IListIterator = list3.listIterator();

	 

	 while (it2.hasNext())

	 {

	     it2.next()

	 

	     it.add(1)               // UnsupportedOperationError: ReadOnlyListIterator is a read-only iterator and doesn't allow modifications in the list.

	 }

	 </listing>

	 
	 ]]></example>
</classRec>
<method name='ReadOnlyArrayList' fullname='org.as3collections.lists:ReadOnlyArrayList/ReadOnlyArrayList' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>ReadOnlyArrayList</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the list.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>source</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='addAllAt' fullname='org.as3collections.lists:ReadOnlyArrayList/addAllAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;collection' param_types='int;org.as3collections:ICollection' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='addAll' fullname='org.as3collections.lists:ReadOnlyArrayList/addAll' isStatic='false' isFinal='false' isOverride='true'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='addAt' fullname='org.as3collections.lists:ReadOnlyArrayList/addAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections.lists:ReadOnlyArrayList/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='clear' fullname='org.as3collections.lists:ReadOnlyArrayList/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.
		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.lists:ReadOnlyArrayList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>ReadOnlyArrayList</code> object containing all elements in this list (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>ReadOnlyArrayList</code> object containing all elements in this list (in the same order).

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections.lists:ReadOnlyArrayList/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of elements.

		 <p>This implementation returns a <code>ReadOnlyArrayIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of elements.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ReadOnlyArrayIterator ReadOnlyArrayIterator

		 ]]></see>
</method>
<method name='listIterator' fullname='org.as3collections.lists:ReadOnlyArrayList/listIterator' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='0' result_type='org.as3collections:IListIterator'>
<description><![CDATA[

		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list. The specified index indicates the first element that would be returned by an initial call to <code>next</code>. An initial call to <code>previous</code> would return the element with the specified index minus one.

		 <p>This implementation returns a <code>ReadOnlyListIterator</code> object.</p>

		 

		 ]]></description>
<param><![CDATA[index 	index of first element to be returned from the list iterator (by a call to the <code>next</code> method) 

		 ]]></param>
<return><![CDATA[a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ReadOnlyListIterator ReadOnlyListIterator

		 ]]></see>
</method>
<method name='removeAll' fullname='org.as3collections.lists:ReadOnlyArrayList/removeAll' isStatic='false' isFinal='false' isOverride='true'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='removeAt' fullname='org.as3collections.lists:ReadOnlyArrayList/removeAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='removeRange' fullname='org.as3collections.lists:ReadOnlyArrayList/removeRange' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:ICollection'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[fromIndex

		 ]]></param>
<param><![CDATA[toIndex

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='remove' fullname='org.as3collections.lists:ReadOnlyArrayList/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[o

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='retainAll' fullname='org.as3collections.lists:ReadOnlyArrayList/retainAll' isStatic='false' isFinal='false' isOverride='true'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[collection

		 ]]></param>
<return><![CDATA[]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='reverse' fullname='org.as3collections.lists:ReadOnlyArrayList/reverse' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='setAt' fullname='org.as3collections.lists:ReadOnlyArrayList/setAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 This implementation always throws an <code>UnsupportedOperationError</code>.

		 

		 ]]></description>
<param><![CDATA[index

		 ]]></param>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<throws><![CDATA[org.as3coreaddendum.errors.UnsupportedOperationError  	<code>ReadOnlyArrayList</code> is a read-only list and doesn't allow modifications.

		 ]]></throws>
</method>
<method name='subList' fullname='org.as3collections.lists:ReadOnlyArrayList/subList' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new <code>ReadOnlyArrayList</code> that is a view of the portion of this <code>ReadOnlyArrayList</code> between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>ReadOnlyArrayList</code> that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<classRec name='SortedArrayList' fullname='org.as3collections.lists:SortedArrayList' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\lists\SortedArrayList.as' namespace='org.as3collections.lists' access='public' baseclass='org.as3collections.lists:ArrayList' interfaces='org.as3collections:ISortedList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A list that provides a <em>total ordering</em> on its elements.

	 The list is ordered according to the <em>natural ordering</em> of its elements, by a <em>IComparator</em> typically provided at sorted list creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.

	 <p>For each change that occurs the list is automatically reordered using <code>comparator</code> and <code>options</code>.

	 If none was provided the default behavior of <code>sort</code> method is used.</p>

	 <p>The user of this list may change their order at any time using the setters <code>comparator</code> and <code>options</code>, or by calling <code>sort</code> or <code>sortOn</code> methods and imposing other arguments to change the sort behaviour.</p>

	 <p>It's possible to create unique sorted lists, typed sorted lists and even unique typed sorted lists.

	 You just sends the <code>SortedArrayList</code> object to the wrappers <code>UniqueSortedList</code> or <code>TypedSortedList</code> or uses the <code>ListUtil.getUniqueSortedList</code>, <code>ListUtil.getTypedSortedList</code> or <code>ListUtil.getUniqueTypedSortedList</code>.</p>

	 <p>This documentation is partially based in the <em>Java Collections Framework</em> JavaDoc documentation.

	 For further information see <a href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" target="_blank">Java Collections Framework</a></p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <b>Example 1</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 

	 var list1:ISortedList = new SortedArrayList([3, 5, 1, 7], null, Array.NUMERIC | Array.DESCENDING);

	 

	 list1                       // [7,5,3,1]

	 list1.size()                // 4

	 

	 list1.addAt(3, 8)           // true

	 list1                       // [8,7,5,3,1]

	 list1.size()                // 5

	 

	 list1.add(4)                // true

	 list1                       // [8,7,5,4,3,1]

	 list1.size()                // 6

	 

	 list1.add(5)                // true

	 list1                       // [8,7,5,5,4,3,1]

	 list1.size()                // 7

	 

	 list1.sort(null, Array.NUMERIC)

	 list1                       // [1,3,4,5,5,7,8]

	 

	 list1.add(2)                // true

	 list1                       // [8,7,5,5,4,3,2,1]

	 list1.size()                // 8

	 

	 list1.reverse()

	 list1                       // [1,2,3,4,5,5,7,8]

	 

	 list1.add(6)                // true

	 list1                       // [1,2,3,4,5,5,6,7,8]

	 

	 list1.add(9)                // true

	 list1                       // [1,2,3,4,5,5,6,7,8,9]

	 

	 list1.reverse()

	 list1                       // [9,8,7,6,5,5,4,3,2,1]

	 

	 list1.add(10)               // true

	 list1                       // [10,9,8,7,6,5,5,4,3,2,1]

	 

	 list1.add(-1)               // true

	 list1                       // [10,9,8,7,6,5,5,4,3,2,1,-1]

	 

	 //list1.add("c")            // TypeError: Error #1034: Falha de coerção de tipo: não é possível converter "c" em Number.

	 </listing>

	 

	 <b>Example 2</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;

	 

	 var comparator:AlphabeticComparator = new AlphabeticComparator(false);

	 var arr:Array = ["c", "a", "d", "b"];

	 var list1:ISortedList = new SortedArrayList(arr, comparator);

	 

	 list1                              // [a,b,c,f]

	 list1.size()                       // 4

	 

	 list1.addAt(1, "x")                // true

	 list1                              // [a,b,c,f,x]

	 list1.size()                       // 5

	 

	 list1.add("d")                     // true

	 list1                              // [a,b,c,d,f,x]

	 list1.size()                       // 6

	 

	 list1.add("d")                     // true

	 list1                              // [a,b,c,d,d,f,x]

	 list1.size()                       // 7

	 

	 list1.sort()

	 list1                              // [a,b,c,d,d,f,x]

	 

	 list1.add(2)                       // true

	 list1                              // [2,a,b,c,d,d,f,x]

	 list1.size()                       // 8

	 </listing>

	 

	 <b>Example 3</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 

	 var arr:Array = [5, 1, 100, 10, 99];

	 var list1:ISortedList = new SortedArrayList(arr); // default behavior of the sort method

	 

	 list1                       // [1,10,100,5,99]

	 list1.size()                // 5

	 

	 list1.add(50)               // true

	 list1                       // [1,10,100,5,50,99]

	 list1.size()                // 6

	 

	 list1.sort(null, Array.NUMERIC)

	 list1                       // [1,5,10,50,99,100]

	 

	 list1.add(200)              // true

	 list1                       // [1,10,100,200,5,50,99]

	 list1.size()                // 7

	 </listing>

	 

	 <b>Example 4 - Unique Sorted List</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3collections.utils.ListUtil;

	 

	 var arr:Array = [5, 1, 100, 10, 99, 5];

	 

	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);

	 

	 var list1:ISortedList = ListUtil.getUniqueSortedList(l1);  // return type is UniqueSortedList

	 

	 list1                 // [100,99,10,5,1]

	 list1.size()          // 5

	 

	 list1.add(50)         // true

	 list1                 // [100,99,50,10,5,1]

	 list1.size()          // 6

	 

	 list1.add(10)         // false

	 list1                 // [100,99,50,10,5,1]

	 list1.size()          // 6

	 </listing>

	 

	 <b>Example 5 - Typed Sorted List</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3collections.utils.ListUtil;

	 

	 var arr:Array = [5, 1, 100, 10, 99, 5];

	 

	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);

	 

	 var list1:ISortedList = ListUtil.getTypedSortedList(l1);  // return type is TypedSortedList

	 

	 list1                 // [100,99,10,5,5,1]

	 list1.size()          // 6

	 

	 list1.add(50)         // true

	 list1                 // [100,99,50,10,5,5,1]

	 list1.size()          // 7

	 

	 list1.add(10)         // true

	 list1                 // [100,99,50,10,10,5,5,1]

	 list1.size()          // 8

	 

	 list1.add("a")        // ClassCastError: Invalid element type. element: a | type: String | expected type: int

	 </listing>

	 

	 <b>Example 6 - Unique Typed Sorted List</b>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedList;

	 import org.as3collections.lists.SortedArrayList;

	 import org.as3collections.utils.ListUtil;

	 

	 var arr:Array = [5, 1, 100, 10, 99, 5];

	 

	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);

	 

	 var list1:ISortedList = ListUtil.getUniqueTypedSortedList(l1);  // return type is TypedSortedList

	 

	 list1                 // [100,99,10,5,1]

	 list1.size()          // 5

	 

	 list1.add(50)         // true

	 list1                 // [100,99,50,10,5,1]

	 list1.size()          // 6

	 

	 list1.add(10)         // false

	 list1                 // [100,99,50,10,5,1]

	 list1.size()          // 6

	 

	 list1.add("a")        // ClassCastError: Invalid element type. element: a | type: String | expected type: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.ISortedList ISortedList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.ArrayList ArrayList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.TypedSortedList TypedSortedList

	 ]]></see>
<see><![CDATA[org.as3collections.lists.UniqueSortedList UniqueSortedList

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueSortedList() ListUtil.getUniqueSortedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getTypedSortedList() ListUtil.getTypedSortedList()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.ListUtil#getUniqueTypedSortedList() ListUtil.getUniqueTypedSortedList()

	 ]]></see>
</classRec>
<method name='SortedArrayList' fullname='org.as3collections.lists:SortedArrayList/SortedArrayList' isStatic='false' isFinal='false' isOverride='false'  param_names='source;comparator;options' param_types='Array;org.as3coreaddendum.system:IComparator;uint' param_defaults='null;null;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>SortedArrayList</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		an array to fill the list.

		 ]]></param>
<param><![CDATA[comparator 	the comparator object to be used internally to sort.

		 ]]></param>
<param><![CDATA[options 	the options to be used internally to sort.

		 ]]></param>
</method>
<method name='_sort' fullname='org.as3collections.lists:SortedArrayList/protected:_sort' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addAt' fullname='org.as3collections.lists:SortedArrayList/addAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element at the specified position in this list.

		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).

		 <p>Before returning, the list is reordered, so there's no guarantee that the element remains in the inserted position.</p>

		 

		 ]]></description>
<param><![CDATA[index 		index at which the specified element is to be inserted.

		 ]]></param>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this list changed as a result of the call.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt; size())</code>. 

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.lists:SortedArrayList/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>SortedArrayList</code> object containing all elements in this list (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>SortedArrayList</code> object containing all elements in this list (in the same order).

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.lists:SortedArrayList/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 <li>elements have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the elements in the list.

		 So, for two lists are equal the order of elements returned by the iterator object must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='reverse' fullname='org.as3collections.lists:SortedArrayList/reverse' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 Reverses the list.

		 When this method is called, the list is reversed and an internal status <em>reversed</em> (<code>true</code>/<code>false</code>) is stored.

		 When the list is automatically ordered by any change, if status is <em>reversed</em> = <code>true</code>, the list remains reversed.

		 Thus, after any change it will remain sorted and reversed as it was before the change.

		 A second call to <code>reverse</code> will reverse the list again and change the status to <em>reversed</em> = <code>false</code>.

		 The default value is <code>false</code>.

		 This condition is not used in the user call to <code>sort</code> or <code>sortOn</code> methods (i.e. even if status is <em>reversed</em> = <code>true</code> it will not be used automatically).

		 So if is desirable to reverse the list after directly call <code>sort</code> or <code>sortOn</code> methods, <code>reverse</code> method should be explicitly called after that.

		 ]]></description>
</method>
<method name='setAt' fullname='org.as3collections.lists:SortedArrayList/setAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;element' param_types='int;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Replaces the element at the specified position in this list with the specified element.

		 <p>Before returning, the list is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[index 		index of the element to replace.

		 ]]></param>
<param><![CDATA[element 	element to be stored at the specified position.

		 ]]></param>
<return><![CDATA[the element previously at the specified position.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if the index is out of range <code>(index &lt; 0 || index &gt;= size())</code>.

		 ]]></throws>
</method>
<method name='sortOn' fullname='org.as3collections.lists:SortedArrayList/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()

		 ]]></see>
</method>
<method name='sort' fullname='org.as3collections.lists:SortedArrayList/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Sorts the objects within this class.

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ISortable.html	org.as3coreaddendum.system.ISortable

		 ]]></see>
</method>
<method name='subList' fullname='org.as3collections.lists:SortedArrayList/subList' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex;toIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='org.as3collections:IList'>
<description><![CDATA[

		 Returns a new <code>SortedArrayList</code> that is a view of the portion of this <code>SortedArrayList</code> between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.

		 <p>Modifications in the returned <code>SortedArrayList</code> object doesn't affect this list.</p>

		 

		 ]]></description>
<param><![CDATA[fromIndex 	the index to start retrieving elements (inclusive).

		 ]]></param>
<param><![CDATA[toIndex 	the index to stop retrieving elements (exclusive).

		 ]]></param>
<return><![CDATA[a new <code>SortedArrayList</code> that is a view of the specified range within this list.

		 ]]></return>
<throws><![CDATA[org.as3collections.errors.IndexOutOfBoundsError 		if <code>fromIndex</code> or <code>toIndex</code> is out of range <code>(index &lt; 0 || index &gt; size())</code>.

		 ]]></throws>
</method>
<method name='comparator' fullname='org.as3collections.lists:SortedArrayList/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the comparator object to be used automatically to sort.

		 <p>If this value change the list is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.lists:SortedArrayList/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the options to be used automatically to sort.

		 <p>If this value change the list is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='comparator' fullname='org.as3collections.lists:SortedArrayList/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.lists:SortedArrayList/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<field name='_comparator' fullname='org.as3collections.lists:SortedArrayList/private:_comparator' type='org.as3coreaddendum.system:IComparator' isStatic='false' isConst='false' >
</field>
<field name='_options' fullname='org.as3collections.lists:SortedArrayList/private:_options' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_reversed' fullname='org.as3collections.lists:SortedArrayList/private:_reversed' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='UniqueQueue' fullname='org.as3collections.queues:UniqueQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\UniqueQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections:UniqueCollection' interfaces='org.as3collections:IQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>UniqueQueue</code> works as a wrapper for a queue.

	 It does not allow duplicated elements in the queue.

	 It stores the <code>wrapQueue</code> constructor's argument in the <code>wrappedQueue</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedQueue</code> object.

	 The methods that need to be checked for duplication are previously validated before forward the call.

	 The calls that are forwarded to the <code>wrappedQueue</code> returns the return of the <code>wrappedQueue</code> call.

	 <p>You can also create unique and typed queues. See below the link "QueueUtil.getUniqueTypedQueue()".</p>
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IQueue;

	 import org.as3collections.queues.LinearQueue;

	 import org.as3collections.queues.UniqueQueue;

	 import org.as3collections.utils.QueueUtil;

	 

	 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);

	 

	 var queue1:IQueue = new UniqueQueue(q1); // you can use this way

	 

	 //var queue1:IQueue = QueueUtil.getUniqueQueue(q1); // or you can use this way

	 

	 queue1                      // [1,5,3,7]

	 queue1.size()               // 4

	 queue1.isEmpty()            // false

	 

	 queue1.poll()               // 1

	 queue1                      // [5,3,7]

	 

	 queue1.offer(2)             // true

	 queue1                      // [5,3,7,2]

	 

	 queue1.offer(5)             // false

	 queue1                      // [5,3,7,2]

	 

	 queue1.add(5)               // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.QueueUtil#getUniqueQueue() QueueUtil.getUniqueQueue()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.QueueUtil#getUniqueTypedQueue() QueueUtil.getUniqueTypedQueue()
	 ]]></see>
</classRec>
<method name='UniqueQueue' fullname='org.as3collections.queues:UniqueQueue/UniqueQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapQueue' param_types='org.as3collections:IQueue' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>UniqueQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapQueue 	the target queue to wrap.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapQueue</code> argument is <code>null</code>.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections.queues:UniqueQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 This method differs from <code>offer</code> only in that it throws an error if the element cannot be inserted.

		 <p>This implementation returns the result of <code>offer</code> unless the element cannot be inserted.</p>

		 <p>If <code>wrappedQueue.contains(element)</code> returns <code>true</code> an <code>IllegalOperationError</code> is thrown.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to be added.

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the class of the specified element prevents it from being added to this queue.

		 ]]></throws>
<throws><![CDATA[flash.errors.IllegalOperationError  			if <code>wrappedQueue.contains(element)</code> returns <code>true</code>.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.queues:UniqueQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>UniqueQueue</code> object with the clone of the <code>wrappedQueue</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>UniqueQueue</code> object with the clone of the <code>wrappedQueue</code> object.

 		 ]]></return>
</method>
<method name='dequeue' fullname='org.as3collections.queues:UniqueQueue/dequeue' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.dequeue</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.dequeue</code>.

		 ]]></return>
</method>
<method name='element' fullname='org.as3collections.queues:UniqueQueue/element' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.element</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.element</code>.

		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.queues:UniqueQueue/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this list and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='offer' fullname='org.as3collections.queues:UniqueQueue/offer' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 If <code>wrappedQueue.contains(element)</code> returns <code>true</code> then returns <code>false</code>.

		 Otherwise, it forwards the call to <code>wrappedQueue.offer</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to forward to <code>wrappedQueue.offer</code>.

		 ]]></param>
<return><![CDATA[<code>false</code> if <code>wrappedQueue.contains(element)</code> returns <code>true</code>. Otherwise returns the return of the call <code>wrappedQueue.offer</code>.
		 ]]></return>
</method>
<method name='peek' fullname='org.as3collections.queues:UniqueQueue/peek' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.peek</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.peek</code>.

		 ]]></return>
</method>
<method name='poll' fullname='org.as3collections.queues:UniqueQueue/poll' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.poll</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.poll</code>.

		 ]]></return>
</method>
<method name='wrappedQueue' fullname='org.as3collections.queues:UniqueQueue/protected:wrappedQueue/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IQueue'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='TypedQueue' fullname='org.as3collections.queues:TypedQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\TypedQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections:TypedCollection' interfaces='org.as3collections:IQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>TypedQueue</code> works as a wrapper for a queue.

	 Since ActionScript 3.0 does not support typed arrays, <code>TypedQueue</code> is a way to create typed queues.

	 It stores the <code>wrapQueue</code> constructor's argument in the <code>wrappedQueue</code> variable.

	 So every method call to this class is forwarded to the <code>wrappedQueue</code> object.

	 The methods that need to be checked for the type of the elements are previously validated with the <code>validateType</code> or <code>validateCollection</code> method before forward the call.

	 If the type of an element requested to be added to this list is incompatible with the type of the list, the method <code>offer</code> returns <code>false</code> and the method <code>add</code> throws <code>org.as3coreaddendum.errors.ClassCastError</code>.

	 The calls that are forwarded to the <code>wrappedQueue</code> returns the return of the <code>wrappedQueue</code> call.

	 <p><code>TypedQueue</code> does not allow <code>null</code> elements.</p>

	 <p>You can also create unique and typed queues. See below the link "QueueUtil.getUniqueTypedQueue()".</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.IQueue;

	 import org.as3collections.queues.LinearQueue;

	 import org.as3collections.queues.TypedQueue;

	 import org.as3collections.utils.QueueUtil;

	 

	 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);

	 

	 var queue1:IQueue = new TypedQueue(q1, int); // you can use this way

	 

	 //var queue1:IQueue = QueueUtil.getTypedQueue(q1); // or you can use this way

	 

	 queue1                      // [1,5,3,7]

	 queue1.size():              // 4

	 queue1.isEmpty()            // false

	 

	 queue1.poll()               // 1

	 queue1                      // [5,3,7]

	 

	 queue1.offer(2)             // true

	 queue1                      // [5,3,7,2]

	 

	 queue1.offer(5)             // true

	 queue1                      // [5,3,7,2,5]

	 

	 queue1.offer("a")           // false

	 queue1                      // [5,3,7,2,5]

	 

	 queue1.add("a")             // ClassCastError: Invalid element type. element: a | type: String | expected type: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[org.as3collections.utils.QueueUtil#getTypedQueue() QueueUtil.getTypedQueue()

	 ]]></see>
<see><![CDATA[org.as3collections.utils.QueueUtil#getUniqueTypedQueue() QueueUtil.getUniqueTypedQueue()

	 ]]></see>
</classRec>
<method name='TypedQueue' fullname='org.as3collections.queues:TypedQueue/TypedQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='wrapQueue;type' param_types='org.as3collections:IQueue;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>TypedQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[wrapQueue 	the target queue to wrap.

		 ]]></param>
<param><![CDATA[type 		the type of the elements allowed by this queue.

		 ]]></param>
<throws><![CDATA[ArgumentError  	if the <code>wrapQueue</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[ArgumentError  	if the <code>type</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the types of one or more elements in the <code>wrapQueue</code> argument are incompatible with the <code>type</code> argument.

		 ]]></throws>
</method>
<method name='add' fullname='org.as3collections.queues:TypedQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 If the <code>element</code> argument is <code>null</code> throws <code>ArgumentError</code>.

		 Otherwise the element is validated with the <code>validateType</code> method to be forwarded to <code>wrappedCollection.add</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to forward to <code>wrappedCollection.add</code>.

		 ]]></param>
<return><![CDATA[the return of the call <code>wrappedCollection.add</code>.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the <code>element</code> argument is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the type of the element is incompatible with the type of this collection.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.queues:TypedQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>TypedQueue</code> object with the clone of the <code>wrappedQueue</code> object.

		 

		 ]]></description>
<return><![CDATA[a new <code>TypedQueue</code> object with the clone of the <code>wrappedQueue</code> object.

 		 ]]></return>
</method>
<method name='dequeue' fullname='org.as3collections.queues:TypedQueue/dequeue' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.dequeue</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.dequeue</code>.

		 ]]></return>
</method>
<method name='element' fullname='org.as3collections.queues:TypedQueue/element' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.element</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.element</code>.

		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.queues:TypedQueue/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 This method first checks if <code>other</code> argument is a <code>TypedQueue</code>.

		 If not it returns <code>false</code>. If <code>true</code> it checks the <code>type</code> property of both queues.

		 If they are different it returns <code>false</code>.

		 Otherwise it uses <code>CollectionUtil.equalConsideringOrder</code> method to perform equality, sending this queue and <code>other</code> argument.

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
<see><![CDATA[org.as3collections.utils.CollectionUtil#equalConsideringOrder() CollectionUtil.equalConsideringOrder()

		 ]]></see>
</method>
<method name='offer' fullname='org.as3collections.queues:TypedQueue/offer' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 If <code>isValidType(element)</code> returns <code>false</code> then returns <code>false</code>.

		 Otherwise, it forwards the call to <code>wrappedQueue.offer</code>.

		 

		 ]]></description>
<param><![CDATA[element 	the element to forward to <code>wrappedQueue.offer</code>.

		 ]]></param>
<return><![CDATA[<code>false</code> if <code>isValidType(element)</code> returns <code>false</code>. Otherwise returns the return of the call <code>wrappedQueue.offer</code>.

		 ]]></return>
</method>
<method name='peek' fullname='org.as3collections.queues:TypedQueue/peek' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.peek</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.peek</code>.

		 ]]></return>
</method>
<method name='poll' fullname='org.as3collections.queues:TypedQueue/poll' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Forwards the call to <code>wrappedQueue.poll</code>.

		 

		 ]]></description>
<return><![CDATA[the return of the call <code>wrappedQueue.poll</code>.

		 ]]></return>
</method>
<method name='wrappedQueue' fullname='org.as3collections.queues:TypedQueue/protected:wrappedQueue/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3collections:IQueue'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='LinearQueue' fullname='org.as3collections.queues:LinearQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\LinearQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections:AbstractQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 <code>LinearQueue</code> orders elements in a FIFO (first-in-first-out) manner.

	 <p><code>LinearQueue</code> does not allow <code>null</code> elements.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <b>Example 1</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IQueue;

	 import org.as3collections.queues.LinearQueue;

	 

	 var queue:IQueue = new LinearQueue();

	 

	 queue                       // []

	 queue.size()                // 0

	 queue.isEmpty()             // true

	 

	 queue.peek()                // null

	 queue.element()             // NoSuchElementError: The queue is empty.

	 

	 queue.offer(3)              // true

	 queue                       // [3]

	 queue.size()                // 1

	 queue.isEmpty()             // false

	 

	 queue.offer("a")            // true

	 queue                       // [3,a]

	 

	 queue.offer(1)              // true

	 queue                       // [3,a,1]

	 

	 queue.offer(7)              // true

	 queue                       // [3,a,1,7]

	 

	 queue.offer(null)           // false

	 queue.add(null)             // ArgumentError: The 'element' argument must not be 'null'.

	 queue                       // [3,a,1,7]

	 

	 queue.peek()                // 3

	 queue.element()             // 3

	 queue:                      // [3,a,1,7]

	 

	 queue.poll()                // 3

	 queue                       // [a,1,7]

	 

	 queue.dequeue()             // a

	 queue                       // [1,7]

	 

	 queue.remove(10)            // false

	 queue                       // [1,7]

	 

	 queue.remove(7)             // true

	 queue                       // [1]

	 

	 queue.clear()

	 queue                       // []

	 queue.size()                // 0

	 queue.isEmpty()             // true

	 

	 queue.poll()                // null

	 queue.dequeue()             // NoSuchElementError: The queue is empty.

	 </listing>

	 

	 <b>Example 2</b>

	 

	 <listing version="3.0">

	 import org.as3collections.IQueue;

	 import org.as3collections.queues.LinearQueue;

	 

	 var queue1:IQueue = new LinearQueue([1, 5, 3, 7]);

	 

	 queue1                      // [1,5,3,7]

	 queue1.size()               // 4

	 queue1.isEmpty()            // false

	 

	 var queue2:IQueue = queue1.clone();

	 

	 queue2                      // [1,5,3,7]

	 queue2.size()               // 4

	 queue2.isEmpty()            // false

	 

	 queue2.equals(queue1)       // true

	 queue1.equals(queue2)       // true

	 

	 queue2.poll()               // 1

	 queue2                      // [5,3,7]

	 

	 queue2.equals(queue1)       // false

	 queue1.equals(queue2)       // false

	 queue2.equals(queue2)       // true

	 

	 queue1.clear()

	 queue1                      // []

	 

	 queue2.clear()

	 queue2:                     // []

	 

	 queue2.equals(queue1)       // true

	 </listing>

	 

	 ]]></example>
</classRec>
<method name='LinearQueue' fullname='org.as3collections.queues:LinearQueue/LinearQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>LinearQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 	an array to fill the queue.

		 ]]></param>
</method>
<method name='clear' fullname='org.as3collections.queues:LinearQueue/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 Removes all of the elements from this queue. The queue will be empty after this method returns.

		 ]]></description>
</method>
<method name='clone' fullname='org.as3collections.queues:LinearQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>LinearQueue</code> object containing all elements in this queue (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>LinearQueue</code> object containing all elements in this queue (in the same order).

 		 ]]></return>
</method>
<method name='iterator' fullname='org.as3collections.queues:LinearQueue/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3collections:IIterator'>
<description><![CDATA[

		 Returns an iterator over a set of elements.

		 <p>This implementation returns an <code>ArrayIterator</code> object.</p>

		 

		 ]]></description>
<return><![CDATA[an iterator over a set of elements.

		 ]]></return>
<see><![CDATA[org.as3collections.iterators.ArrayIterator ArrayIterator

 		 ]]></see>
</method>
<method name='offer' fullname='org.as3collections.queues:LinearQueue/offer' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>This implementation adds the element to the tail of the queue.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
</method>
<method name='peek' fullname='org.as3collections.queues:LinearQueue/peek' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty. 

		 

		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.

 		 ]]></return>
</method>
<method name='poll' fullname='org.as3collections.queues:LinearQueue/poll' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty. 

		 

		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.

 		 ]]></return>
</method>
<classRec name='SortedQueue' fullname='org.as3collections.queues:SortedQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\SortedQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections.queues:LinearQueue' interfaces='org.as3collections:ISortedQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A queue that provides a <em>total ordering</em> on its elements.

	 The queue is ordered according to the <em>natural ordering</em> of its elements, by a <em>IComparator</em> typically provided at sorted queue creation time, or by the arguments provided to the <code>sort</code> or <code>sortOn</code> methods.

	 <p>For each change that occurs the queue is automatically ordered using the <code>comparator</code> and <code>options</code>.

	 If none was provided the default behavior of the <code>sort</code> method is used.</p>

	 <p>The user of this queue may change their order at any time by calling the <code>sort</code> or <code>sortOn</code> method and imposing others arguments to change the sort behaviour.</p>

	 <p>It's possible to create unique sorted queues, typed sorted queues and even unique typed sorted queues.

	 You just sends the <code>SortedQueue</code> object to the wrappers <code>UniqueQueue</code> or <code>TypedQueue</code> or uses the <code>QueueUtil.getUniqueTypedQueue</code>.

	 But there's a problem here: the return type will be <code>UniqueQueue</code> or <code>TypedQueue</code>.

	 Thus you will can no longer use the <code>sort</code> and <code>sortOn</code> methods directly.

	 The wrapped <code>SortedQueue</code> will be only automatically ordered, with the provided <code>comparator</code> and <code>options</code> constructor's arguments.

	 Check the examples at the bottom of the page.</p>
	 

	 ]]></description>
<author><![CDATA[Flávio Silva
	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 import org.as3collections.ISortedQueue;

	 import org.as3collections.queues.SortedQueue;

	 

	 var queue1:ISortedQueue = new SortedQueue([3, 5, 1, 7], null, Array.NUMERIC | Array.DESCENDING);

	 

	 queue1                      // [7,5,3,1]

	 queue1.size()               // 4

	 

	 queue1.add(-1)              // true

	 queue1                      // [7,5,3,1,-1]

	 queue1.size()               // 5

	 

	 queue1.add(4)               // true

	 queue1                      // [7,5,4,3,1,-1]

	 queue1.size()               // 6

	 

	 queue1.add(5)               // true

	 queue1                      // [7,5,5,4,3,1,-1]

	 queue1.size()               // 7

	 

	 queue1.poll()               // 7

	 queue1                      // [5,5,4,3,1,-1]

	 queue1.size()               // 6

	 

	 queue1.sort(null, Array.NUMERIC)

	 queue1                      // [-1,1,3,4,5,5]

	 

	 queue1.poll()               // -1

	 queue1                      // [5,5,4,3,1]

	 queue1.size()               // 5

	 

	 queue1.add(2)               // true

	 queue1                      // [5,5,4,3,2,1]

	 queue1.size()               // 6

	 

	 queue1.add(10)              // true

	 queue1                      // [10,5,5,4,3,2,1]

	 </listing>

	 
	 ]]></example>
</classRec>
<method name='SortedQueue' fullname='org.as3collections.queues:SortedQueue/SortedQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source;comparator;options' param_types='Array;org.as3coreaddendum.system:IComparator;uint' param_defaults='null;null;0' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>SortedQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		an array to fill the queue.

		 ]]></param>
<param><![CDATA[comparator 	the comparator object to be used internally to sort.

		 ]]></param>
<param><![CDATA[options 	the options to be used internally to sort.

		 ]]></param>
</method>
<method name='_sort' fullname='org.as3collections.queues:SortedQueue/protected:_sort' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clone' fullname='org.as3collections.queues:SortedQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>SortedQueue</code> object containing all elements in this queue (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>SortedQueue</code> object containing all elements in this queue (in the same order).

 		 ]]></return>
</method>
<method name='equals' fullname='org.as3collections.queues:SortedQueue/equals' isStatic='false' isFinal='false' isOverride='true'  param_names='other' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Performs an arbitrary, specific evaluation of equality between this object and the <code>other</code> object.

		 <p>This implementation considers two differente objects equal if:</p>

		 <p>

		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>

		 <li>object A contains all elements of object B</li>

		 <li>object B contains all elements of object A</li>

		 <li>elements have exactly the same order</li>

		 <li>object A and object B has the same type of comparator</li>

		 <li>object A and object B has the same options</li>

		 </ul></p>

		 <p>This implementation takes care of the order of the elements in the queue.

		 So, for two queues are equal the order of elements returned by the iterator object must be equal.</p>

		 

		 ]]></description>
<param><![CDATA[other 	the object to be compared for equality.

		 ]]></param>
<return><![CDATA[<code>true</code> if the arbitrary evaluation considers the objects equal.

		 ]]></return>
</method>
<method name='offer' fullname='org.as3collections.queues:SortedQueue/offer' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
</method>
<method name='poll' fullname='org.as3collections.queues:SortedQueue/poll' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty. 

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<return><![CDATA[the head of this queue, or <code>null</code> if this queue is empty.

 		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3collections.queues:SortedQueue/removeAll' isStatic='false' isFinal='false' isOverride='true'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes all of this queue's elements that are also contained in the specified collection. After this call returns, this queue will contain no elements in common with the specified collection.

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[collection 	the collection containing elements to be removed from this queue.

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
</method>
<method name='remove' fullname='org.as3collections.queues:SortedQueue/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Removes a single instance (only one occurrence) of the specified object from this queue, if it is present.

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[o 	the object to be removed from this collection, if present.

		 ]]></param>
<return><![CDATA[<code>true</code> if an object was removed as a result of this call.

		 ]]></return>
</method>
<method name='sortOn' fullname='org.as3collections.queues:SortedQueue/sortOn' isStatic='false' isFinal='false' isOverride='false'  param_names='fieldName;options' param_types='*;*' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[

		 

		 Sorts the elements in an array according to one or more fields in the array.

		 <p>Consult <code>Array.sortOn</code> in the ActionScript 3.0 Language Reference in the link below for more info.</p>

		 

		 ]]></description>
<param><![CDATA[fieldName

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()

		 ]]></see>
</method>
<method name='sort' fullname='org.as3collections.queues:SortedQueue/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='compare;options' param_types='Function;uint' param_defaults='null;0' result_type='Array'>
<description><![CDATA[

		 Sorts the objects within this class.

		 <p>For more info see <code>org.as3coreaddendum.system.ISortable.sort()</code> in the link below.</p>

		 

		 ]]></description>
<param><![CDATA[compare

		 ]]></param>
<param><![CDATA[options

		 ]]></param>
<return><![CDATA[
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3collections.queues:SortedQueue/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3coreaddendum.system:IComparator'>
<description><![CDATA[

		 Defines the comparator object to be used automatically to sort.

		 <p>If this value change the queue is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.queues:SortedQueue/options/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Defines the options to be used automatically to sort.

		 <p>If this value change the queue is automatically reordered with the new value.</p>

		 ]]></description>
</method>
<method name='comparator' fullname='org.as3collections.queues:SortedQueue/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
</method>
<method name='options' fullname='org.as3collections.queues:SortedQueue/options/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<field name='_comparator' fullname='org.as3collections.queues:SortedQueue/private:_comparator' type='org.as3coreaddendum.system:IComparator' isStatic='false' isConst='false' >
</field>
<field name='_options' fullname='org.as3collections.queues:SortedQueue/private:_options' type='uint' isStatic='false' isConst='false' >
</field>
<classRec name='PriorityIndexQueue' fullname='org.as3collections.queues:PriorityIndexQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\PriorityIndexQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections.queues:SortedQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This queue uses an <code>org.as3coreaddendum.system.comparators.PriorityIndexComparator</code> object to sort the elements.

	 All elements must implement the <code>org.as3coreaddendum.system.IPriority</code> and <code>org.as3coreaddendum.system.IIndexable</code> interfaces, otherwise a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 <p>This queue is useful when you want to sort the objects by priority, but if the priority of two objects are equal, the <code>index</code> property of the objects are compared to decide wich object comes before.</p>

	 <p>This queue also adds an event listener on elements to <code>org.as3coreaddendum.events.PriorityEvent</code> and <code>org.as3coreaddendum.events.IndexEvent</code> (if elements implement <code>flash.events.IEventDispatcher</code>).

	 Thus this queue keeps itself automatically sorted if its elements dispatch a <code>org.as3coreaddendum.events.PriorityEvent</code> or <code>org.as3coreaddendum.events.IndexEvent</code> when its priority or index changes.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 package test

	 {

	     import org.as3coreaddendum.system.IIndexable;

	     import org.as3coreaddendum.system.IPriority;

	 

	     public class TestIndexablePriority implements IIndexable, IPriority

	     {

	         private var _index:int;

	         private var _name:String;

	         private var _priority:int;

	 

	 

	         public function get priority(): int { return _priority; }

	 

	         public function set priority(value:int): void { _priority = value; }

	 

	         public function get index(): int { return _index; }

	 

	         public function set index(value:int): void { _index = value; }

	 

	         public function TestIndexablePriority(name:String, priority:int, index:int)

	         {

	             _name = name;

	             _priority = priority;

	             _index = index;

	         }

	 

	         public function toString(): String

	         {

	             return "[TestIndexablePriority " + _name + "]";

	         }

	     }

	 }

	 </listing>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedQueue;

	 import org.as3collections.queues.IndexablePriorityQueue;

	 import test.TestIndexablePriority;

	 

	 var queue1:ISortedQueue = new IndexablePriorityQueue();

	 

	 var o1:TestIndexablePriority = new TestIndexablePriority("o1", 1, 0);

	 var o2:TestIndexablePriority = new TestIndexablePriority("o2", 2, 1);

	 var o3:TestIndexablePriority = new TestIndexablePriority("o3", 2, 2);

	 var o4:TestIndexablePriority = new TestIndexablePriority("o4", 4, 3);

	 

	 queue1.offer(o2)            // true

	 queue1                      // [[TestIndexablePriority o2]]

	 queue1.size()               // 1

	 

	 queue1.offer(o3)            // true

	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o3]]

	 queue1.size()               // 2

	 

	 queue1.offer(o2)            // true

	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3]]

	 

	 queue1.offer(o1)            // true

	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]

	 

	 queue1.offer(o4)            // true

	 queue1                      // [[TestIndexablePriority o4],[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]

	 

	 queue1.offer(1)             // false

	 queue1                      // [[TestIndexablePriority o4],[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]

	 

	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IPriority' interface. Type received: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IPriority.html	org.as3coreaddendum.system.IPriority

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IIndexable.html	org.as3coreaddendum.system.IIndexable

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/events/PriorityEvent.html	org.as3coreaddendum.events.PriorityEvent

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/events/IndexEvent.html	org.as3coreaddendum.events.IndexEvent

	 ]]></see>
</classRec>
<method name='PriorityIndexQueue' fullname='org.as3collections.queues:PriorityIndexQueue/PriorityIndexQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Constructor, creates a new <code>IndexablePriorityQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		an array to fill the queue.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if one or more elements in the <code>source</code> argument do not implement the <code>org.as3coreaddendum.system.IPriority</code> and <code>org.as3coreaddendum.system.IIndexable</code> interfaces.

		 ]]></throws>
</method>
<method name='addPriorityIndexEventListenerToElement' fullname='org.as3collections.queues:PriorityIndexQueue/private:addPriorityIndexEventListenerToElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3collections.queues:PriorityIndexQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 This method differs from <code>offer</code> only in that it throws an error if the element cannot be inserted.

		 <p>This implementation returns the result of <code>offer</code> unless the element cannot be inserted.</p>

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IPriority</code> and <code>org.as3coreaddendum.system.IIndexable</code> interfaces.

		 A <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown if the element does not implements this interfaces.</p>

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the element does not implements the <code>org.as3coreaddendum.system.IPriority</code> or <code>org.as3coreaddendum.system.IIndexable</code> interfaces.

		 ]]></throws>
<throws><![CDATA[flash.errors.IllegalOperationError  			if the specified element cannot be inserted.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.queues:PriorityIndexQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>IndexablePriorityQueue</code> object containing all elements in this queue (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>IndexablePriorityQueue</code> object containing all elements in this queue (in the same order).

 		 ]]></return>
</method>
<method name='elementAdded' fullname='org.as3collections.queues:PriorityIndexQueue/protected:elementAdded' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementPriorityIndexChanged' fullname='org.as3collections.queues:PriorityIndexQueue/private:elementPriorityIndexChanged' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementRemoved' fullname='org.as3collections.queues:PriorityIndexQueue/protected:elementRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getInvalidElementError' fullname='org.as3collections.queues:PriorityIndexQueue/private:getInvalidElementError' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isValidElement' fullname='org.as3collections.queues:PriorityIndexQueue/protected:isValidElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='offer' fullname='org.as3collections.queues:PriorityIndexQueue/offer' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IPriority</code> and <code>org.as3coreaddendum.system.IIndexable</code> interfaces.

		 If the element does not implements this interfaces the method returns <code>false</code>.</p>

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
</method>
<method name='removePriorityIndexEventListenerFromElement' fullname='org.as3collections.queues:PriorityIndexQueue/private:removePriorityIndexEventListenerFromElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateCollection' fullname='org.as3collections.queues:PriorityIndexQueue/protected:validateCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateElement' fullname='org.as3collections.queues:PriorityIndexQueue/protected:validateElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.queues:PriorityIndexQueue/comparator/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>IndexablePriorityQueue</code> does not allow changing its <code>comparator</code> object.

		 <p><code>IndexablePriorityQueue</code> was designed to be used exclusively with its default comparator object.

		 If you want to change the comparator object using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.queues:PriorityIndexQueue/options/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>IndexablePriorityQueue</code> does not allow changing its options.

		 <p><code>IndexablePriorityQueue</code> was designed to be used exclusively with its default options.

		 If you want to change the options using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
<classRec name='PriorityQueue' fullname='org.as3collections.queues:PriorityQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\PriorityQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections.queues:SortedQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This queue uses a <code>org.as3coreaddendum.system.comparators.PriorityComparator</code> object to sort the elements.

	 All elements must implement the <code>org.as3coreaddendum.system.IPriority</code> interface, otherwise a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 <p>This queue also adds an event listener on elements to <code>org.as3coreaddendum.events.PriorityEvent</code> (if elements implement <code>flash.events.IEventDispatcher</code>).

	 Thus this queue keeps itself automatically sorted if its elements dispatch a <code>org.as3coreaddendum.events.PriorityEvent</code> when its priority changes.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 package test

	 {

	     import org.as3coreaddendum.system.IPriority;

	 

	     public class TestPriority extends EventDispatcher implements IPriority

	     {

	         private var _name:String;

	         private var _priority:int;

	 

	         public function get priority(): int { return _priority; }

	 

	         public function set priority(value : int) : void

	         {

	             _priority = value;

	             dispatchEvent(new PriorityEvent(PriorityEvent.CHANGED, _priority));

	         }

	 

	         public function TestPriority(name:String, priority:int)

	         {

	             _name = name;

	             _priority = priority;

	         }

	 

	         public function toString(): String

	         {

	             return "[TestPriority " + _name + "]";

	         }

	     }

	 }

	 </listing>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedQueue;

	 import org.as3collections.queues.PriorityQueue;

	 import test.TestPriority;

	 

	 var queue1:ISortedQueue = new PriorityQueue();

	 

	 var o1:TestPriority = new TestPriority("o1", 1);

	 var o2:TestPriority = new TestPriority("o2", 2);

	 var o3:TestPriority = new TestPriority("o3", 3);

	 var o4:TestPriority = new TestPriority("o4", 4);

	 

	 queue1.offer(o2)            // true

	 queue1                      // [[TestPriority o2]]

	 queue1.size()               // 1

	 

	 queue1.offer(o3)            // true

	 queue1                      // [[TestPriority o3],[TestPriority o2]]

	 queue1.size()               // 2

	 

	 queue1.offer(o2)            // true

	 queue1                      // [[TestPriority o3],[TestPriority o2],[TestPriority o2]]

	 

	 queue1.offer(o1)            // true

	 queue1                      // [[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]

	 

	 queue1.offer(o4)            // true

	 queue1                      // [[TestPriority o4],[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]

	 

	 queue1.offer(1)             // false

	 queue1                      // [[TestPriority o4],[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]

	 

	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IPriority' interface. Type received: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IPriority.html	org.as3coreaddendum.system.IPriority

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/events/PriorityEvent.html	org.as3coreaddendum.events.PriorityEvent

	 ]]></see>
</classRec>
<method name='PriorityQueue' fullname='org.as3collections.queues:PriorityQueue/PriorityQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='void'>
<description><![CDATA[

		 Constructor, creates a new <code>PriorityQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		an array to fill the queue.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if one or more elements in the <code>source</code> argument do not implement the <code>org.as3coreaddendum.system.IPriority</code> interface.

		 ]]></throws>
</method>
<method name='addPriorityEventListenerToElement' fullname='org.as3collections.queues:PriorityQueue/private:addPriorityEventListenerToElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3collections.queues:PriorityQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 This method differs from <code>offer</code> only in that it throws an error if the element cannot be inserted.

		 <p>This implementation returns the result of <code>offer</code> unless the element cannot be inserted.</p>

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IPriority</code> interface.

		 A <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown if the element does not implements this interface.</p>

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the element does not implements the <code>org.as3coreaddendum.system.IPriority</code> interface.

		 ]]></throws>
<throws><![CDATA[flash.errors.IllegalOperationError  			if the specified element cannot be inserted.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.queues:PriorityQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>PriorityQueue</code> object containing all elements in this queue (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>PriorityQueue</code> object containing all elements in this queue (in the same order).

 		 ]]></return>
</method>
<method name='elementAdded' fullname='org.as3collections.queues:PriorityQueue/protected:elementAdded' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementPriorityChanged' fullname='org.as3collections.queues:PriorityQueue/private:elementPriorityChanged' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='org.as3coreaddendum.events:PriorityEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementRemoved' fullname='org.as3collections.queues:PriorityQueue/protected:elementRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getInvalidElementError' fullname='org.as3collections.queues:PriorityQueue/private:getInvalidElementError' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isValidElement' fullname='org.as3collections.queues:PriorityQueue/protected:isValidElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='offer' fullname='org.as3collections.queues:PriorityQueue/offer' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IPriority</code> interface.

		 If the element does not implements this interface the method returns <code>false</code>.</p>

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
</method>
<method name='removePriorityEventListenerFromElement' fullname='org.as3collections.queues:PriorityQueue/private:removePriorityEventListenerFromElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateCollection' fullname='org.as3collections.queues:PriorityQueue/protected:validateCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateElement' fullname='org.as3collections.queues:PriorityQueue/protected:validateElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.queues:PriorityQueue/comparator/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>PriorityQueue</code> does not allow changing its <code>comparator</code> object.

		 <p><code>PriorityQueue</code> was designed to be used exclusively with its default comparator object.

		 If you want to change the comparator object using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.queues:PriorityQueue/options/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>PriorityQueue</code> does not allow changing its options.

		 <p><code>PriorityQueue</code> was designed to be used exclusively with its default options.

		 If you want to change the options using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
<classRec name='IndexQueue' fullname='org.as3collections.queues:IndexQueue' sourcefile='D:\Flavio\Programacao\Flash-Platform\Framework\as3collections\src\main\as3\org\as3collections\queues\IndexQueue.as' namespace='org.as3collections.queues' access='public' baseclass='org.as3collections.queues:SortedQueue' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 This queue uses a <code>org.as3coreaddendum.system.comparators.IndexComparator</code> object to sort the elements.

	 All elements must implement the <code>org.as3coreaddendum.system.IIndexable</code> interface, otherwise a <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown.

	 <p>This queue also adds an event listener on elements to <code>org.as3coreaddendum.events.IndexEvent</code> (if elements implement <code>flash.events.IEventDispatcher</code>).

	 Thus this queue keeps itself automatically sorted if its elements dispatch a <code>org.as3coreaddendum.events.IndexEvent</code> when its index changes.</p>

	 

	 ]]></description>
<author><![CDATA[Flávio Silva

	 ]]></author>
<example><![CDATA[
	 

	 <listing version="3.0">

	 package test

	 {

	     import org.as3coreaddendum.system.IIndexable;

	 

	     public class TestIndex extends EventDispatcher implements IIndexable

	     {

	         private var _name:String;

	         private var _index:int;

	 

	         public function get index(): int { return _index; }

	 

	         public function set index(value : int) : void

	         {

	             _index = value;

	             dispatchEvent(new IndexEvent(IndexEvent.CHANGED, _index));

	         }

	 

	         public function TestIndex(name:String, index:int)

	         {

	             _name = name;

	             _index = index;

	         }

	 

	         public function toString(): String

	         {

	             return "[TestIndex " + _name + "]";

	         }

	     }

	 }

	 </listing>

	 

	 <listing version="3.0">

	 import org.as3collections.ISortedQueue;

	 import org.as3collections.queues.IndexQueue;

	 import test.TestIndex;

	 

	 var queue1:ISortedQueue = new IndexQueue();

	 

	 var o0:TestIndex = new TestIndex("o0", 0);

	 var o1:TestIndex = new TestIndex("o1", 1);

	 var o2:TestIndex = new TestIndex("o2", 2);

	 var o3:TestIndex = new TestIndex("o3", 3);

	 

	 queue1.offer(o1)            // true

	 queue1                      // [[TestIndex o1]]

	 queue1.size()               // 1

	 

	 queue1.offer(o2)            // true

	 queue1                      // [[TestIndex o1],[TestIndex o2]]

	 queue1.size()               // 2

	 

	 queue1.offer(o1)            // true

	 queue1                      // [[TestIndex o1],[TestIndex o1],[TestIndex o2]]

	 

	 queue1.offer(o0)            // true

	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2]]

	 

	 queue1.offer(o3)            // true

	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2],[TestIndex o3]]

	 

	 queue1.offer(1)             // false

	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2],[TestIndex o3]]

	 

	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IIndexable' interface. Type received: int

	 </listing>

	 

	 ]]></example>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IIndexable.html	org.as3coreaddendum.system.IIndexable

	 ]]></see>
<see><![CDATA[http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/events/IndexEvent.html	org.as3coreaddendum.events.IndexEvent

	 ]]></see>
</classRec>
<method name='IndexQueue' fullname='org.as3collections.queues:IndexQueue/IndexQueue' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Array' param_defaults='null' result_type='void'>
<description><![CDATA[

		 Constructor, creates a new <code>IndexQueue</code> object.

		 

		 ]]></description>
<param><![CDATA[source 		an array to fill the queue.

		 ]]></param>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if one or more elements in the <code>source</code> argument do not implement the <code>org.as3coreaddendum.system.IIndexable</code> interface.

		 ]]></throws>
</method>
<method name='addIndexEventListenerToElement' fullname='org.as3collections.queues:IndexQueue/private:addIndexEventListenerToElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3collections.queues:IndexQueue/add' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 This method differs from <code>offer</code> only in that it throws an error if the element cannot be inserted.

		 <p>This implementation returns the result of <code>offer</code> unless the element cannot be inserted.</p>

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IIndexable</code> interface.

		 A <code>org.as3coreaddendum.errors.ClassCastError</code> is thrown if the element does not implements this interface.</p>

		 

		 ]]></description>
<param><![CDATA[element

		 ]]></param>
<return><![CDATA[<code>true</code> if this queue changed as a result of the call.

		 ]]></return>
<throws><![CDATA[ArgumentError  	if the specified element is <code>null</code>.

		 ]]></throws>
<throws><![CDATA[org.as3coreaddendum.errors.ClassCastError  		if the element does not implements the <code>org.as3coreaddendum.system.IIndexable</code> interface.

		 ]]></throws>
<throws><![CDATA[flash.errors.IllegalOperationError  			if the specified element cannot be inserted.

		 ]]></throws>
</method>
<method name='clone' fullname='org.as3collections.queues:IndexQueue/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[

		 Creates and return a new <code>IndexQueue</code> object containing all elements in this queue (in the same order).

		 

		 ]]></description>
<return><![CDATA[a new <code>IndexQueue</code> object containing all elements in this queue (in the same order).

 		 ]]></return>
</method>
<method name='elementAdded' fullname='org.as3collections.queues:IndexQueue/protected:elementAdded' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementIndexChanged' fullname='org.as3collections.queues:IndexQueue/private:elementIndexChanged' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='org.as3coreaddendum.events:IndexEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='elementRemoved' fullname='org.as3collections.queues:IndexQueue/protected:elementRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getInvalidElementError' fullname='org.as3collections.queues:IndexQueue/private:getInvalidElementError' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='org.as3coreaddendum.errors:ClassCastError'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isValidElement' fullname='org.as3collections.queues:IndexQueue/protected:isValidElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='offer' fullname='org.as3collections.queues:IndexQueue/offer' isStatic='false' isFinal='false' isOverride='true'  param_names='element' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.

		 When using a restricted queue (like <code>TypedQueue</code> and <code>UniqueQueue</code>), this method is generally preferable to <code>add</code>, which can fail to insert an element only by throwing an error. 

		 <p>This implementation only allow elements that implements the <code>org.as3coreaddendum.system.IIndexable</code> interface.

		 If the element does not implements this interface the method returns <code>false</code>.</p>

		 <p>Before returning, the queue is reordered.</p>

		 

		 ]]></description>
<param><![CDATA[element 	the element to add.

		 ]]></param>
<return><![CDATA[<code>true</code> if the element was added to this queue, else <code>false</code>. 

		 ]]></return>
</method>
<method name='removeIndexEventListenerFromElement' fullname='org.as3collections.queues:IndexQueue/private:removeIndexEventListenerFromElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateCollection' fullname='org.as3collections.queues:IndexQueue/protected:validateCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3collections:ICollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateElement' fullname='org.as3collections.queues:IndexQueue/protected:validateElement' isStatic='false' isFinal='false' isOverride='false'  param_names='element' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='comparator' fullname='org.as3collections.queues:IndexQueue/comparator/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='org.as3coreaddendum.system:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>IndexQueue</code> does not allow changing its <code>comparator</code> object.

		 <p><code>IndexQueue</code> was designed to be used exclusively with its default comparator object.

		 If you want to change the comparator object using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
<method name='options' fullname='org.as3collections.queues:IndexQueue/options/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 <code>IndexQueue</code> does not allow changing its options.

		 <p><code>IndexQueue</code> was designed to be used exclusively with its default options.

		 If you want to change the options using this setter, consider using <code>SortedQueue</code> class instead.</p>

		 <p>If this setter is used an <code>IllegalOperationError</code> is thrown.</p>

		 ]]></description>
</method>
</asdoc>
