<?xml version="1.0" encoding="UTF-8"?><apiPackage id="org.as3collections.iterators"><apiName>org.as3collections.iterators</apiName><apiDetail/><apiClassifier id="org.as3collections.iterators:ReadOnlyListIterator"><apiName>ReadOnlyListIterator</apiName><shortdesc>
	 An iterator to iterate over lists.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:ListIterator</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over lists.
	 This implementation doesn't allow modifications in the list.
	 All methods that change the list will throw an <codeph>UnsupportedOperationError</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ReadOnlyListIterator:ReadOnlyListIterator"><apiName>ReadOnlyListIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyListIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the source <codeph>ReadOnlyListIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified position minus one.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyListIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:add"><apiName>add</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:set"><apiName>set</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:ReadOnlyArrayIterator"><apiName>ReadOnlyArrayIterator</apiName><shortdesc>
	 An iterator to iterate over an Array object.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:ArrayIterator</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over an <codeph>Array</codeph> object.
	 This implementation doesn't allow modifications in the collection.
	 All methods that change the collection will throw an <codeph>UnsupportedOperationError</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ReadOnlyArrayIterator:ReadOnlyArrayIterator"><apiName>ReadOnlyArrayIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyArrayIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiDesc>	the source array to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new ReadOnlyArrayIterator object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ReadOnlyArrayIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayIterator</codeph> is a read-only iterator and doesn't allow modifications in the collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:ListIterator"><apiName>ListIterator</apiName><shortdesc>
	 An iterator to iterate over lists (implementations of the IList interface).</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over lists (implementations of the <codeph>IList</codeph> interface).
	 <codeph>ListIterator</codeph> allows to traverse the list in either direction.
	 <p><b>IMPORTANT:</b></p>
	 <p>A <codeph>ListIterator</codeph> has no current element; its cursor position always lies between the element that would be returned by a call to <codeph>previous()</codeph> and the element that would be returned by a call to <codeph>next()</codeph>.
	 An iterator for a list of length <codeph>n</codeph> has <codeph>n+1</codeph> possible cursor positions, as illustrated by the carets (^) below:</p>
	 <p>                                
	 Element(0)       
	 Element(1)       
	 Element(2)       
	 ... Element(n-1)</p>
	 <p>cursor positions:
	    
	 ^                    
	 ^                     
	 ^                    
	 ^                            
	 ^</p>
	 <p>Note that the <codeph>remove()</codeph> and <codeph>set()</codeph> methods are <i>not</i> defined in terms of the cursor position; they are defined to operate on the last element returned by a call to <codeph>next()</codeph> or <codeph>previous()</codeph>.</p>
	 <p>For further information do not hesitate to see the examples at the end of the page.</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5]);
	 
	 list1                             // [1,3,5]
	 
	 var it:IListIterator = list1.listIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                  // -1
	     it.nextIndex()                // 0
	     it.previousIndex()            // -1
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     if (e == 3)
	     {
	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).
	         it.add(4);
	         list1                     // [1,3,4,5]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 2
	     it.nextIndex()                // 3
	     it.previousIndex()            // 2
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // 3
	     it.nextIndex()                // 4
	     it.previousIndex()            // 3
	 
	     if (e == 5)
	     {
	         it.remove();
	         list1                     // [1,3,4]
	     }
	 }
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5]);
	 
	 list1                             // [1,3,5]
	 
	 var it:IListIterator = list1.listIterator(list1.size());
	 var e:int;
	 
	 while (it.hasPrevious())
	 
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                  // 2
	     it.nextIndex()                // 3
	     it.previousIndex()            // 2
	 
	     e = it.previous();
	     e                             // 5
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     if (e == 5)
	     {
	         it.remove()
	         list1                     // [1,3]
	     }
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     e = it.previous();
	     e                             // 3
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     if (e == 3)
	     {
	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).
	         it.add(4);
	         list1                     // [1,4,3]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     e = it.previous();
	     e                             // 4
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     ITERATION N.4
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     e = it.previous();
	     e                             // 1
	 
	     it.pointer()                  // -1
	     it.nextIndex()                // 0
	     it.previousIndex()            // -1
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ListIterator:ListIterator"><apiName>ListIterator</apiName><shortdesc>
		 Constructor, creates a new ListIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>		the source <codeph>ListIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified position minus one. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ListIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ListIterator:add"><apiName>add</apiName><shortdesc>
		 
		 Inserts the specified element into the list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if the list has changed as a result of the call. Returns <codeph>false</codeph> if the list does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <codeph>next</codeph>, if any, and after the next element that would be returned by <codeph>previous</codeph>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new element. (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements when traversing the list in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>next</codeph>, or list size if list iterator is at end of list.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to <codeph>next</codeph>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the next element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the internal pointer of the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In this implementation the pointer is the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if list iterator is at beginning of list.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:previous"><apiName>previous</apiName><shortdesc>
		 
		 Returns the previous element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no previous elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the previous element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the list the last element that was returned by next or previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the list the last element that was returned by <codeph>next</codeph> or <codeph>previous</codeph>. This call can only be made once per call to <codeph>next</codeph> or <codeph>previous</codeph>. It can be made only if <codeph>IListIterator.add</codeph> has not been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last element returned by next or previous with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last element returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified element (optional operation). This call can be made only if neither <codeph>IListIterator.remove</codeph> nor <codeph>IListIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:MapIterator"><apiName>MapIterator</apiName><shortdesc>
	 An iterator to iterate over maps (implementations of the IMap interface).</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over maps (implementations of the <codeph>IMap</codeph> interface).
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IIterator;
	 import org.as3collections.IMap;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 map1.put("element-7", 7);
	 
	 map1                             // ["element-1"=1,"element-3"=3,"element-5"=5,"element-7"=7]
	 
	 var it:IIterator = map1.iterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	     ITERATION N.1
	 
	     it.pointer()                  // null
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // "element-1"
	 
	     ITERATION N.2
	 
	     it.pointer()                  // "element-1"
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // "element-3"
	 
	     if (e == 3)
	     {
	         it.remove();
	         map1                      // ["element-1"=1,"element-5"=5,"element-7"=7]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // "element-1"
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // "element-5"
	 
	     ITERATION N.4
	 
	     it.pointer()                  // "element-5"
	 
	     e = it.next();
	     e                             // 7
	 
	     it.pointer()                  // "element-7"
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:MapIterator:MapIterator"><apiName>MapIterator</apiName><shortdesc>
		 Constructor, creates a new MapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the source map to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>MapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:MapIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
 		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the next element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the internal pointer of the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:remove"><apiName>remove</apiName><shortdesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:ArrayIterator"><apiName>ArrayIterator</apiName><shortdesc>
	 An iterator to iterate over an Array object.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over an <codeph>Array</codeph> object.
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IIterator;
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5, 7]);
	 
	 list1                             // [1,3,5,7]
	 
	 var it:IIterator = list1.iterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	     ITERATION N.1
	 
	     it.pointer()                  // -1
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 0
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // 1
	 
	     if (e == 3)
	     {
	         it.remove();
	         list1                     // [1,5,7]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 0
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // 1
	 
	     ITERATION N.4
	 
	     it.pointer()                  // 1
	 
	     e = it.next();
	     e                             // 7
	 
	     it.pointer()                  // 2
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ArrayIterator:ArrayIterator"><apiName>ArrayIterator</apiName><shortdesc>
		 Constructor, creates a new ArrayIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiDesc>	the source array to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new ArrayIterator object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ArrayIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
 		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the next element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the internal pointer of the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:remove"><apiName>remove</apiName><shortdesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:ListMapIterator"><apiName>ListMapIterator</apiName><shortdesc>
	 An iterator to iterate over implementations of IListMap interface.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListMapIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over implementations of <codeph>IListMap</codeph> interface.
	 <codeph>ListMapIterator</codeph> allows to traverse the map in either direction.
	 <p><b>IMPORTANT:</b></p>
	 <p>A <codeph>ListMapIterator</codeph> has no current mapping; its cursor position always lies between the mapping that would be returned by a call to <codeph>previous()</codeph> and the mapping that would be returned by a call to <codeph>next()</codeph>.
	 An iterator for a map of length <codeph>n</codeph> has <codeph>n+1</codeph> possible cursor positions, as illustrated by the carets (^) below:</p>
	 <p>                                
	 Element(0)       
	 Element(1)       
	 Element(2)       
	 ... Element(n-1)</p>
	 <p>cursor positions:
	    
	 ^                    
	 ^                     
	 ^                    
	 ^                            
	 ^</p>
	 <p>Note that the <codeph>remove()</codeph> and <codeph>set()</codeph> methods are <i>not</i> defined in terms of the cursor position; they are defined to operate on the last mapping returned by a call to <codeph>next()</codeph> or <codeph>previous()</codeph>.</p>
	 <p>For further information do not hesitate to see the examples at the end of the page.</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IListMap;
	 import org.as3collections.IListMapIterator;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IListMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 
	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]
	 
	 var it:IListMapIterator = map1.listMapIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                    // null
	     it.nextIndex()                  // 0
	     it.previousIndex()              // -1
	 
	     e = it.next();
	     e                               // 1
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     e = it.next();
	     e                               // 3
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     if (e == 3)
	     {
	         //map1.put("element-4", 4)  // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).
	         it.put("element-4", 4);
	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4,"element-5"=5]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                    // "element-4"
	     it.nextIndex()                  // 3
	     it.previousIndex()              // 2
	 
	     e = it.next();
	     e                               // 5
	 
	     it.pointer()                    // "element-5"
	     it.nextIndex()                  // 4
	     it.previousIndex()              // 3
	 
	     if (e == 5)
	     {
	         it.remove();
	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4]
	     }
	 }
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IListMap;
	 import org.as3collections.IListMapIterator;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IListMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 
	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]
	 
	 var it:IListMapIterator = map1.listIterator(map1.size());
	 var e:int;
	 
	 while (it.hasPrevious())
	 
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                    // "element-5"
	     it.nextIndex()                  // 3
	     it.previousIndex()              // 2
	 
	     e = it.previous();
	     e                               // 5
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     if (e == 5)
	     {
	         it.remove()
	         map1                        // ["element-1"=1,"element-3"=3]
	     }
	 
	     ITERATION N.2
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     e = it.previous();
	     e                               // 3
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     if (e == 3)
	     {
	         //map1.put("element-4", 4); // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).
	         it.put("element-4", 4);
	         map1                        // [1,4,3]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     e = it.previous();
	     e                               // 4
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     ITERATION N.4
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     e = it.previous();
	     e                               // 1
	 
	     it.pointer()                    // null
	     it.nextIndex()                  // 0
	     it.previousIndex()              // -1
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ListMapIterator:ListMapIterator"><apiName>ListMapIterator</apiName><shortdesc>
		 Constructor, creates a new ListMapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>		the source <codeph>ListMapIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first mapping that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the mapping with the specified position minus one. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ListMapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ListMapIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 
		 Returns true if the iteration has more mappings when traversing the map in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>, or map size if map iterator is at end of map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>.
		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:next"><apiName>next</apiName><shortdesc>
		 Returns the next value in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the next <codeph>value</codeph> in the iteration.
		 The <codeph>pointer</codeph> operation returns the <codeph>key</codeph> associated with the returned <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the internal pointer of the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In this implementation the pointer is a <codeph>key</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if map iterator is at beginning of map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>.
		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous value in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no previous mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous <codeph>value</codeph> in the iteration.
		 The <codeph>pointer</codeph> operation returns the <codeph>key</codeph> associated with the returned <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map.
		 The mapping is inserted immediately before the next mapping that would be returned by <codeph>next</codeph>, if any, and after the next mapping that would be returned by <codeph>previous</codeph>, if any.
		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)
		 The new mapping is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new mapping.
		 (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the map the last mapping that was returned by next or previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the map the last mapping that was returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 This call can only be made once per call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 It can be made only if <codeph>IListMapIterator.add</codeph> has not been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last mapping returned by next or previous with the specified mapping.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key or value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key and it is not the replaced key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last mapping returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified mapping.
		 This call can be made only if neither <codeph>IListMapIterator.remove</codeph> nor <codeph>IListMapIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections.iterators:ReadOnlyMapIterator"><apiName>ReadOnlyMapIterator</apiName><shortdesc>
	 An iterator to iterate over maps (implementations of the IMap interface).</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:MapIterator</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An iterator to iterate over maps (implementations of the <codeph>IMap</codeph> interface).
	 This implementation doesn't allow modifications in the map.
	 All methods that change the map will throw an <codeph>UnsupportedOperationError</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections.iterators:ReadOnlyMapIterator:ReadOnlyMapIterator"><apiName>ReadOnlyMapIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyMapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the source map to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyMapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections.iterators:ReadOnlyMapIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyMapIterator</codeph> is a read-only iterator and doesn't allow modifications in the map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>