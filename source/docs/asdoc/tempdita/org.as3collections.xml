<?xml version="1.0" encoding="UTF-8"?><apiPackage id="org.as3collections"><apiName>org.as3collections</apiName><apiDetail/><apiClassifier id="org.as3collections:AbstractList"><apiName>AbstractList</apiName><shortdesc>
	 This class provides a skeletal implementation of the IList interface, to minimize the effort required to implement this interface.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseClassifier>org.as3collections:AbstractArrayCollection</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class provides a skeletal implementation of the <codeph>IList</codeph> interface, to minimize the effort required to implement this interface.
	 <p>This is an abstract class and shouldn't be instantiated directly.</p>
	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.
	 Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links><apiConstructor id="org.as3collections:AbstractList:AbstractList"><apiName>AbstractList</apiName><shortdesc>
		 This is an abstract class and shouldn't be instantiated directly.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 This is an abstract class and shouldn't be instantiated directly.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:AbstractList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAllAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which to insert the first element from the specified collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).
		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.
		 <p>This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using <codeph>addAt</codeph>.
		 Other implementations can override this method for efficiency.</p>
		 <p>Note that this implementation throws an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this list (optional operation).
		 <p>This implementation calls <codeph>addAllAt(size(), collection)</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden (assuming the specified collection is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:add"><apiName>add</apiName><shortdesc>
		 Appends the specified element to the end of this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Appends the specified element to the end of this list (optional operation).
		 <p>Lists that support this operation may place limitations on what elements may be added to this list.
		 In particular, some lists will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Lists classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a list refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a list always contains the specified element after this call returns.</p>
		 <p>This implementation calls <codeph>addAt(size(), element)</codeph>.</p>
		 <p>Note that this implementation throws an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractList:getAt"><apiName>getAt</apiName><shortdesc>
		 
		 Returns the element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element at the specified position in this list.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the element to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the element at the specified position in this list.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	the position in the list from which to start searching for the element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 <p>If all elements in this list and <codeph>element</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this list using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>		the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	the position in the list from which to start searching for the element. The default is the maximum value allowed for an index. If you do not specify <codeph>fromIndex</codeph>, the search starts at the last item in the list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>last occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 <p>If all elements in this list and <codeph>element</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this list using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.lastIndexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IListIterator"><linktext>IListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the element to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the element at the specified position in this list (optional operation).
		 Shifts any subsequent elements to the left (subtracts one from their indices).
		 Returns the element that was removed from the list. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new collection containing all the removed elements.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the elements whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent elements to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the elements in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the elements in this list.
		 This implementation uses native <codeph>Array.reverse</codeph> method.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new list that is a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subList</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new list that is a view of the portion of this list between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>This list should not be modified.</p>
		 <p>The returned list should support all of the optional list operations supported by this list.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:AbstractList:modCount:get"><apiName>modCount</apiName><shortdesc>
		 
		 The number of times this list has been structurally modified.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 The number of times this list has been <i>structurally modified</i>.
		 Structural modifications are those that change the size of the list.
		 <p>This field is used by the list iterator implementation returned by the <codeph>listIterator</codeph> method.
		 If the value of this field changes unexpectedly, the list iterator will throw a <codeph>org.as3collections.errors.ConcurrentModificationError</codeph> in response to the <codeph>next</codeph>, <codeph>remove</codeph>, <codeph>previous</codeph>, <codeph>set</codeph> or <codeph>add</codeph> operations.</p>
		 <p>Implementations merely has to increment this field in its <codeph>add</codeph>, <codeph>remove</codeph> and any other methods that result in structural modifications to the list.
		 A single call to <codeph>add</codeph> or <codeph>remove</codeph> must add no more than one to this field.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:TypedCollection"><apiName>TypedCollection</apiName><shortdesc>
	 TypedCollection works as a wrapper for a collection.
	 Since ActionScript 3.0 does not support typed arrays, TypedCollection is a way to create typed collections.
	 It stores the wrapCollection constructor's argument internally.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ITypeable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><codeph>TypedCollection</codeph> works as a wrapper for a collection.</p>
	 <p>Since ActionScript 3.0 does not support typed arrays, <codeph>TypedCollection</codeph> is a way to create typed collections.</p>
	 <p>It stores the <codeph>wrapCollection</codeph> constructor's argument internally.
	 So every method call to this class is forwarded to the <codeph>wrappedCollection</codeph> object.
	 The methods that need to be checked for the type of the elements are previously validated with the <codeph>validateType</codeph> or <codeph>validateCollection</codeph> method before forward the call.
	 If the type of an element requested to be added to this collection is incompatible with the type of the collection a <codeph>org.as3coreaddendum.errors.ClassCastError</codeph> is thrown.
	 The calls that are forwarded to the <codeph>wrappedCollection</codeph> returns the return of the <codeph>wrappedCollection</codeph> call.</p>
	 <p>The <codeph>TypedCollection.type</codeph> setter is not supported and will thrown an <codeph>UnsupportedOperationError</codeph> if used.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections:TypedCollection:TypedCollection"><apiName>TypedCollection</apiName><shortdesc>
		 Constructor, creates a new TypedCollection object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapCollection</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapCollection</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapCollection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the target collection to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>			the type of the elements allowed by this collection.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedCollection</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:TypedCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 The collection is validated with the validateCollection method to be forwarded to wrappedCollection.addAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the types of one or more elements in the <codeph>collection</codeph> argument are incompatible with the type of this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The collection is validated with the <codeph>validateCollection</codeph> method to be forwarded to <codeph>wrappedCollection.addAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:add"><apiName>add</apiName><shortdesc>
		 The element is validated with the validateType method to be forwarded to wrappedCollection.add.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the element is incompatible with the type of this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.add</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The element is validated with the <codeph>validateType</codeph> method to be forwarded to <codeph>wrappedCollection.add</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:clear"><apiName>clear</apiName><shortdesc>
		 Forwards the call to wrappedCollection.clear.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.clear</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedCollection object with the clone of the wrappedCollection object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a new <codeph>TypedCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.containsAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.containsAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.containsAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:contains"><apiName>contains</apiName><shortdesc>
		 Forwards the call to wrappedCollection.contains.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.contains</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.contains</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method first checks if other argument is a TypedCollection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method first checks if <codeph>other</codeph> argument is a <codeph>TypedCollection</codeph>.
		 If not it returns <codeph>false</codeph>. If <codeph>true</codeph> it checks the <codeph>type</codeph> property of both lists.
		 If they are different it returns <codeph>false</codeph>.
		 Otherwise it uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:TypedCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Forwards the call to wrappedCollection.isEmpty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.isEmpty</codeph>.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.isEmpty</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Forwards the call to wrappedCollection.iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.iterator</codeph>.
 		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.iterator</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.removeAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.removeAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.removeAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:remove"><apiName>remove</apiName><shortdesc>
		 Forwards the call to wrappedCollection.remove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.remove</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.remove</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.retainAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.retainAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.retainAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:size"><apiName>size</apiName><shortdesc>
		 Forwards the call to wrappedCollection.size.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.size</codeph>.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.size</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Forwards the call to wrappedCollection.toArray.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.toArray</codeph>.
 		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.toArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
 		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:TypedCollection:allEquatable:get"><apiName>allEquatable</apiName><shortdesc>
		 
		 Indicates whether all elements in this collection implement the interface org.as3coreaddendum.system.IEquatable.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all elements in this collection implement the interface <codeph>org.as3coreaddendum.system.IEquatable</codeph>.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:TypedCollection:type:get"><apiName>type</apiName><shortdesc>
		 Defines the acceptable type of the elements by this collection.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc>
		 Defines the acceptable type of the elements by this collection.
		 <p>The setter is not supported and will thrown an <codeph>UnsupportedOperationError</codeph> if used.</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:IMapEntry"><apiName>IMapEntry</apiName><shortdesc>
	 A map entry (key-value pair).</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A map entry (key-value pair). The <codeph>IMap.entryList</codeph> method returns a collection-view of the map, whose elements type are of this class.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="org.as3collections:IMapEntry:org.as3collections:IMapEntry:key:get"><apiName>key</apiName><shortdesc>
		 Returns the key corresponding to this entry.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Returns the key corresponding to this entry.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:IMapEntry:org.as3collections:IMapEntry:value:get"><apiName>value</apiName><shortdesc>
		 Returns the value corresponding to this entry.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Returns the value corresponding to this entry.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:MapEntry"><apiName>MapEntry</apiName><shortdesc>
	 An entry maintaining a key and a value.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMapEntry</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An entry maintaining a key and a value.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections:MapEntry:MapEntry"><apiName>MapEntry</apiName><shortdesc>
		 Constructor, creates a new MapEntry object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key represented by this entry.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value represented by this entry.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>MapEntry</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:MapEntry:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new MapEntry object with the same key-value mapping.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a new <codeph>MapEntry</codeph> object with the same key-value mapping.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>MapEntry</codeph> object with the same key-value mapping.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:MapEntry:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class</li>
		 <li>A.key == B.key</li>
		 <li>A.value == B.value</li>
		 </ul></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:MapEntry:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
 		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:MapEntry:key:get"><apiName>key</apiName><shortdesc>
		 Returns the key corresponding to this entry.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Returns the key corresponding to this entry.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:MapEntry:value:get"><apiName>value</apiName><shortdesc>
		 Returns the value corresponding to this entry.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Returns the value corresponding to this entry.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:IListIterator"><apiName>IListIterator</apiName><shortdesc>
	 An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list.
	 <p>Note that the <codeph>remove</codeph> and <codeph>set</codeph> methods are defined to operate on the last element returned by a call to <codeph>next</codeph> or <codeph>previous</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into the list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if the list has changed as a result of the call. Returns <codeph>false</codeph> if the list does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <codeph>next</codeph>, if any, and after the next element that would be returned by <codeph>previous</codeph>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new element. (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 Returns true if the iteration has more elements when traversing the list in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 Returns the index of the element that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>next</codeph>, or list size if list iterator is at end of list.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the element that would be returned by a subsequent call to <codeph>next</codeph>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 Returns the index of the element that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if list iterator is at beginning of list.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>			if the iteration has no previous elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last element returned by next or previous with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last element returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified element (optional operation). This call can be made only if neither <codeph>IListIterator.remove</codeph> nor <codeph>IListIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:ISortedMap"><apiName>ISortedMap</apiName><shortdesc>
	 A map that provides a total ordering on its mappings, sorting by keys or values.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseInterface>org.as3collections:IListMap</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A map that provides a <i>total ordering</i> on its mappings, sorting by keys or values.
	 The map is ordered according to the <i>natural ordering</i> of its keys or values, by a <i>IComparator</i> typically provided at sorted map creation time, or by the arguments provided to the <codeph>sort</codeph> or <codeph>sortOn</codeph> methods.
	 The <codeph>sortBy</codeph> property defines whether the sorting will be made by <codeph>key</codeph> or <codeph>value</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:ISortedMap:org.as3collections:ISortedMap:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation><apiValue id="org.as3collections:ISortedMap:org.as3collections:ISortedMap:sortBy:get"><apiName>sortBy</apiName><shortdesc>
		 Defines whether the map should be sorted by its keys or values.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.as3collections:SortMapBy</apiValueClassifier></apiValueDef><apiDesc>
		 Defines whether the map should be sorted by its keys or values. The default is <codeph>SortMapBy.KEY</codeph>.
 		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:UniqueCollection"><apiName>UniqueCollection</apiName><shortdesc>
	 UniqueCollection works as a wrapper for a collection.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <codeph>UniqueCollection</codeph> works as a wrapper for a collection.
	 <p>It does not allow duplicate elements in the collection.</p>
	 <p>It stores the <codeph>wrapCollection</codeph> constructor's argument internally.
	 So every method call to this class is forwarded to the <codeph>wrappedCollection</codeph> object.
	 The methods that need to be checked for duplication are previously validated before forward the call.
	 No error is thrown by the validation of duplication.
	 The calls that are forwarded to the <codeph>wrappedCollection</codeph> returns the return of the <codeph>wrappedCollection</codeph> call.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections:UniqueCollection:UniqueCollection"><apiName>UniqueCollection</apiName><shortdesc>
		 Constructor, creates a new UniqueCollection object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapCollection</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapCollection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the target collection to wrap.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>UniqueCollection</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:UniqueCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 If the specified collection is empty returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	 if the specified collection contains a <codeph>null</codeph> element and <codeph>wrappedCollection</codeph> does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>false</codeph> if the specified collection is <codeph>null</codeph> or empty. Otherwise returns the return of the call <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If the specified collection is empty returns <codeph>false</codeph>. Otherwise, it clones the specified collection, removes all elements that already are in the <codeph>wrappedCollection</codeph> and removes all duplicates. Then it forwards the call to <codeph>wrappedCollection.addAll</codeph> sending the cloned and filtered collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:add"><apiName>add</apiName><shortdesc>
		 If wrappedCollection.contains(element) returns true, then this method returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>false</codeph> if <codeph>wrappedCollection.contains(element)</codeph> returns <codeph>true</codeph>. Otherwise returns the return of the call <codeph>wrappedCollection.add</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>wrappedCollection.contains(element)</codeph> returns <codeph>true</codeph>, then this method returns <codeph>false</codeph>. Otherwise, it forwards the call to <codeph>wrappedCollection.add</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:clear"><apiName>clear</apiName><shortdesc>
		 Forwards the call to wrappedCollection.clear.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.clear</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new UniqueCollection object with the clone of the wrappedCollection object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a new <codeph>UniqueCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>UniqueCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.containsAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.containsAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.containsAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:contains"><apiName>contains</apiName><shortdesc>
		 Forwards the call to wrappedCollection.contains.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.contains</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.contains</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalNotConsideringOrder method to perform equality, sending this collection and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this collection and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:UniqueCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Forwards the call to wrappedCollection.isEmpty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.isEmpty</codeph>.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.isEmpty</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Forwards the call to wrappedCollection.iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.iterator</codeph>.
 		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.iterator</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.removeAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.removeAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.removeAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:remove"><apiName>remove</apiName><shortdesc>
		 Forwards the call to wrappedCollection.remove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.remove</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.remove</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.retainAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.retainAll</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.retainAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:size"><apiName>size</apiName><shortdesc>
		 Forwards the call to wrappedCollection.size.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.size</codeph>.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.size</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Forwards the call to wrappedCollection.toArray.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the return of the call <codeph>wrappedCollection.toArray</codeph>.
 		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.toArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
 		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:UniqueCollection:allEquatable:get"><apiName>allEquatable</apiName><shortdesc>
		 
		 Indicates whether all elements in this collection implement the interface org.as3coreaddendum.system.IEquatable.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all elements in this collection implement the interface <codeph>org.as3coreaddendum.system.IEquatable</codeph>.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:ISortedQueue"><apiName>ISortedQueue</apiName><shortdesc>
	 A queue that provides a total ordering on its elements.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A queue that provides a <i>total ordering</i> on its elements.
	 The queue is ordered according to the <i>natural ordering</i> of its elements, by a <i>IComparator</i> typically provided at sorted queue creation time, or by the arguments provided to the <codeph>sort</codeph> or <codeph>sortOn</codeph> methods.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:ISortedQueue:org.as3collections:ISortedQueue:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IMap"><apiName>IMap</apiName><shortdesc>
	 An object that maps keys to values.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An object that maps keys to values.
	 A map cannot contain duplicate keys, each key can map to at most one value.
	 <p>This interface provides three collection views, which allow a map's contents to be viewed as a list of keys, a list of values, or a list of key-value mappings (<codeph>IMapEntry</codeph>).
	 Some map implementations, like the <codeph>ArrayListMap</codeph> class, make specific guarantees as to their order; others, like the <codeph>HashMap</codeph> class, do not.</p>
	 <p>These views, plus <codeph>IMap.iterator()</codeph>, enable various forms of iteration over the keys and values of the map.
	 To iterate over the keys/values the user can use <codeph>IMap.iterator()</codeph> or <codeph>IMap.entryList().iterator()</codeph>.
	 To iterate over the keys the user can use <codeph>IMap.getKeys().iterator()</codeph>.
	 To iterate over the values the user can use <codeph>IMap.getValues().iterator()</codeph>.</p>
	 <p>Some map implementations have restrictions on the keys and values they may contain.
	 For example, some implementations prohibit <codeph>null</codeph> keys and values, and some have restrictions on the types of their keys or values.</p>
	 <p>The methods that modify the map are specified to throw <codeph>org.as3coreaddendum.errors.UnsupportedOperationError</codeph> if the map does not support the operation.
	 These methods are documented as "optional operation".</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#AbstractHashMap"><linktext>AbstractHashMap</linktext></link><link href="org.as3collections.xml#AbstractListMap"><linktext>AbstractListMap</linktext></link><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#IListMap"><linktext>IListMap</linktext></link></related-links><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map contains a mapping for the specified key.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map maps one or more keys to the specified value.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ICollection object that is a view of the mappings contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ICollection</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the mappings contained in this map.
		 The type of the objects within the map is <codeph>IMapEntry</codeph>
		 <p>Modifications in the <codeph>ICollection</codeph> object does not affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#ICollection"><linktext>ICollection</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ICollection object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ICollection</codeph> object that is a view of the keys contained in this map.
 		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ICollection</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ICollection object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ICollection</codeph> object that is a view of the values contained in this map.
 		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ICollection</codeph> object does not affect this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 Retrieves each property of the specified object, calling put on this map once for each property (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves each property of the specified object, calling <codeph>put</codeph> on this map once for each property (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>The effect of this call is equivalent to that of calling <codeph>put(entry.key, entry.value)</codeph> on this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>The effect of this call is equivalent to that of calling <codeph>remove</codeph> on this map once for each element in the speficied collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.
		 The elements in the specified collection are interpreted as keys.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:size"><apiName>size</apiName><shortdesc>
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:IMap:org.as3collections:IMap:allKeysEquatable:get"><apiName>allKeysEquatable</apiName><shortdesc>
		 Indicates whether all keys in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates whether all keys in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:IMap:org.as3collections:IMap:allValuesEquatable:get"><apiName>allValuesEquatable</apiName><shortdesc>
		 Indicates whether all values in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates whether all values in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:IIterator"><apiName>IIterator</apiName><shortdesc>
	 An iterator over a collection.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An iterator over a collection.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:next"><apiName>next</apiName><shortdesc>
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the next element in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the internal pointer of the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:reset"><apiName>reset</apiName><shortdesc>
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IQueue"><apiName>IQueue</apiName><shortdesc>
	 A collection designed for holding elements prior to processing.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A collection designed for holding elements prior to processing.
	 Besides basic <codeph>ICollection</codeph> operations, queues provide additional insertion, extraction, and inspection operations.
	 Each of these methods exists in two forms: one throws an error if the operation fails, the other returns a special value (either <codeph>null</codeph> or <codeph>false</codeph>, depending on the operation).
	 <p>
	 <adobetable class="innertable">
	 
	 
	 
	 
	 <tgroup cols="3"><thead><row><entry/><entry><i>Throws error</i></entry><entry><i>Returns special value</i></entry></row></thead><tbody><row>
	 <entry><b>Insert</b></entry>
	 <entry><codeph>add</codeph></entry>
	 <entry><codeph>offer</codeph></entry>
	 </row><row>
	 <entry><b>Remove</b></entry>
	 <entry><codeph>dequeue</codeph></entry>
	 <entry><codeph>poll</codeph></entry>
	 </row><row>
	 <entry><b>Examine</b></entry>
	 <entry><codeph>element</codeph></entry>
	 <entry><codeph>peek</codeph></entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 <p>Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner.
	 Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out).
	 Whatever the ordering used, the head of the queue is that element which would be removed by a call to <codeph>dequeue</codeph> or <codeph>poll</codeph>.
	 In a FIFO queue, all new elements are inserted at the <i>tail</i> of the queue.
	 Other kinds of queues may use different placement rules.
	 Every <codeph>IQueue</codeph> implementation must specify its ordering properties.</p>
	 <p>The <codeph>offer</codeph> method inserts an element if possible, otherwise returning <codeph>false</codeph>.
	 This differs from the <codeph>add</codeph> method, which can fail to add an element only by throwing an error.
	 The <codeph>offer</codeph> method is designed for use when failure is a normal, rather than exceptional occurrence.</p>
	 <p>The <codeph>dequeue</codeph> and <codeph>poll</codeph> methods remove and return the head of the queue.
	 Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation.
	 The <codeph>dequeue</codeph> and <codeph>poll</codeph> methods differ only in their behavior when the queue is empty: the <codeph>dequeue</codeph> method throws an error, while the <codeph>poll</codeph> method returns <codeph>null</codeph>.</p> 
	 <p>The <codeph>element</codeph> and <codeph>peek</codeph> methods return, but do not remove, the head of the queue.
	 The <codeph>element</codeph> and <codeph>peek</codeph> methods differ only in their behavior when the queue is empty: the <codeph>element</codeph> method throws an error, while the <codeph>peek</codeph> method returns null.</p>
	 <p><codeph>IQueue</codeph> implementations generally do not allow insertion of <codeph>null</codeph> elements</p>
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Retrieves and removes the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:element"><apiName>element</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue.
		 This method differs from <codeph>peek</codeph> only in that it throws an error if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:peek"><apiName>peek</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:AbstractArrayCollection"><apiName>AbstractArrayCollection</apiName><shortdesc>
	 This class provides a skeletal implementation of the ICollection interface, to minimize the effort required to implement this interface.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class provides a skeletal implementation of the <codeph>ICollection</codeph> interface, to minimize the effort required to implement this interface. 
	 <p>This is an abstract class and shouldn't be instantiated directly.</p>
	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.
	 Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.</p>
	 <p>This class maintains a native <codeph>Array</codeph> object as its source.</p>
	 <p><b>IMPORTANT:</b></p>
	 <p>This class implements equality through <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface in the <codeph>equals</codeph> method and in all methods that compares the elements inside this collection (i.e. <codeph>contains</codeph>, <codeph>containsAll</codeph>, <codeph>remove</codeph>, <codeph>removeAll</codeph> and <codeph>retainAll</codeph>).</p>
	 <p>In order to this collection uses the <codeph>equals</codeph> method of its elements in comparisons (rather than default '==' operator), <b>all elements in this collection must implement the</b> <codeph>org.as3coreaddendum.system.IEquatable</codeph> <b>interface and also the supplied element.</b></p>
	 <p>For example:</p>
	 <p>myCollection.contains(myElement);</p>
	 <p>All elements inside <codeph>myCollection</codeph>, and <codeph>myElement</codeph>, must implement the <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface so that <codeph>equals</codeph> method of each element can be used in the comparison.
	 Otherwise '==' operator is used.</p>
	 <p>All subclasses of this class <i>must</i> conform with this behavior.</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#ICollection"><linktext>ICollection</linktext></link><link href="org.as3collections.xml#AbstractList"><linktext>AbstractList</linktext></link><link href="org.as3collections.xml#AbstractQueue"><linktext>AbstractQueue</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links><apiConstructor id="org.as3collections:AbstractArrayCollection:AbstractArrayCollection"><apiName>AbstractArrayCollection</apiName><shortdesc>
		 This is an abstract class and shouldn't be instantiated directly.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly. In other words, if there is <i>not</i> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the collection.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 This is an abstract class and shouldn't be instantiated directly.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:AbstractArrayCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).
		 <p>This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>add</codeph> is overridden (assuming the specified collection is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:add"><apiName>add</apiName><shortdesc>
		 Ensures that this collection contains the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified element is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. Returns <codeph>false</codeph> if this collection does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ensures that this collection contains the specified element (optional operation). 
		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.
		 In particular, some collections will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the clear operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this collection (optional operation).
		 The collection will be empty after this method returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this collection doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>org.as3coreaddendum.errors.CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Returns true if this collection contains all of the elements in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains one or more <codeph>null</codeph> elements and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection contains all of the elements in the specified collection.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to be checked for containment in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains all of the elements in the specified collection. 
		 <p>This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection.
		 If all elements are so contained <codeph>true</codeph> is returned, otherwise <codeph>false</codeph>.</p>
		 <p>If all elements in this collection and all elements in <codeph>collection</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, <codeph>equals</codeph> method of the elements will be used.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:contains"><apiName>contains</apiName><shortdesc>
		 Returns true if this collection contains the specified object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection contains the specified object.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	object whose presence in this collection is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains the specified object.
		 <p>If all elements in this collection and <codeph>o</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this collection using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalNotConsideringOrder method to perform equality, sending this collection and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this collection and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this collection contains no elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if this collection contains no elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this collection contains no elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>an iterator over a set of elements.
		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IIterator"><linktext>IIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes all of this collection's elements that are also contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the removeAll operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be removed from this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of this collection's elements that are also contained in the specified collection (optional operation).
		 After this call returns, this collection will contain no elements in common with the specified collection.
		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <codeph>contains</codeph> method of the <codeph>collection</codeph> argument).
		 If it's so contained, it's removed from this collection with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this collection contains one or more elements in common with the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:remove"><apiName>remove</apiName><shortdesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if an object was removed as a result of this call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	the object to be removed from this collection, if present.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).
		 <p>If all elements in this collection and <codeph>o</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation iterates over this collection looking for the specified element.
		 If it finds the element, it removes the element from the collection using the iterator's remove method.
		 In this case, note that this implementation throws an <codeph>UnsupportedOperationError</codeph> if the iterator returned by this collection's iterator method does not implement the <codeph>remove</codeph> method.</p>
		 <p>Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method to get the index of the element and then uses native <codeph>Array.splice</codeph> method to remove it.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. 	
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be retained in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).
		 In other words, removes from this collection all of its elements that are not contained in the specified collection.
		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <codeph>contains</codeph> method of the <codeph>collection</codeph> argument).
		 If it's not so contained, it's removed from this collection with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this collection contains one or more elements not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the number of elements in this collection.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of elements in this collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 
		 Returns an array containing all of the elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a new array object containing all of the elements in this collection.
 		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns an array containing all of the elements in this collection.
		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>
		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.
		 (In other words, this method must allocate a new array even if this collection is backed by an array).
		 The caller is thus free to modify the returned array.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/toString()"><linktext>CollectionUtil.toString()</linktext></link></related-links></apiOperation><apiValue id="org.as3collections:AbstractArrayCollection:allEquatable:get"><apiName>allEquatable</apiName><shortdesc>
		 
		 Indicates whether all elements in this collection implement the interface org.as3coreaddendum.system.IEquatable.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all elements in this collection implement the interface <codeph>org.as3coreaddendum.system.IEquatable</codeph>.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:SortMapBy"><apiName>SortMapBy</apiName><shortdesc>
	 The enumeration class that defines the acceptable values for sort maps by keys or values.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The enumeration class that defines the acceptable values for sort maps by keys or values.
	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.
	 All acceptable values will be created automaticaly by this class internaly, through the constants.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections:SortMapBy:SortMapBy"><apiName>SortMapBy</apiName><shortdesc>
		 Constructor, creates a new SortMapBy object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If there is an attempt to instantiation outside the internal code of this class. All acceptable values will be created automaticaly by this class internaly, through the constants. There's no possibility to use this constructor externally.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>			The name of this enumeration constant.
		 </apiDesc></apiParam><apiParam><apiItemName>ordinal</apiItemName><apiType value="int"/><apiDesc>		The ordinal of this enumeration constant, that is its position in the enum declaration (where the initial constant is assigned an ordinal of zero).
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>SortMapBy</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="org.as3collections:SortMapBy:KEY"><apiName>KEY</apiName><shortdesc>
		 Defines the constant that indicates that the map should be sorted by its keys.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>org.as3collections:SortMapBy</apiValueClassifier></apiValueDef><apiDesc>
		 Defines the constant that indicates that the map should be sorted by its keys.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:SortMapBy:VALUE"><apiName>VALUE</apiName><shortdesc>
		 Defines the constant that indicates that the map should be sorted by its values.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>org.as3collections:SortMapBy</apiValueClassifier></apiValueDef><apiDesc>
		 Defines the constant that indicates that the map should be sorted by its values.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:AbstractListMap"><apiName>AbstractListMap</apiName><shortdesc>
	 This class provides a skeletal implementation of the IListMap interface, to minimize the effort required to implement this interface.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class provides a skeletal implementation of the <codeph>IListMap</codeph> interface, to minimize the effort required to implement this interface.
	 <p>This class maintains two <codeph>ArrayList</codeph> objects as its source, one for <codeph>keys</codeph> and one for <codeph>values</codeph>.</p>
	 <p>This is an abstract class and shouldn't be instantiated directly.</p>
	 <p>This class makes guarantees as to the order of the map.
	 The order in which elements are stored is the order in which they were inserted.</p>
	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.
	 Each of these methods may be overridden if the map being implemented admits a more efficient implementation.</p>
	 <p><b>IMPORTANT:</b></p>
	 <p>This class implements equality through <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface in the <codeph>equals</codeph> method and in all methods that compares the elements inside this collection (i.e. <codeph>containsKey</codeph>, <codeph>containsValue</codeph>, <codeph>put</codeph>, <codeph>remove</codeph>, <codeph>removeAll</codeph> and <codeph>retainAll</codeph>).</p>
	 <p>In order to this map uses the <codeph>equals</codeph> method of its keys and/or values in comparisons (rather than default '==' operator), <b>all keys and/or values in this map must implement the</b> <codeph>org.as3coreaddendum.system.IEquatable</codeph> <b>interface and also the supplied key and/or value.</b></p>
	 <p>For example:</p>
	 <p>myMap.containsKey(myKey);</p>
	 <p>All keys (but in this case only keys) inside <codeph>myMap</codeph>, and <codeph>myKey</codeph>, must implement the <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface so that <codeph>equals</codeph> method of each key can be used in the comparison.
	 Otherwise '==' operator is used. The same is true for values.
	 The use of equality for keys and values are independent.
	 It's possible to use only keys that implement <codeph>IEquatable</codeph>, only values, both, or none.
	 This usage varies according to application needs.</p>
	 <p>All subclasses of this class <i>must</i> conform with this behavior.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#IListMap"><linktext>IListMap</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links><apiConstructor id="org.as3collections:AbstractListMap:AbstractListMap"><apiName>AbstractListMap</apiName><shortdesc>
		 Constructor, creates a new AbstractListMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiData>null</apiData><apiDesc>	a map with wich fill this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new AbstractListMap object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:AbstractListMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this map doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError	if</apiItemName><apiOperationClassifier>ArgumentError	if</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map contains a mapping for the specified key.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError	if</apiItemName><apiOperationClassifier>ArgumentError	if</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map maps one or more keys to the specified value.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the mappings contained in this map (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map (in the same order).
		 The type of the objects within the list is <codeph>IMapEntry</codeph>
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:equals"><apiName>equals</apiName><shortdesc>
		 This method uses MapUtil.equalConsideringOrder method to perform equality, sending this map and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>MapUtil.equalConsideringOrder</codeph> method to perform equality, sending this map and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/equalConsideringOrder()"><linktext>MapUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getKeyAt"><apiName>getKeyAt</apiName><shortdesc>
		 Returns the key at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the key at the specified position in this map.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the key at the specified position in this map.
		 <p>This implementation forwards the call to <codeph>keys.getAt(index)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValueAt"><apiName>getValueAt</apiName><shortdesc>
		 Returns the value at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value at the specified position in this map.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value at the specified position in this map.
		 <p>This implementation forwards the call to <codeph>values.getAt(index)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 <p>This implementation uses <codeph>indexOfKey</codeph> method to get the index of the key/value and then calls <codeph>values.getAt</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are strictly less than toKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>toKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(toKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new <codeph>IListMap</codeph> that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	high endpoint (exclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 <p>This implementation uses <codeph>subMap(0, indexOfKey(toKey))</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>subMap</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:indexOfKey"><apiName>indexOfKey</apiName><shortdesc>
		 Returns the position of the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the position of the specified key.
 		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the position of the specified key.
		 <p>This implementation forwards the call to <codeph>keys.indexOf(key)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:indexOfValue"><apiName>indexOfValue</apiName><shortdesc>
		 Returns the position of the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the position of the specified value.
 		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the position of the specified value.
		 <p>This implementation forwards the call to <codeph>values.indexOf(value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
 		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>an iterator over a set of values.
		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 The specified index indicates the first value that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the value with the specified index minus one.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAllAt"><apiName>putAllAt</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which to insert the first entry from the specified map.
		 </apiDesc></apiParam><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).
		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.
		 <p>This implementation iterates over the specified map, and calls this map's <codeph>putAt</codeph> operation once for each entry returned by the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation performs a for..in in the specified object, calling put on this map once for each iteration (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation performs a <codeph>for..in</codeph> in the specified object, calling <codeph>put</codeph> on this map once for each iteration (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 <p>This implementation calls <codeph>putAllAt(size(), collection)</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>putAt</codeph> is overridden (assuming the specified map is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation calls <codeph>put(entry.key, entry.value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError											if</apiItemName><apiOperationClassifier>ArgumentError											if</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value, and the order of the key is not affected.
		 (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified collection.
		 If it's so contained, it's removed from this map with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys in common with the specified collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the mapping at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 </apiDesc><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the mapping to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping at the specified position in this map (optional operation).
		 Shifts any subsequent mappings to the left (subtracts one from their indices).
		 Returns an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p> 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the mappings whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new map containing all the removed mappings.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the mappings whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent mappings to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key.
		 It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map and calls <codeph>IIterator.remove</codeph> once for each key that are not contained in the specified collection.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:reverse"><apiName>reverse</apiName><shortdesc>
		 
		 Reverses the order of the mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Reverses the order of the mappings in this map.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setKeyAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the key previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setValueAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Returns a new map that is a view of the portion of this map between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new map that is a view of the portion of this map between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned map supports all of the optional map operations supported by this map.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 
		 Returns a new IListMap object that is a view of the portion of this map whose keys are greater than or equal to fromKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>containsKey(fromKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new map that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	low endpoint (inclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
 		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:AbstractListMap:allKeysEquatable:get"><apiName>allKeysEquatable</apiName><shortdesc>
		 
		 Indicates whether all keys in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all keys in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:AbstractListMap:allValuesEquatable:get"><apiName>allValuesEquatable</apiName><shortdesc>
		 
		 Indicates whether all values in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all values in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:AbstractListMap:modCount:get"><apiName>modCount</apiName><shortdesc>
		 
		 The number of times this map has been structurally modified.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 The number of times this map has been <i>structurally modified</i>.
		 Structural modifications are those that change the size of the map.
		 <p>This field is used by the <codeph>IListMapIterator</codeph> implementation returned by the <codeph>listMapIterator</codeph> method.
		 If the value of this field changes unexpectedly, the <codeph>IListMapIterator</codeph> object will throw a <codeph>org.as3collections.errors.ConcurrentModificationError</codeph> in response to the <codeph>next</codeph>, <codeph>remove</codeph>, <codeph>previous</codeph> or <codeph>put</codeph> operations.</p>
		 <p>Implementations merely has to increment this field in its <codeph>put</codeph>, <codeph>remove</codeph> and any other methods that result in structural modifications to the map.
		 A single call to <codeph>put</codeph> or <codeph>remove</codeph> must add no more than one to this field.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:AbstractListMap:protected:keys:set"><apiName>keys</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.as3collections:IList</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.as3collections:AbstractListMap:protected:values:set"><apiName>values</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.as3collections:IList</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:IList"><apiName>IList</apiName><shortdesc>
	 An ordered collection.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An ordered collection.
	 The user of this interface has precise control over where in the list each element is inserted.
	 The user can access elements by their integer index (position in the list), and search for elements in the list.
	 <p>Lists typically allow duplicate elements and multiple <codeph>null</codeph> elements if they allow <codeph>null</codeph> elements at all.
	 But there are lists that prohibits duplicates and/or <codeph>null</codeph> elements, by throwing runtime errors when the user attempts to insert them.</p>
	 <p>The <codeph>IList</codeph> interface provides the special <codeph>IListIterator</codeph> iterator, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the <codeph>IIterator</codeph> interface provides.
	 The <codeph>listIterator()</codeph> method is provided to obtain a <codeph>IListIterator</codeph> implementation that may start at a specified position in the list.</p>
	 <p>The methods that modify the list are specified to throw <codeph>org.as3coreaddendum.errors.UnsupportedOperationError</codeph> if the list does not support the operation.
	 These methods are documented as "optional operation".</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#AbstractList"><linktext>AbstractList</linktext></link><link href="org.as3collections.xml#ICollection"><linktext>ICollection</linktext></link><link href="org.as3collections.xml#ISortedList"><linktext>ISortedList</linktext></link><link href="org.as3collections.xml#IListIterator"><linktext>IListIterator</linktext></link></related-links><apiOperation id="org.as3collections:IList:org.as3collections:IList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAllAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which to insert the first element from the specified collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).
		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:getAt"><apiName>getAt</apiName><shortdesc>
		 Returns the element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element at the specified position in this list.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the element to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the element at the specified position in this list.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	the position in the list from which to start searching for the element (inclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 									if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	the position in the list from which to start searching for the element (inclusive). The default is the maximum value allowed for an index. If you do not specify <codeph>fromIndex</codeph>, the search starts at the last item in the list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>last occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IListIterator"><linktext>IListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the element to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the element at the specified position in this list (optional operation).
		 Shifts any subsequent elements to the left (subtracts one from their indices).
		 Returns the element that was removed from the list. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new collection containing all the removed elements.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the elements whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent elements to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the elements in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the elements in this list.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the element previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new list that is a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subList</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new list that is a view of the portion of this list between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned list supports all of the optional list operations supported by this list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:IList:org.as3collections:IList:modCount:get"><apiName>modCount</apiName><shortdesc>
		 The number of times this list has been structurally modified.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 The number of times this list has been <i>structurally modified</i>.
		 Structural modifications are those that change the size of the list.
		 <p>This field is used by the list iterator implementation returned by the <codeph>listIterator</codeph> method.
		 If the value of this field changes unexpectedly, the list iterator will throw a <codeph>org.as3collections.errors.ConcurrentModificationError</codeph> in response to the <codeph>next</codeph>, <codeph>remove</codeph>, <codeph>previous</codeph>, <codeph>set</codeph> or <codeph>add</codeph> operations.</p>
		 <p>Implementations merely has to increment this field in its <codeph>add</codeph>, <codeph>remove</codeph> and any other methods that result in structural modifications to the list.
		 A single call to <codeph>add</codeph> or <codeph>remove</codeph> must add no more than one to this field.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:AbstractQueue"><apiName>AbstractQueue</apiName><shortdesc>
	 This class provides skeletal implementations of some IQueue operations.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseClassifier>org.as3collections:AbstractArrayCollection</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class provides skeletal implementations of some <codeph>IQueue</codeph> operations.
	 The implementations in this class are appropriate when the base implementation does not allow <codeph>null</codeph> elements.
	 Methods <codeph>add</codeph>, <codeph>dequeue</codeph>, and <codeph>element</codeph> are based on <codeph>offer</codeph>, <codeph>poll</codeph>, and <codeph>peek</codeph>, respectively but throw errors instead of indicating failure via <codeph>false</codeph> or <codeph>null</codeph> returns. 
	 <p>An <codeph>IQueue</codeph> implementation that extends this class must minimally define a method <codeph>offer</codeph> which does not permit insertion of <codeph>null</codeph> elements, along with methods <codeph>peek</codeph>, <codeph>poll</codeph>, <codeph>ICollection.iterator</codeph> supporting <codeph>IIterator.remove</codeph> and <codeph>clone</codeph>.
	 Typically, additional methods will be overridden as well.
	 If these requirements cannot be met, consider instead subclassing <codeph>AbstractArrayCollection</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.as3collections:AbstractQueue:AbstractQueue"><apiName>AbstractQueue</apiName><shortdesc>
		 Constructor, creates a new AbstractQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>AbstractQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:AbstractQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the class of the specified element prevents it from being added to this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified element cannot be inserted.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Retrieves and removes the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue.
		 This method differs from <codeph>poll</codeph> only in that it throws an error if this queue is empty.
		 <p>This implementation returns the result of <codeph>poll</codeph> unless the queue is empty.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:element"><apiName>element</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue.
		 This method differs from <codeph>peek</codeph> only in that it throws an error if this queue is empty. 
		 <p>This implementation returns the result of <codeph>peek</codeph>  unless the queue is empty.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>offer</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:peek"><apiName>peek</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>peek</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>poll</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IIterable"><apiName>IIterable</apiName><shortdesc>
	 Implementing this interface allows an object to be iterable.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Implementing this interface allows an object to be iterable.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#IIterator"><linktext>IIterator</linktext></link></related-links><apiOperation id="org.as3collections:IIterable:org.as3collections:IIterable:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an iterator over a set of elements.
 		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IListMapIterator"><apiName>IListMapIterator</apiName><shortdesc>
	 An iterator for maps that allows the programmer to traverse the map in either direction, modify the map during iteration, and obtain the iterator's current position in the map.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An iterator for maps that allows the programmer to traverse the map in either direction, modify the map during iteration, and obtain the iterator's current position in the map.
	 <p>Note that the <codeph>remove</codeph> and <codeph>set</codeph> methods are defined to operate on the last mapping returned by a call to <codeph>next</codeph> or <codeph>previous</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 Returns true if the iteration has more mappings when traversing the map in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 Returns the index of the mapping that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>, or map size if map iterator is at end of map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>.
		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 Returns the index of the mapping that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if map iterator is at beginning of map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>.
		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous mapping in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>			if the iteration has no previous mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous mapping in the iteration.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous mapping in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map. (optional operation)
		 The mapping is inserted immediately before the next mapping that would be returned by <codeph>next</codeph>, if any, and after the next mapping that would be returned by <codeph>previous</codeph>, if any.
		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)
		 The new mapping is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new mapping.
		 (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last mapping returned by next or previous with the specified mapping (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key and it is not the replaced key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last mapping returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified mapping (optional operation).
		 This call can be made only if neither <codeph>IListMapIterator.remove</codeph> nor <codeph>IListMapIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:ICollection"><apiName>ICollection</apiName><shortdesc>
	 The root interface in the collection hierarchy.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The root interface in the <i>collection hierarchy</i>.
	 A collection represents a group of objects, known as its <i>elements</i>.
	 <p>Some collections allow duplicate elements and others do not. Some are ordered and others unordered.</p>
	 <p>This interface is typically used to pass collections around and manipulate them where maximum generality is desired.</p>
	 <p>The methods that modify the collection are specified to throw org.as3coreaddendum.errors.UnsupportedOperationError if the collection does not support the operation.
	 These methods are documented as "optional operation".</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#AbstractArrayCollection"><linktext>AbstractArrayCollection</linktext></link><link href="org.as3collections.xml#IIterable"><linktext>IIterable</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ICloneable.html"><linktext>org.as3coreaddendum.system.ICloneable</linktext></link></related-links><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	collection containing elements to be added to this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:add"><apiName>add</apiName><shortdesc>
		 Ensures that this collection contains the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified element is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. Returns <codeph>false</codeph> if this collection does not permit duplicates and already contains the specified element.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ensures that this collection contains the specified element (optional operation). 
		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.
		 In particular, some collections will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this collection (optional operation).
		 The collection will be empty after this method returns.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Returns true if this collection contains all of the elements in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains one or more <codeph>null</codeph> elements and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection contains all of the elements in the specified collection.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to be checked for containment in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains all of the elements in the specified collection. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:contains"><apiName>contains</apiName><shortdesc>
		 Returns true if this collection contains the specified object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection contains the specified object.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	object whose presence in this collection is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains the specified object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Returns true if this collection contains no elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if this collection contains no elements.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains no elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes all elements of this collection that are also contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection has changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be removed from this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all elements of this collection that are also contained in the specified collection (optional operation).
		 After this call returns, this collection will contain no elements in common with the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:remove"><apiName>remove</apiName><shortdesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if an object was removed as a result of this call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	the object to be removed from this collection, if present.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/removeAllOccurances()"><linktext>CollectionUtil.removeAllOccurances()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. 	
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be retained in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).
		 In other words, removes from this collection all of its elements that are not contained in the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:size"><apiName>size</apiName><shortdesc>
		 Returns the number of elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the number of elements in this collection.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the number of elements in this collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Returns an array containing all of the elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a new array object containing all of the elements in this collection.
 		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Returns an array containing all of the elements in this collection.
		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>
		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.
		 (In other words, this method must allocate a new array even if this collection is backed by an array).
		 The caller is thus free to modify the returned array.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:ICollection:org.as3collections:ICollection:allEquatable:get"><apiName>allEquatable</apiName><shortdesc>
		 Indicates whether all elements in this collection implement the interface org.as3coreaddendum.system.IEquatable.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates whether all elements in this collection implement the interface <codeph>org.as3coreaddendum.system.IEquatable</codeph>.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:IListMap"><apiName>IListMap</apiName><shortdesc>
	 An ordered map.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMap</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An ordered map.
	 The user of this interface has precise control over where in the map each mapping is inserted.
	 The user can access mappings by their integer index (position in the map), and search for mappings in the map.
	 <p>The <codeph>IListMap</codeph> interface provides the special <codeph>IListMapIterator</codeph> iterator, that allows mapping insertion and replacement, and bidirectional access in addition to the normal operations that the <codeph>IIterator</codeph> interface provides.
	 The <codeph>listMapIterator()</codeph> method is provided to obtain a <codeph>IListMapIterator</codeph> implementation that may start at a specified position in the map.</p>
	 <p>This interface has the purpose to, in certain degree, unify <codeph>IList</codeph> and <codeph>IMap</codeph> interfaces.</p>
	 <p>The methods that modify the map are specified to throw <codeph>org.as3coreaddendum.errors.UnsupportedOperationError</codeph> if the map does not support the operation.
	 These methods are documented as "optional operation".</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#AbstractListMap"><linktext>AbstractListMap</linktext></link><link href="org.as3collections.xml#IMap"><linktext>IMap</linktext></link><link href="org.as3collections.xml#ISortedMap"><linktext>ISortedMap</linktext></link><link href="org.as3collections.xml#IListMapIterator"><linktext>IListMapIterator</linktext></link></related-links><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:getKeyAt"><apiName>getKeyAt</apiName><shortdesc>
		 Returns the key at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the key at the specified position in this map.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the key at the specified position in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:getValueAt"><apiName>getValueAt</apiName><shortdesc>
		 Returns the value at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value at the specified position in this map.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value at the specified position in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are strictly less than toKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>toKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(toKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new <codeph>IListMap</codeph> that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	high endpoint (exclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:indexOfKey"><apiName>indexOfKey</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified key in this map, or -1 if this map does not contain the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the first occurrence of the specified key in this map, or -1 if this map does not contain the key.
 		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified key in this map, or -1 if this map does not contain the key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:indexOfValue"><apiName>indexOfValue</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified value in this map, or -1 if this map does not contain the value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the index of the first occurrence of the specified value in this map, or -1 if this map does not contain the value.
 		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified value in this map, or -1 if this map does not contain the value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 The specified index indicates the first value that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the value with the specified index minus one.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:putAllAt"><apiName>putAllAt</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map contains one or more keys already added in this map.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which to insert the first entry from the specified map.
		 </apiDesc></apiParam><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).
		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the mapping at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 </apiDesc><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the mapping to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping at the specified position in this map (optional operation).
		 Shifts any subsequent mappings to the left (subtracts one from their indices).
		 Returns an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the mappings whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new map containing all the removed mappings.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the mappings whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent mappings to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the mappings in this map.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setKeyAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the key previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setValueAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value previously at the specified position.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new map that is a view of the specified range within this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned map supports all of the optional map operations supported by this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are greater than or equal to fromKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>fromKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(fromKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>a new map that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 </apiDesc><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	low endpoint (inclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.as3collections:IListMap:org.as3collections:IListMap:modCount:get"><apiName>modCount</apiName><shortdesc>
		 The number of times this map has been structurally modified.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 The number of times this map has been <i>structurally modified</i>.
		 Structural modifications are those that change the size of the map.
		 <p>This field is used by the <codeph>IListMapIterator</codeph> implementation returned by the <codeph>listMapIterator</codeph> method.
		 If the value of this field changes unexpectedly, the <codeph>IListMapIterator</codeph> object will throw a <codeph>org.as3collections.errors.ConcurrentModificationError</codeph> in response to the <codeph>next</codeph>, <codeph>remove</codeph>, <codeph>previous</codeph> or <codeph>put</codeph> operations.</p>
		 <p>Implementations merely has to increment this field in its <codeph>put</codeph>, <codeph>remove</codeph> and any other methods that result in structural modifications to the map.
		 A single call to <codeph>put</codeph> or <codeph>remove</codeph> must add no more than one to this field.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:AbstractHashMap"><apiName>AbstractHashMap</apiName><shortdesc>
	 This class provides a skeletal hash table based implementation of the IMap interface, to minimize the effort required to implement this interface.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class provides a skeletal hash table based implementation of the <codeph>IMap</codeph> interface, to minimize the effort required to implement this interface.
	 <p>This is an abstract class and shouldn't be instantiated directly.</p>
	 <p>This class maintains a native <codeph>flash.utils.Dictionary</codeph> object as its source.</p>
	 <p>This class makes no guarantees as to the order of the map.
	 In particular, it does not guarantee that the order will remain constant over time.</p>
	 <p>The documentation for each non-abstract method in this class describes its implementation in detail.
	 Each of these methods may be overridden if the map being implemented admits a more efficient implementation.</p>
	 <p><b>IMPORTANT:</b></p>
	 <p>This class implements equality through <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface in the <codeph>equals</codeph> method and in all methods that compares the elements inside this collection (i.e. <codeph>containsKey</codeph>, <codeph>containsValue</codeph>, <codeph>put</codeph>, <codeph>remove</codeph>, <codeph>removeAll</codeph> and <codeph>retainAll</codeph>).</p>
	 <p>In order to this map uses the <codeph>equals</codeph> method of its keys and/or values in comparisons (rather than default '==' operator), <b>all keys and/or values in this map must implement the</b> <codeph>org.as3coreaddendum.system.IEquatable</codeph> <b>interface and also the supplied key and/or value.</b></p>
	 <p>For example:</p>
	 <p>myMap.containsKey(myKey);</p>
	 <p>All keys (but in this case only keys) inside <codeph>myMap</codeph>, and <codeph>myKey</codeph>, must implement the <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface so that <codeph>equals</codeph> method of each key can be used in the comparison.
	 Otherwise '==' operator is used. The same is true for values.
	 The use of equality for keys and values are independent.
	 It's possible to use only keys that implement <codeph>IEquatable</codeph>, only values, both, or none.
	 This usage varies according to application needs.</p>
	 <p>All subclasses of this class <i>must</i> conform with this behavior.</p>
	 <p>This documentation is partially based in the <i>Java Collections Framework</i> JavaDoc documentation.
	 For further information see <xref href="http://download.oracle.com/javase/6/docs/technotes/guides/collections/index.html" scope="external">Java Collections Framework</xref></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.xml#IMap"><linktext>IMap</linktext></link><link href="" invalidHref="org.as3collections.HashMap.xml"><linktext>HashMap</linktext></link><link href="org.as3collections.xml#AbstractListMap"><linktext>AbstractListMap</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links><apiConstructor id="org.as3collections:AbstractHashMap:AbstractHashMap"><apiName>AbstractHashMap</apiName><shortdesc>
		 Constructor, creates a new AbstractHashMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiData>null</apiData><apiDesc>		a map with wich fill this map.
		 </apiDesc></apiParam><apiParam><apiItemName>weakKeys</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	instructs the backed <codeph>Dictionary</codeph> object to use "weak" references on object keys. If the only reference to an object is in the specified <codeph>Dictionary</codeph> object, the key is eligible for garbage collection and is removed from the table when the object is collected.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>AbstractHashMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.as3collections:AbstractHashMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this map doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 <p>If all keys in this map and <codeph>key</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the keys.
		 Otherwise this implementation uses <codeph>Dictionary[key] !== undefined</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 <p>If all values in this map and <codeph>value</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the values.
		 Otherwise this implementation uses <codeph>Dictionary[value] !== undefined</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the mappings contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 The type of the objects within the list is <codeph>IMapEntry</codeph>
		 <p>There's no guarantee that the order will remain constant over time.</p>
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:equals"><apiName>equals</apiName><shortdesc>
		 This method uses MapUtil.equalNotConsideringOrder method to perform equality, sending this map and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>MapUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this map and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/equalNotConsideringOrder()"><linktext>MapUtil.equalNotConsideringOrder()</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 <p>If all keys in this map and <codeph>key</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the keys.
		 Otherwise this implementation returns <codeph>Dictionary[key]</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 </apiDesc><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
 		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>an iterator over a set of values.
		 </apiDesc><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation performs a for..in in the specified object, calling put on this map once for each iteration (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation performs a <codeph>for..in</codeph> in the specified object, calling <codeph>put</codeph> on this map once for each iteration (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 <p>This implementation iterates over the specified map, and calls this map's <codeph>put</codeph> operation once for each entry returned by the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation calls <codeph>put(entry.key, entry.value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value.
		 (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified <codeph>keys</codeph> collection (using <codeph>contains</codeph> method of the <codeph>keys</codeph> argument).
		 If it's so contained, it's removed from this map with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys in common with the specified collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified <codeph>keys</codeph> collection (using <codeph>contains</codeph> method of the <codeph>keys</codeph> argument).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map and calls <codeph>IIterator.remove</codeph> once for each key that are not contained in the specified collection.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the string representation of this instance.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>MapUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/toString()"><linktext>MapUtil.toString()</linktext></link></related-links></apiOperation><apiValue id="org.as3collections:AbstractHashMap:allKeysEquatable:get"><apiName>allKeysEquatable</apiName><shortdesc>
		 
		 Indicates whether all keys in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all keys in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3collections:AbstractHashMap:allValuesEquatable:get"><apiName>allValuesEquatable</apiName><shortdesc>
		 
		 Indicates whether all values in this map implements org.as3coreaddendum.system.IEquatable interface.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether all values in this map implements <codeph>org.as3coreaddendum.system.IEquatable</codeph> interface.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3collections:ISortedList"><apiName>ISortedList</apiName><shortdesc>
	 A list that provides a total ordering on its elements.</shortdesc><prolog><author>Fl√°vio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A list that provides a <i>total ordering</i> on its elements.
	 The list is ordered according to the <i>natural ordering</i> of its elements, by a <codeph>IComparator</codeph> typically provided at sorted list creation time, or by the arguments provided to the <codeph>sort</codeph> or <codeph>sortOn</codeph> methods.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="org.as3collections.lists.xml#SortedArrayList"><linktext>SortedArrayList</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ISortable.html"><linktext>org.as3coreaddendum.system.ISortable</linktext></link></related-links><apiOperation id="org.as3collections:ISortedList:org.as3collections:ISortedList:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage>