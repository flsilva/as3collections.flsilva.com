<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="org.as3collections.errors"><apiName>org.as3collections.errors</apiName><apiClassifier id="org.as3collections.errors:IndexOutOfBoundsError"><apiName>IndexOutOfBoundsError</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="org.as3collections.errors:IndexOutOfBoundsError:IndexOutOfBoundsError"><apiName>IndexOutOfBoundsError</apiName><shortdesc>
		 Constructor, creates a new IndexOutOfBoundsError instance.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>A string associated with the error object.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new IndexOutOfBoundsError instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.errors:ConcurrentModificationError"><apiName>ConcurrentModificationError</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="org.as3collections.errors:ConcurrentModificationError:ConcurrentModificationError"><apiName>ConcurrentModificationError</apiName><shortdesc>
		 Constructor, creates a new ConcurrentModificationError instance.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>A string associated with the error object.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new ConcurrentModificationError instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.errors:NoSuchElementError"><apiName>NoSuchElementError</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="org.as3collections.errors:NoSuchElementError:NoSuchElementError"><apiName>NoSuchElementError</apiName><shortdesc>
		 Constructor, creates a new NoSuchElementError instance.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>A string associated with the error object.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new NoSuchElementError instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections.iterators"><apiName>org.as3collections.iterators</apiName><apiClassifier id="org.as3collections.iterators:ReadOnlyListIterator"><apiName>ReadOnlyListIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:ListIterator</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:add"><apiName>add</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ReadOnlyListIterator:set"><apiName>set</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyListIterator</codeph> is a read-only iterator and doesn't allow modifications in the list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ReadOnlyListIterator:ReadOnlyListIterator"><apiName>ReadOnlyListIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyListIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the source <codeph>ReadOnlyListIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified position minus one.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyListIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:ReadOnlyArrayIterator"><apiName>ReadOnlyArrayIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:ArrayIterator</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ReadOnlyArrayIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayIterator</codeph> is a read-only iterator and doesn't allow modifications in the collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ReadOnlyArrayIterator:ReadOnlyArrayIterator"><apiName>ReadOnlyArrayIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyArrayIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiDesc>	the source array to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new ReadOnlyArrayIterator object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:ListIterator"><apiName>ListIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5]);
	 
	 list1                             // [1,3,5]
	 
	 var it:IListIterator = list1.listIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                  // -1
	     it.nextIndex()                // 0
	     it.previousIndex()            // -1
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     if (e == 3)
	     {
	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).
	         it.add(4);
	         list1                     // [1,3,4,5]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 2
	     it.nextIndex()                // 3
	     it.previousIndex()            // 2
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // 3
	     it.nextIndex()                // 4
	     it.previousIndex()            // 3
	 
	     if (e == 5)
	     {
	         it.remove();
	         list1                     // [1,3,4]
	     }
	 }
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5]);
	 
	 list1                             // [1,3,5]
	 
	 var it:IListIterator = list1.listIterator(list1.size());
	 var e:int;
	 
	 while (it.hasPrevious())
	 
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                  // 2
	     it.nextIndex()                // 3
	     it.previousIndex()            // 2
	 
	     e = it.previous();
	     e                             // 5
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     if (e == 5)
	     {
	         it.remove()
	         list1                     // [1,3]
	     }
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     e = it.previous();
	     e                             // 3
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     if (e == 3)
	     {
	         //list1.add(4)            // ConcurrentModificationError: During the iteration, the list was changed directly (without use the iterator).
	         it.add(4);
	         list1                     // [1,4,3]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 1
	     it.nextIndex()                // 2
	     it.previousIndex()            // 1
	 
	     e = it.previous();
	     e                             // 4
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     ITERATION N.4
	 
	     it.pointer()                  // 0
	     it.nextIndex()                // 1
	     it.previousIndex()            // 0
	 
	     e = it.previous();
	     e                             // 1
	 
	     it.pointer()                  // -1
	     it.nextIndex()                // 0
	     it.previousIndex()            // -1
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ListIterator:add"><apiName>add</apiName><shortdesc>
		 
		 Inserts the specified element into the list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the list has changed as a result of the call. Returns <codeph>false</codeph> if the list does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <codeph>next</codeph>, if any, and after the next element that would be returned by <codeph>previous</codeph>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new element. (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements when traversing the list in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>next</codeph>, or list size if list iterator is at end of list.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to <codeph>next</codeph>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the next element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the internal pointer of the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In this implementation the pointer is the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if list iterator is at beginning of list.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:previous"><apiName>previous</apiName><shortdesc>
		 
		 Returns the previous element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no previous elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the previous element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the list the last element that was returned by next or previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the list the last element that was returned by <codeph>next</codeph> or <codeph>previous</codeph>. This call can only be made once per call to <codeph>next</codeph> or <codeph>previous</codeph>. It can be made only if <codeph>IListIterator.add</codeph> has not been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last element returned by next or previous with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last element returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified element (optional operation). This call can be made only if neither <codeph>IListIterator.remove</codeph> nor <codeph>IListIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ListIterator:ListIterator"><apiName>ListIterator</apiName><shortdesc>
		 Constructor, creates a new ListIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>		the source <codeph>ListIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified position minus one. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ListIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:MapIterator"><apiName>MapIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IIterator;
	 import org.as3collections.IMap;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 map1.put("element-7", 7);
	 
	 map1                             // ["element-1"=1,"element-3"=3,"element-5"=5,"element-7"=7]
	 
	 var it:IIterator = map1.iterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	     ITERATION N.1
	 
	     it.pointer()                  // null
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // "element-1"
	 
	     ITERATION N.2
	 
	     it.pointer()                  // "element-1"
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // "element-3"
	 
	     if (e == 3)
	     {
	         it.remove();
	         map1                      // ["element-1"=1,"element-5"=5,"element-7"=7]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // "element-1"
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // "element-5"
	 
	     ITERATION N.4
	 
	     it.pointer()                  // "element-5"
	 
	     e = it.next();
	     e                             // 7
	 
	     it.pointer()                  // "element-7"
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.iterators:MapIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
 		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the next element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the internal pointer of the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:remove"><apiName>remove</apiName><shortdesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:MapIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:MapIterator:MapIterator"><apiName>MapIterator</apiName><shortdesc>
		 Constructor, creates a new MapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the source map to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>MapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:ArrayIterator"><apiName>ArrayIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IIterator;
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList([1, 3, 5, 7]);
	 
	 list1                             // [1,3,5,7]
	 
	 var it:IIterator = list1.iterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	     ITERATION N.1
	 
	     it.pointer()                  // -1
	 
	     e = it.next();
	     e                             // 1
	 
	     it.pointer()                  // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                  // 0
	 
	     e = it.next();
	     e                             // 3
	 
	     it.pointer()                  // 1
	 
	     if (e == 3)
	     {
	         it.remove();
	         list1                     // [1,5,7]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                  // 0
	 
	     e = it.next();
	     e                             // 5
	 
	     it.pointer()                  // 1
	 
	     ITERATION N.4
	 
	     it.pointer()                  // 1
	 
	     e = it.next();
	     e                             // 7
	 
	     it.pointer()                  // 2
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ArrayIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:next"><apiName>next</apiName><shortdesc>
		 
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
 		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the next element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the internal pointer of the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:remove"><apiName>remove</apiName><shortdesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ArrayIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ArrayIterator:ArrayIterator"><apiName>ArrayIterator</apiName><shortdesc>
		 Constructor, creates a new ArrayIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiDesc>	the source array to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new ArrayIterator object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:ListMapIterator"><apiName>ListMapIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListMapIterator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IListMap;
	 import org.as3collections.IListMapIterator;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IListMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 
	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]
	 
	 var it:IListMapIterator = map1.listMapIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                    // null
	     it.nextIndex()                  // 0
	     it.previousIndex()              // -1
	 
	     e = it.next();
	     e                               // 1
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     ITERATION N.2
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     e = it.next();
	     e                               // 3
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     if (e == 3)
	     {
	         //map1.put("element-4", 4)  // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).
	         it.put("element-4", 4);
	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4,"element-5"=5]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                    // "element-4"
	     it.nextIndex()                  // 3
	     it.previousIndex()              // 2
	 
	     e = it.next();
	     e                               // 5
	 
	     it.pointer()                    // "element-5"
	     it.nextIndex()                  // 4
	     it.previousIndex()              // 3
	 
	     if (e == 5)
	     {
	         it.remove();
	         map1                        // ["element-1"=1,"element-3"=3,"element-4"=4]
	     }
	 }
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IListMap;
	 import org.as3collections.IListMapIterator;
	 import org.as3collections.maps.ArrayListMap;
	 
	 var map1:IListMap = new ArrayListMap();
	 map1.put("element-1", 1);
	 map1.put("element-3", 3);
	 map1.put("element-5", 5);
	 
	 map1                                // ["element-1"=1,"element-3"=3,"element-5"=5]
	 
	 var it:IListMapIterator = map1.listIterator(map1.size());
	 var e:int;
	 
	 while (it.hasPrevious())
	 
	 {
	 
	     ITERATION N.1
	 
	     it.pointer()                    // "element-5"
	     it.nextIndex()                  // 3
	     it.previousIndex()              // 2
	 
	     e = it.previous();
	     e                               // 5
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     if (e == 5)
	     {
	         it.remove()
	         map1                        // ["element-1"=1,"element-3"=3]
	     }
	 
	     ITERATION N.2
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     e = it.previous();
	     e                               // 3
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     if (e == 3)
	     {
	         //map1.put("element-4", 4); // ConcurrentModificationError: During the iteration, the map was changed directly (without use the iterator).
	         it.put("element-4", 4);
	         map1                        // [1,4,3]
	     }
	 
	     ITERATION N.3
	 
	     it.pointer()                    // "element-3"
	     it.nextIndex()                  // 2
	     it.previousIndex()              // 1
	 
	     e = it.previous();
	     e                               // 4
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     ITERATION N.4
	 
	     it.pointer()                    // "element-1"
	     it.nextIndex()                  // 1
	     it.previousIndex()              // 0
	 
	     e = it.previous();
	     e                               // 1
	 
	     it.pointer()                    // null
	     it.nextIndex()                  // 0
	     it.previousIndex()              // -1
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ListMapIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 
		 Returns true if the iteration has more mappings when traversing the map in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>, or map size if map iterator is at end of map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>.
		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:next"><apiName>next</apiName><shortdesc>
		 Returns the next value in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the next <codeph>value</codeph> in the iteration.
		 The <codeph>pointer</codeph> operation returns the <codeph>key</codeph> associated with the returned <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the internal pointer of the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In this implementation the pointer is a <codeph>key</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if map iterator is at beginning of map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>.
		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous value in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no previous mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous <codeph>value</codeph> in the iteration.
		 The <codeph>pointer</codeph> operation returns the <codeph>key</codeph> associated with the returned <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map.
		 The mapping is inserted immediately before the next mapping that would be returned by <codeph>next</codeph>, if any, and after the next mapping that would be returned by <codeph>previous</codeph>, if any.
		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)
		 The new mapping is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new mapping.
		 (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the map the last mapping that was returned by next or previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the map the last mapping that was returned by <codeph>next</codeph> or <codeph>previous</codeph>.
		 This call can only be made once per call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 It can be made only if <codeph>IListMapIterator.add</codeph> has not been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.iterators:ListMapIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last mapping returned by next or previous with the specified mapping.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key or value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key and it is not the replaced key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last mapping returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified mapping.
		 This call can be made only if neither <codeph>IListMapIterator.remove</codeph> nor <codeph>IListMapIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ListMapIterator:ListMapIterator"><apiName>ListMapIterator</apiName><shortdesc>
		 Constructor, creates a new ListMapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>		the source <codeph>ListMapIterator</codeph> to iterate over.
		 </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	indicates the first mapping that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the mapping with the specified position minus one. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ListMapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.iterators:ReadOnlyMapIterator"><apiName>ReadOnlyMapIterator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.iterators:MapIterator</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.iterators:ReadOnlyMapIterator:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyMapIterator</codeph> is a read-only iterator and doesn't allow modifications in the map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.iterators:ReadOnlyMapIterator:ReadOnlyMapIterator"><apiName>ReadOnlyMapIterator</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyMapIterator object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the source map to iterate over.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyMapIterator</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections.lists"><apiName>org.as3collections.lists</apiName><apiClassifier id="org.as3collections.lists:UniqueList"><apiName>UniqueList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseClassifier>org.as3collections:UniqueCollection</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 import org.as3collections.lists.UniqueList;
	 import org.as3collections.utils.ListUtil;
	 
	 var l1:IList = new ArrayList([3, 5, 1, 7]);
	 
	 var list1:IList = new UniqueList(l1); // you can use this way
	 
	 //var list1:IList = ListUtil.getUniqueList(l1); // or you can use this way
	 
	 list1                       // [3,5,1,7]
	 list1.size()                // 4
	 
	 list1.addAt(1, 4)           // true
	 list1                       // [3,4,5,1,7]
	 list1.size()                // 5
	 
	 list1.addAt(2, 3)           // false
	 list1                       // [3,4,5,1,7]
	 list1.size()                // 5
	 
	 list1.add(5)                // false
	 list1                       // [3,4,5,1,7]
	 list1.size()                // 5
	 
	 var it:IListIterator = list1.listIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     e = it.next()
	     e                       // 3
	 
	     e = it.next()
	     e                       // 4
	 
	     e = it.next()
	     e                       // 5
	 
	     if (e == 5)
	     {
	         it.add(0)
	 
	         list1               // [3,4,5,0,1,7]
	         list1.size()        // 6
	     }
	 
	     e = it.next()
	     e                       // 1
	 
	     if (e == 1)
	     {
	         it.add(3)
	 
	         list1               // [3,4,5,0,1,7]
	         list1.size()        // 6
	     }
	 
	     e = it.next()
	     e                       // 7
	 }
	 
	 list1                       // [3,4,5,0,1,7]
	 list1.size()                // 6
	 
	 var l2:IList = new ArrayList([1, 2, 3, 4, 5, 1, 3, 5]);
	 
	 var list2:IList = new UniqueList(l2); // you can use this way
	 
	 //var list2:IList = ListUtil.getUniqueList(l2); // or you can use this way
	 
	 list2                       // [1,2,3,4,5]
	 list2.size()                // 5
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:UniqueList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 If the specified collection is empty returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	 if the specified collection contains a <codeph>null</codeph> element and <codeph>wrappedList</codeph> does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if the specified collection is <codeph>null</codeph> or empty. Otherwise returns the return of the call <codeph>wrappedList.addAllAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which to insert the first element from the specified collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedList.addAllAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If the specified collection is empty returns <codeph>false</codeph>.
		 Otherwise, it clones the specified collection, removes from the cloned collection all elements that already are in the <codeph>wrappedList</codeph> and removes all duplicates.
		 Then it forwards the call to <codeph>wrappedList.addAllAt</codeph> sending the cloned (and filtered) collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:addAt"><apiName>addAt</apiName><shortdesc>
		 If wrappedList.contains(element) returns true then returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if <codeph>wrappedList.contains(element)</codeph> returns <codeph>true</codeph>. Otherwise returns the return of the call <codeph>wrappedList.addAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>wrappedList.contains(element)</codeph> returns <codeph>true</codeph> then returns <codeph>false</codeph>.
		 Otherwise, it forwards the call to <codeph>wrappedList.addAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new UniqueList object with the clone of the wrappedList object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>UniqueList</codeph> object with the clone of the <codeph>wrappedList</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>UniqueList</codeph> object with the clone of the <codeph>wrappedList</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:getAt"><apiName>getAt</apiName><shortdesc>
		 Forwards the call to wrappedList.getAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedList.getAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.getAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Forwards the call to wrappedList.indexOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedList.indexOf</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.indexOf</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Forwards the call to wrappedList.lastIndexOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedList.lastIndexOf</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.lastIndexOf</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one. 
		 <p>This implementation returns an <codeph>ListIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ListIterator"><linktext>ListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Forwards the call to wrappedList.removeAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedList.removeAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.removeAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Forwards the call to wrappedList.removeRange.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the return of the call <codeph>wrappedList.removeRange</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.removeRange</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:reverse"><apiName>reverse</apiName><shortdesc>
		 Forwards the call to wrappedList.reverse.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.reverse</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:setAt"><apiName>setAt</apiName><shortdesc>
		 If wrappedList.contains(element) returns true then returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc><codeph>false</codeph> if <codeph>wrappedList.contains(element)</codeph> returns <codeph>true</codeph>. Otherwise returns the return of the call <codeph>wrappedList.setAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>wrappedList.contains(element)</codeph> returns <codeph>true</codeph> then returns <codeph>false</codeph>. Otherwise, it forwards the call to <codeph>wrappedList.setAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new UniqueList(wrappedList.subList(fromIndex, toIndex)).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new <codeph>UniqueList(wrappedList.subList(fromIndex, toIndex))</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>UniqueList(wrappedList.subList(fromIndex, toIndex))</codeph>. 
		 <p>Modifications in the returned <codeph>UniqueList</codeph> object does not affect this list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:UniqueList:UniqueList"><apiName>UniqueList</apiName><shortdesc>
		 Constructor, creates a new UniqueList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrappedList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the target list to wrap.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>UniqueList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:TypedList"><apiName>TypedList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseClassifier>org.as3collections:TypedCollection</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.ArrayList;
	 import org.as3collections.lists.TypedList;
	 import org.as3collections.utils.ListUtil;
	 
	 var l1:IList = new ArrayList([3, 5, 1, 7]);
	 
	 var list1:IList = new TypedList(l1, int); // you can use this way
	 
	 //var list1:IList = ListUtil.getTypedList(l1, int); // or you can use this way
	 
	 list1                          // [3,5,1,7]
	 list1.size()                   // 4
	 
	 list1.add(8)                   // true
	 list1                          // [3,5,1,7,8]
	 list1.size()                   // 5
	 
	 list1.addAt(1, 4)              // true
	 list1                          // [3,4,5,1,7,8]
	 list1.size()                   // 6
	 
	 list1.remove("abc")            // false
	 list1                          // [3,4,5,1,7,8]
	 list1.size()                   // 6
	 
	 var it:IListIterator = list1.listIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     e = it.next()
	     e                          // 3
	 
	     e = it.next()
	     e:                         // 4
	 
	     e = it.next()
	     e                          // 5
	 
	     if (e == 5)
	     {
	         it.add(0)
	 
	         list1                  // [3,4,5,0,1,7,8]
	         list1.size()           // 7
	     }
	 
	     e = it.next()
	     e                          // 1
	 
	     if (e == 1)
	     {
	         it.add(3)
	 
	         list1                  // [3,4,5,0,1,3,7,8]
	         list1.size()           // 8
	     }
	 
	     e = it.next()
	     e                          // 7
	 
	     e = it.next()
	     e                          // 8
	 
	     if (e == 8)
	     {
	         it.add("ghi")          // ClassCastError: Invalid element type. element: ghi | type: String | expected type: int
	     }
	 }
	 
	 list1                          // [3,4,5,0,1,3,7,8]
	 list1.size()                   // 8
	 
	 list1.add("def")               // ClassCastError: Invalid element type. element: def | type: String | expected type: int
	 
	 list1.setAt(0, 1)              // 3
	 list1                          // [1,4,5,0,1,3,7,8]
	 list1.size()                   // 8
	 
	 list1.setAt(0, [1,2])          // ClassCastError: Invalid element type. element: 1,2 | type: Array | expected type: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:TypedList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 The collection is validated to be forwarded to wrappedList.addAllAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the types of one or more elements in the <codeph>collection</codeph> argument are incompatible with the type of this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedList.addAllAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedList.addAllAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The collection is validated to be forwarded to <codeph>wrappedList.addAllAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:addAt"><apiName>addAt</apiName><shortdesc>
		 The element is validated to be forwarded to wrappedList.addAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the element is incompatible with the type of this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedList.addAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedList.addAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The element is validated to be forwarded to <codeph>wrappedList.addAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedList object with a clone of the wrappedList object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedList</codeph> object with a clone of the <codeph>wrappedList</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedList</codeph> object with a clone of the <codeph>wrappedList</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:equals"><apiName>equals</apiName><shortdesc>
		 This method first checks if other argument is a TypedList.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method first checks if <codeph>other</codeph> argument is a <codeph>TypedList</codeph>.
		 If not it returns <codeph>false</codeph>.
		 If <codeph>true</codeph> it checks the <codeph>type</codeph> property of both lists.
		 If they are different it returns <codeph>false</codeph>.
		 Otherwise it uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:TypedList:getAt"><apiName>getAt</apiName><shortdesc>
		 Forwards the call to wrappedList.getAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedList.getAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.getAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Forwards the call to wrappedList.indexOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedList.indexOf</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.indexOf</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Forwards the call to wrappedList.lastIndexOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedList.lastIndexOf</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.lastIndexOf</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list. The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified index minus one. 
		 <p>This implementation returns an <codeph>ListIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ListIterator"><linktext>ListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:TypedList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Forwards the call to wrappedList.removeAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedList.removeAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.removeAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Forwards the call to wrappedList.removeRange.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the return of the call <codeph>wrappedList.removeRange</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.removeRange</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:reverse"><apiName>reverse</apiName><shortdesc>
		 Forwards the call to wrappedList.reverse.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.reverse</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:setAt"><apiName>setAt</apiName><shortdesc>
		 The element is validated to be forwarded to wrappedList.setAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the element is incompatible with the type of this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedList.setAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedList.setAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The element is validated to be forwarded to <codeph>wrappedList.setAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new TypedList(wrappedList.subList(fromIndex, toIndex)).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new <codeph>TypedList(wrappedList.subList(fromIndex, toIndex))</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedList(wrappedList.subList(fromIndex, toIndex))</codeph>. 
		 <p>Modifications in the returned <codeph>TypedList</codeph> object does not affect this list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:TypedList:TypedList"><apiName>TypedList</apiName><shortdesc>
		 Constructor, creates a new TypedList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the target list to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by this list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:ReadOnlyArrayList"><apiName>ReadOnlyArrayList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractList</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 import org.as3collections.lists.ReadOnlyArrayList;
	 
	 var list1:IList = new ArrayList([3, 5, 1, 7]);
	 
	 list1                       // [3,5,1,7]
	 
	 var list2:IList = new ReadOnlyArrayList(list1.toArray());
	 
	 list2                       // [3,5,1,7]
	 
	 list2.add(1)                // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.
	 list2.remove(1)             // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.
	 
	 var list3:IList = list2.clone();
	 
	 list3                       // [3,5,1,7]
	 
	 list3.contains(2)           // false
	 list3.contains(5)           // true
	 list3.indexOf(5)            // 1
	 list3.containsAll(list1)    // true
	 list3.equals(list1)         // false
	 list3.getAt(2)              // 1
	 list3.subList(1, 3)         // [5,1]
	 
	 list3.addAll(list2)         // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.
	 list3.removeRange(1, 3)     // UnsupportedOperationError: ReadOnlyArrayList is a read-only list and doesn't allow modifications.
	 
	 var it:IIterator = list3.iterator();
	 
	 while (it.hasNext())
	 {
	     it.next()
	 
	     it.remove()             // UnsupportedOperationError: ReadOnlyArrayIterator is a read-only iterator and doesn't allow modifications in the collection.
	 }
	 
	 var it2:IListIterator = list3.listIterator();
	 
	 while (it2.hasNext())
	 {
	     it2.next()
	 
	     it.add(1)               // UnsupportedOperationError: ReadOnlyListIterator is a read-only iterator and doesn't allow modifications in the list.
	 }
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:addAll"><apiName>addAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:addAt"><apiName>addAt</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:add"><apiName>add</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:clear"><apiName>clear</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new ReadOnlyArrayList object containing all elements in this list (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>ReadOnlyArrayList</codeph> object containing all elements in this list (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>ReadOnlyArrayList</codeph> object containing all elements in this list (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of elements.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 <p>This implementation returns a <codeph>ReadOnlyArrayIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ReadOnlyArrayIterator"><linktext>ReadOnlyArrayIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list. The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>. An initial call to <codeph>previous</codeph> would return the element with the specified index minus one.
		 <p>This implementation returns a <codeph>ReadOnlyListIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ReadOnlyListIterator"><linktext>ReadOnlyListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:removeAll"><apiName>removeAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc/></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:retainAll"><apiName>retainAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:reverse"><apiName>reverse</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/><apiDesc>
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:setAt"><apiName>setAt</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayList</codeph> is a read-only list and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ReadOnlyArrayList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new ReadOnlyArrayList that is a view of the portion of this ReadOnlyArrayList between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new <codeph>ReadOnlyArrayList</codeph> that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>ReadOnlyArrayList</codeph> that is a view of the portion of this <codeph>ReadOnlyArrayList</codeph> between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:ReadOnlyArrayList:ReadOnlyArrayList"><apiName>ReadOnlyArrayList</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyArrayList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiDesc>	an array to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyArrayList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:UniqueSortedList"><apiName>UniqueSortedList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedList</apiBaseInterface><apiBaseClassifier>org.as3collections.lists:UniqueList</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3collections.lists.UniqueSortedList;
	 import org.as3collections.utils.ListUtil;
	 
	 var l1:ISortedList = new SortedArrayList([3, 5, 1, 7], null, Array.NUMERIC);
	 
	 var list1:ISortedList = new UniqueSortedList(l1); // you can use this way
	 
	 //var list1:ISortedList = ListUtil.getUniqueSortedList(l1); // or you can use this way
	 
	 list1                       // [1,3,5,7]
	 list1.size()                // 4
	 
	 list1.addAt(1, 4)           // true
	 list1                       // [1,3,4,5,7]
	 list1.size()                // 5
	 
	 list1.addAt(2, 3)           // false
	 list1                       // [1,3,4,5,7]
	 list1.size()                // 5
	 
	 list1.add(5)                // false
	 list1                       // [1,3,4,5,7]
	 list1.size()                // 5
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:UniqueSortedList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new UniqueSortedList object with the clone of the wrappedMap object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>UniqueSortedList</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>UniqueSortedList</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueSortedList:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 <li>elements have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the elements in the list.
		 So, for two lists are equal the order of elements returned by the iterator must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueSortedList:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Forwards the call to wrappedList.sortOn.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.sortOn</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueSortedList:sort"><apiName>sort</apiName><shortdesc>
		 Forwards the call to wrappedList.sort.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.sort</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:UniqueSortedList:subList"><apiName>subList</apiName><shortdesc>
		 Forwards the call to wrappedList.subList.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.subList</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:UniqueSortedList:UniqueSortedList"><apiName>UniqueSortedList</apiName><shortdesc>
		 Constructor, creates a new TypedList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:ISortedList</apiOperationClassifier><apiDesc>	the target list to wrap.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:ArrayList"><apiName>ArrayList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractList</apiBaseClassifier></apiClassifierDef><example>
	 
	 <b>Example 1</b>
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:IList = new ArrayList();
	 
	 list1                           // []
	 
	 list1.size()                    // 0
	 list1.contains(null)            // false
	 list1.contains("abc")           // false
	 list1.isEmpty()                 // true
	 list1.modCount                  // 0
	 
	 list1.clear()
	 
	 list1.modCount                  // 0
	 list1.isEmpty()                 // true
	 list1.size()                    // 0
	 
	 list1.add(null)                 // true
	 list1                           // [null]
	 list1.isEmpty()                 // false
	 list1.size()                    // 1
	 list1.modCount                  // 1
	 list1.contains(null)            // true
	 list1.contains("abc")           // false
	 
	 list1.add("abc")                // true
	 list1                           // [null,abc]
	 list1.size()                    // 2
	 list1.modCount                  // 2
	 list1.contains("abc")           // true
	 
	 list1.add(null)                 // true
	 list1                           // [null,abc,null]
	 list1.size()                    // 3
	 list1.modCount                  // 3
	 list1.indexOf(null)             // 0
	 list1.lastIndexOf(null)         // 2
	 
	 list1.addAt(0, 123)             // true
	 list1                           // [123,null,abc,null]
	 list1.size()                    // 4
	 list1.modCount                  // 4
	 
	 list1.addAt(4, "def")           // true
	 list1                           // [123,null,abc,null,def]
	 list1.size()                    // 5
	 
	 list1.addAt(4, "abc")           // true
	 list1                           // [123,null,abc,null,abc,def]
	 list1.size()                    // 6
	 list1.modCount                  // 6
	 
	 list1.getAt(0)                  // 123
	 list1.getAt(2)                  // abc
	 list1.getAt(5)                  // def
	 
	 list1.removeAt(0)               // 123
	 list1                           // [null,abc,null,abc,def]
	 list1.size()                    // 5
	 list1.modCount                  // 7
	 
	 list1.removeAt(4)               // def
	 list1                           // [null,abc,null,abc]
	 list1.size()                    // 4
	 list1.modCount                  // 8
	 
	 list1.removeAt(0)               // null
	 list1                           // [abc,null,abc]
	 list1.size()                    // 3
	 list1.modCount                  // 9
	 
	 var list2:IList = list1.clone();
	 
	 list2                           // [abc,null,abc]
	 
	 list1.containsAll(list1)        // true
	 list1.containsAll(list2)        // true
	 list2.containsAll(list1)        // true
	 list1.equals(list2)             // true
	 
	 list2.remove("abc")             // true
	 list2.remove("abc")             // true
	 list2.add(null)                 // true
	 list2                           // [null,null]
	 
	 list1.containsAll(list2)        // true
	 list2.containsAll(list1)        // false
	 list1.equals(list2)             // false
	 
	 list1                           // [abc,null,abc]
	 list1.size()                    // 3
	 list1.setAt(2, "ghi")           // abc
	 list1                           // [abc,null,ghi]
	 list1.size()                    // 3
	 list1.modCount                  // 9
	 
	 list1.clear()
	 
	 list1.modCount                  // 10
	 list1.isEmpty()                 // true
	 list1.size()                    // 0
	 </codeblock>
	 
	 <b>Example 2</b>
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 
	 var arr:Array = [1, 2, 3, 4];
	 var list1:IList = new ArrayList(arr);
	 
	 list1                                 // [1,2,3,4]
	 list1.size()                          // 4
	 list1.isEmpty()                       // false
	 list1.modCount                        // 0
	 
	 var list2:IList = new ArrayList([9, 10, 11, 12]);
	 
	 list2                                 // [9,10,11,12]
	 list2.size()                          // 4
	 list2.isEmpty()                       // false
	 list2.modCount                        // 0
	 
	 list1.addAll(list2)                   // true
	 list1                                 // [1,2,3,4,9,10,11,12]
	 list1.size()                          // 8
	 list1.modCount                        // 4
	 
	 var list3:IList = new ArrayList([5, 6, 7, 8]);
	 
	 list3                                 // [5,6,7,8]
	 list3.size()                          // 4
	 list3.isEmpty()                       // false
	 list3.modCount                        // 0
	 
	 list1.addAllAt(4, list3)              // true
	 list1                                 // [1,2,3,4,5,6,7,8,9,10,11,12]
	 list1.size()                          // 12
	 list1.modCount                        // 8
	 
	 list1.containsAll(list3)              // true
	 list3.containsAll(list1)              // false
	 
	 list1.removeAll(list3)                // true
	 list1                                 // [1,2,3,4,9,10,11,12]
	 list1.size()                          // 8
	 list1.modCount                        // 12
	 
	 list1.removeAll(list3)                // false
	 list1                                 // [1,2,3,4,9,10,11,12]
	 list1.size()                          // 8
	 list1.modCount                        // 12
	 
	 list1.retainAll(list2)                // true
	 list1                                 // [9,10,11,12]
	 list1.size()                          // 4
	 list1.modCount                        // 16
	 
	 list1.subList(0, 1)                   // [9]
	 list1.subList(0, 2)                   // [9,10]
	 list1.subList(0, 4)                   // [9,10,11,12]
	 list1.subList(0, list1.size())        // [9,10,11,12]
	 
	 list1.removeRange(1, 3)               // [10,11]
	 list1                                 // [9,12]
	 list1.size()                          // 2
	 list1.modCount                        // 17
	 
	 list1.remove(9)                       // true
	 list1                                 // [12]
	 list1.size()                          // 1
	 list1.modCount                        // 18
	 
	 list1.retainAll(list3)                // true
	 list1                                 // []
	 list1.size()                          // 0
	 list1.modCount                        // 19
	 </codeblock>
	 
	 <b>Example 3</b>
	 <codeblock rev="3.0">
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 
	 var list1:ArrayList = new ArrayList();
	 
	 list1                     // []
	 list1.addAt(3, 4)         // IndexOutOfBoundsError: The 'index' argument is out of bounds: 3 (min: 0, max: 0)
	 
	 list1.ensureCapacity(5)
	 
	 list1                     // [undefined,undefined,undefined,undefined,undefined]
	 list1.modCount            // 1
	 list1.isEmpty()           // false
	 list1.size()              // 5
	 
	 list1.addAt(3, 4)         // true
	 list1                     // [undefined,undefined,undefined,4,undefined,undefined]
	 list1.modCount            // 2
	 list1.size()              // 6
	 
	 list1.getAt(1)            // undefined
	 
	 list1.ensureCapacity(3)
	 
	 list1                     // [undefined,undefined,undefined,4,undefined,undefined]
	 list1.modCount            // 2
	 list1.size()              // 6
	 
	 list1.setAt(2, 3)         // undefined
	 list1                     // [undefined,undefined,3,4,undefined,undefined]
	 list1.modCount            // 2
	 list1.size()              // 6
	 
	 list1.remove(undefined)   // true
	 list1.remove(undefined)   // true
	 list1                     // [3,4,undefined,undefined]
	 list1.modCount            // 4
	 list1.size()              // 4
	 </codeblock>
	 
	 <b>Example 4 - Using equality (org.as3coreaddendum.system.IEquatable)</b>
	 
	 <codeblock rev="3.0">
	 package test
	 {
	     import org.as3coreaddendum.system.IEquatable;
	 
	     public class TestEquatableObject implements IEquatable
	     {
	         private var _id:String;
	 		
	         public function get id(): String { return _id; }
	 
	         public function set id(value:String): void { _id = value; }
	 
	         public function TestEquatableObject(id:String)
	         {
	             _id = id;
	         }
	 
	         public function equals(other:: Boolean
	         {
	             return other is TestEquatableObject &amp;&amp; _id == (other as TestEquatableObject).id;
	         }
	 
	         public function toString(): String
	         {
	             return "[TestEquatableObject " + _id + "]";
	         }
	     }
	 }
	 </codeblock>
	 
	 <codeblock rev="3.0">
	 import test.TestEquatableObject;
	 
	 import org.as3collections.IList;
	 import org.as3collections.lists.ArrayList;
	 import org.as3collections.lists.UniqueList;
	 
	 var list1:ArrayList = new ArrayList();
	 
	 list1                               // []
	 
	 var o1:TestEquatableObject = new TestEquatableObject("o1");
	 var o2:TestEquatableObject = new TestEquatableObject("o2");
	 var o3:TestEquatableObject = new TestEquatableObject("o3");
	 var o4:TestEquatableObject = new TestEquatableObject("o4");
	 
	 list1.contains(o1)                  // false
	 list1.add(o1)                       // true
	 list1                               // [[TestEquatableObject o1]]
	 list1.contains(o1)                  // true
	 
	 var o5:TestEquatableObject = new TestIndexablePriority("o1"); // -&gt; Attention to the id, which is "o1"
	 
	 list1.contains(o5)                  // true -&gt; without equality would return false, because o1 and o5 are different objects.
	 
	 list1.add(o5)                       // true
	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]
	 
	 o1.equals(o5)                       // true
	 o1.equals("abc")                    // false
	 
	 var list2:ArrayList = new ArrayList();
	 
	 list2.equals(list1)                 // false
	 list2.add(o5)                       // true
	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]
	 list2                               // [[TestEquatableObject o1]]
	 list2.equals(list1)                 // false
	 
	 list2.add(o5)                       // true
	 list1                               // [[TestEquatableObject o1],[TestEquatableObject o1]]
	 list2                               // [[TestEquatableObject o1],[TestEquatableObject o1]]
	 list2.equals(list1)                 // true
	 
	 list2.remove(o1)                    // true -&gt; equality used
	 list2                               // [[TestEquatableObject o1]]
	 
	 var uniqueList:UniqueList = new UniqueList(new ArrayList());
	 
	 uniqueList.contains(o1)             // false
	 uniqueList.add(o1)                  // true
	 uniqueList                          // [[TestEquatableObject o1]]
	 uniqueList.contains(o1)             // true
	 
	 uniqueList.add(o5)                  // false
	 uniqueList.contains(o5)             // true -&gt; by equality the object o5 is in the list because its 'id' is the same of the object o1.
	 uniqueList                          // [[TestEquatableObject o1]]
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:ArrayList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list.
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this list.
		 The list will be empty after this method returns.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new ArrayList object containing all elements in this list (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>ArrayList</codeph> object containing all elements in this list (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>ArrayList</codeph> object containing all elements in this list (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:ensureCapacity"><apiName>ensureCapacity</apiName><shortdesc>
		 Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minCapacity argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>minCapacity</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
		 Increases the capacity of this <codeph>ArrayList</codeph> instance, if necessary, to ensure that it can hold at least the number of elements specified by the <codeph>minCapacity</codeph> argument.
		 <p>This implementation uses <codeph>Array.length = minCapacity</codeph> of the internal array object.</p>
 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of elements.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 <p>This implementation returns an <codeph>ArrayIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ArrayIterator"><linktext>ArrayIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one. 
		 <p>This implementation returns an <codeph>ListIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ListIterator"><linktext>ListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the element to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the element at the specified position in this list.
		 Shifts any subsequent elements to the left (subtracts one from their indices).
		 Returns the element that was removed from the list. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>a new <codeph>ArrayList</codeph> object containing all the removed elements.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the elements whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 Shifts any subsequent elements to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:ArrayList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new ArrayList that is a view of the portion of this ArrayList between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new <codeph>ArrayList</codeph> that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>ArrayList</codeph> that is a view of the portion of this <codeph>ArrayList</codeph> between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 This method uses native <codeph>Array.slice</codeph> method.
		 <p>Modifications in the returned <codeph>ArrayList</codeph> object doesn't affect this list.</p>
		 <p>This list is not modified.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:ArrayList:ArrayList"><apiName>ArrayList</apiName><shortdesc>
		 Constructor, creates a new ArrayList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ArrayList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:TypedSortedList"><apiName>TypedSortedList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedList</apiBaseInterface><apiBaseClassifier>org.as3collections.lists:TypedList</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.IListIterator;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3collections.lists.TypedSortedList;
	 import org.as3collections.utils.ListUtil;
	 
	 var l1:ISortedList = new SortedArrayList([3, 5, 7], null, Array.NUMERIC);
	 
	 var list1:ISortedList = new TypedSortedList(l1, int); // you can use this way
	 
	 //var list1:ISortedList = ListUtil.getTypedSortedList(l1, int); // or you can use this way
	 
	 list1                          // [3,5,7]
	 list1.size()                   // 3
	 
	 list1.add(8)                   // true
	 list1                          // [3,5,7,8]
	 list1.size()                   // 4
	 
	 list1.remove("abc")            // false
	 list1                          // [3,4,5,7,8]
	 list1.size()                   // 5
	 
	 var it:IListIterator = list1.listIterator();
	 var e:int;
	 
	 while (it.hasNext())
	 {
	 
	     e = it.next()
	     e                          // 3
	 
	     e = it.next()
	     e:                         // 4
	 
	     e = it.next()
	     e                          // 5
	 
	     if (e == 5)
	     {
	         it.add("ghi")          // ClassCastError: Invalid element type. element: ghi | type: String | expected type: int
	     }
	 }
	 
	 list1.setAt(0, [1,2])          // ClassCastError: Invalid element type. element: 1,2 | type: Array | expected type: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:TypedSortedList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedSortedList object with the clone of the wrappedMap object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedSortedList</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedSortedList</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedSortedList:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 <li>elements have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the elements in the list.
		 So, for two lists are equal the order of elements returned by the iterator must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedSortedList:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Forwards the call to wrappedList.sortOn.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.sortOn</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedSortedList:sort"><apiName>sort</apiName><shortdesc>
		 Forwards the call to wrappedList.sort.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.sort</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:TypedSortedList:subList"><apiName>subList</apiName><shortdesc>
		 Forwards the call to wrappedList.subList.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedList.subList</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:TypedSortedList:TypedSortedList"><apiName>TypedSortedList</apiName><shortdesc>
		 Constructor, creates a new TypedList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:ISortedList</apiOperationClassifier><apiDesc>	the target list to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by this list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.lists:SortedArrayList"><apiName>SortedArrayList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedList</apiBaseInterface><apiBaseClassifier>org.as3collections.lists:ArrayList</apiBaseClassifier></apiClassifierDef><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 
	 var list1:ISortedList = new SortedArrayList([3, 5, 1, 7], null, Array.NUMERIC | Array.DESCENDING);
	 
	 list1                       // [7,5,3,1]
	 list1.size()                // 4
	 
	 list1.addAt(3, 8)           // true
	 list1                       // [8,7,5,3,1]
	 list1.size()                // 5
	 
	 list1.add(4)                // true
	 list1                       // [8,7,5,4,3,1]
	 list1.size()                // 6
	 
	 list1.add(5)                // true
	 list1                       // [8,7,5,5,4,3,1]
	 list1.size()                // 7
	 
	 list1.sort(null, Array.NUMERIC)
	 list1                       // [1,3,4,5,5,7,8]
	 
	 list1.add(2)                // true
	 list1                       // [8,7,5,5,4,3,2,1]
	 list1.size()                // 8
	 
	 list1.reverse()
	 list1                       // [1,2,3,4,5,5,7,8]
	 
	 list1.add(6)                // true
	 list1                       // [1,2,3,4,5,5,6,7,8]
	 
	 list1.add(9)                // true
	 list1                       // [1,2,3,4,5,5,6,7,8,9]
	 
	 list1.reverse()
	 list1                       // [9,8,7,6,5,5,4,3,2,1]
	 
	 list1.add(10)               // true
	 list1                       // [10,9,8,7,6,5,5,4,3,2,1]
	 
	 list1.add(-1)               // true
	 list1                       // [10,9,8,7,6,5,5,4,3,2,1,-1]
	 
	 //list1.add("c")            // TypeError: Error #1034: Falha de coerção de tipo: não é possível converter "c" em Number.
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;
	 
	 var comparator:AlphabeticComparator = new AlphabeticComparator(false);
	 var arr:Array = ["c", "a", "d", "b"];
	 var list1:ISortedList = new SortedArrayList(arr, comparator);
	 
	 list1                              // [a,b,c,f]
	 list1.size()                       // 4
	 
	 list1.addAt(1, "x")                // true
	 list1                              // [a,b,c,f,x]
	 list1.size()                       // 5
	 
	 list1.add("d")                     // true
	 list1                              // [a,b,c,d,f,x]
	 list1.size()                       // 6
	 
	 list1.add("d")                     // true
	 list1                              // [a,b,c,d,d,f,x]
	 list1.size()                       // 7
	 
	 list1.sort()
	 list1                              // [a,b,c,d,d,f,x]
	 
	 list1.add(2)                       // true
	 list1                              // [2,a,b,c,d,d,f,x]
	 list1.size()                       // 8
	 </codeblock>
	 
	 <b>Example 3</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 
	 var arr:Array = [5, 1, 100, 10, 99];
	 var list1:ISortedList = new SortedArrayList(arr); // default behavior of the sort method
	 
	 list1                       // [1,10,100,5,99]
	 list1.size()                // 5
	 
	 list1.add(50)               // true
	 list1                       // [1,10,100,5,50,99]
	 list1.size()                // 6
	 
	 list1.sort(null, Array.NUMERIC)
	 list1                       // [1,5,10,50,99,100]
	 
	 list1.add(200)              // true
	 list1                       // [1,10,100,200,5,50,99]
	 list1.size()                // 7
	 </codeblock>
	 
	 <b>Example 4 - Unique Sorted List</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3collections.utils.ListUtil;
	 
	 var arr:Array = [5, 1, 100, 10, 99, 5];
	 
	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);
	 
	 var list1:ISortedList = ListUtil.getUniqueSortedList(l1);  // return type is UniqueSortedList
	 
	 list1                 // [100,99,10,5,1]
	 list1.size()          // 5
	 
	 list1.add(50)         // true
	 list1                 // [100,99,50,10,5,1]
	 list1.size()          // 6
	 
	 list1.add(10)         // false
	 list1                 // [100,99,50,10,5,1]
	 list1.size()          // 6
	 </codeblock>
	 
	 <b>Example 5 - Typed Sorted List</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3collections.utils.ListUtil;
	 
	 var arr:Array = [5, 1, 100, 10, 99, 5];
	 
	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);
	 
	 var list1:ISortedList = ListUtil.getTypedSortedList(l1);  // return type is TypedSortedList
	 
	 list1                 // [100,99,10,5,5,1]
	 list1.size()          // 6
	 
	 list1.add(50)         // true
	 list1                 // [100,99,50,10,5,5,1]
	 list1.size()          // 7
	 
	 list1.add(10)         // true
	 list1                 // [100,99,50,10,10,5,5,1]
	 list1.size()          // 8
	 
	 list1.add("a")        // ClassCastError: Invalid element type. element: a | type: String | expected type: int
	 </codeblock>
	 
	 <b>Example 6 - Unique Typed Sorted List</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedList;
	 import org.as3collections.lists.SortedArrayList;
	 import org.as3collections.utils.ListUtil;
	 
	 var arr:Array = [5, 1, 100, 10, 99, 5];
	 
	 var l1:ISortedList = new SortedArrayList(arr, null, Array.NUMERIC | Array.DESCENDING);
	 
	 var list1:ISortedList = ListUtil.getUniqueTypedSortedList(l1);  // return type is TypedSortedList
	 
	 list1                 // [100,99,10,5,1]
	 list1.size()          // 5
	 
	 list1.add(50)         // true
	 list1                 // [100,99,50,10,5,1]
	 list1.size()          // 6
	 
	 list1.add(10)         // false
	 list1                 // [100,99,50,10,5,1]
	 list1.size()          // 6
	 
	 list1.add("a")        // ClassCastError: Invalid element type. element: a | type: String | expected type: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.lists:SortedArrayList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list.
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 <p>Before returning, the list is reordered, so there's no guarantee that the element remains in the inserted position.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new SortedArrayList object containing all elements in this list (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>SortedArrayList</codeph> object containing all elements in this list (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>SortedArrayList</codeph> object containing all elements in this list (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 <li>elements have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the elements in the list.
		 So, for two lists are equal the order of elements returned by the iterator object must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the list.
		 When this method is called, the list is reversed and an internal status <i>reversed</i> (<codeph>true</codeph>/<codeph>false</codeph>) is stored.
		 When the list is automatically ordered by any change, if status is <i>reversed</i> = <codeph>true</codeph>, the list remains reversed.
		 Thus, after any change it will remain sorted and reversed as it was before the change.
		 A second call to <codeph>reverse</codeph> will reverse the list again and change the status to <i>reversed</i> = <codeph>false</codeph>.
		 The default value is <codeph>false</codeph>.
		 This condition is not used in the user call to <codeph>sort</codeph> or <codeph>sortOn</codeph> methods (i.e. even if status is <i>reversed</i> = <codeph>true</codeph> it will not be used automatically).
		 So if is desirable to reverse the list after directly call <codeph>sort</codeph> or <codeph>sortOn</codeph> methods, <codeph>reverse</codeph> method should be explicitly called after that.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element.
		 <p>Before returning, the list is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:sortOn"><apiName>sortOn</apiName><shortdesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:sort"><apiName>sort</apiName><shortdesc>
		 Sorts the objects within this class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the objects within this class.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/ISortable.html"><linktext>org.as3coreaddendum.system.ISortable</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.lists:SortedArrayList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new SortedArrayList that is a view of the portion of this SortedArrayList between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new <codeph>SortedArrayList</codeph> that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>SortedArrayList</codeph> that is a view of the portion of this <codeph>SortedArrayList</codeph> between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>Modifications in the returned <codeph>SortedArrayList</codeph> object doesn't affect this list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.lists:SortedArrayList:SortedArrayList"><apiName>SortedArrayList</apiName><shortdesc>
		 Constructor, creates a new SortedArrayList object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>		an array to fill the list.
		 </apiDesc></apiParam><apiParam><apiItemName>comparator</apiItemName><apiType value="org.as3coreaddendum.system:IComparator"/><apiData>null</apiData><apiDesc>	the comparator object to be used internally to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	the options to be used internally to sort.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>SortedArrayList</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections.maps"><apiName>org.as3collections.maps</apiName><apiClassifier id="org.as3collections.maps:TypedMap"><apiName>TypedMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IMap;
	 import org.as3collections.maps.ArrayListMap;
	 import org.as3collections.maps.TypedMap;
	 
	 var map1:IMap = new ArrayListMap();
	 
	 map1.put("e", 1)            // null
	 map1.put("d", 2)            // null
	 map1.put("c", 3)            // null
	 map1.put("b", 4)            // null
	 map1.put("a", 5)            // null
	 
	 map1                        // {e=1,d=2,c=3,b=4,a=5}
	 map1.size()                 // 5
	 
	 var map2:IMap = new TypedMap(map1, String, Number); // you can use this way
	 
	 //var map2:IMap = MapUtil.getTypedMap(map1, String, Number); // or you can use this way
	 
	 map2                        // {e=1,d=2,c=3,b=4,a=5}
	 map2.size()                 // 5
	 
	 map2.equals(map1)           // false
	 
	 map2.put("f", 6)            // null
	 map2                        // {e=1,d=2,c=3,b=4,a=5,f=6}
	 map2.size()                 // 6
	 
	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number
	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:TypedMap:clear"><apiName>clear</apiName><shortdesc>
		 Forwards the call to wrappedMap.clear.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.clear</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedMap object with the clone of the wrappedMap object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 Forwards the call to wrappedMap.containsKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedMap.containsKey</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.containsKey</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 Forwards the call to wrappedMap.containsValue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedMap.containsValue</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.containsValue</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Forwards the call to wrappedMap.entryCollection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.entryCollection</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:equals"><apiName>equals</apiName><shortdesc>
		 This method uses MapUtil.equalNotConsideringOrder or MapUtil.equalConsideringOrder method to perform equality, sending this map and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>MapUtil.equalNotConsideringOrder</codeph> or <codeph>MapUtil.equalConsideringOrder</codeph> method to perform equality, sending this map and <codeph>other</codeph> argument.
		 <p>If <codeph>wrappedMap</codeph> is of type <codeph>AbstractListMap</codeph> then <codeph>MapUtil.equalConsideringOrder</codeph> method is used.
		 Otherwise <codeph>MapUtil.equalNotConsideringOrder</codeph> method is used.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/equalConsideringOrder()"><linktext>MapUtil.equalConsideringOrder()</linktext></link><link href="org.as3collections.utils.xml#MapUtil/equalNotConsideringOrder()"><linktext>MapUtil.equalNotConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Forwards the call to wrappedMap.getKeys.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.getKeys</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Forwards the call to wrappedMap.getValue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.getValue</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Forwards the call to wrappedMap.getValues.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.getValues</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Forwards the call to wrappedMap.isEmpty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.isEmpty</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Forwards the call to wrappedMap.iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.iterator</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 The objects is validated to be forwarded to wrappedMap.putAllByObject.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The objects is validated to be forwarded to <codeph>wrappedMap.putAllByObject</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:putAll"><apiName>putAll</apiName><shortdesc>
		 The map is validated with the validateMap method to be forwarded to wrappedMap.putAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The map is validated with the <codeph>validateMap</codeph> method to be forwarded to <codeph>wrappedMap.putAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 The entry is validated with the validateKeyType and validateValueType methods to be forwarded to wrappedMap.putEntry.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The entry is validated with the <codeph>validateKeyType</codeph> and <codeph>validateValueType</codeph> methods to be forwarded to <codeph>wrappedMap.putEntry</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:put"><apiName>put</apiName><shortdesc>
		 The key and value are validated with the validateKeyType and validateValueType methods to be forwarded to wrappedMap.put.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedMap.put</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The key and value are validated with the <codeph>validateKeyType</codeph> and <codeph>validateValueType</codeph> methods to be forwarded to <codeph>wrappedMap.put</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Forwards the call to wrappedMap.removeAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.removeAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:remove"><apiName>remove</apiName><shortdesc>
		 Forwards the call to wrappedMap.remove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.remove</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Forwards the call to wrappedMap.retainAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.retainAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:size"><apiName>size</apiName><shortdesc>
		 Forwards the call to wrappedMap.size.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.size</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedMap:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:TypedMap:TypedMap"><apiName>TypedMap</apiName><shortdesc>
		 Constructor, creates a new TypedMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the target map to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by this map.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:SortedArrayListMap"><apiName>SortedArrayListMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedMap</apiBaseInterface><apiBaseClassifier>org.as3collections.maps:ArrayListMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedMap;
	 import org.as3collections.maps.SortedArrayListMap;
	 
	 var map1:ISortedMap = new SortedArrayListMap();
	 
	 map1.put("e", 1)            // null
	 map1.put("d", 2)            // null
	 map1.put("c", 3)            // null
	 map1.put("b", 4)            // null
	 map1.put("a", 5)            // null
	 
	 map1                        // {a=5,b=4,c=3,d=2,e=1}
	 
	 map1.firstKey()             // a
	 map1.lastKey()              // e
	 
	 map1.sortBy = SortMapBy.VALUE;
	 
	 map1                        // {e=1,d=2,c=3,b=4,a=5}
	 
	 map1.firstKey()             // e
	 map1.lastKey()              // a
	 
	 map1.sort(null, Array.NUMERIC);
	 
	 map1                        // {e=1,d=2,c=3,b=4,a=5}
	 
	 map1.sort(null, Array.NUMERIC | Array.DESCENDING);
	 
	 map1                        // {a=5,b=4,c=3,d=2,e=1}
	 
	 map1.sortBy = SortMapBy.KEY;
	 
	 map1                        // {a=5,b=4,c=3,d=2,e=1}
	 
	 map1.headMap("d")           // {a=5,b=4,c=3}
	 map1.tailMap("b")           // {b=4,c=3,d=2,e=1}
	 map1.subMap("b", "d")       // {b=4,c=3}
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:SortedArrayListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new SortedArrayListMap object containing all elements in this map (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>SortedArrayListMap</codeph> object containing all elements in this map (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>SortedArrayListMap</codeph> object containing all elements in this map (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all mappings of object B</li>
		 <li>object B contains all mappings of object A</li>
		 <li>mappings have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 <li>object A and object B has the same sortBy</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the mappings in the map.
		 So, for two maps are equal the order of mappings returned by the iterator must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 
		 Associates the specified value with the specified key at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Associates the specified value with the specified key at the specified position in this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:put"><apiName>put</apiName><shortdesc>
		 
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the key previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the value previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:sortOn"><apiName>sortOn</apiName><shortdesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:sort"><apiName>sort</apiName><shortdesc>
		 Sorts the objects within this class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the objects within this class.
		 <p>For more info see <codeph>org.as3coreaddendum.system.ISortable.sort()</codeph> in the link below.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:SortedArrayListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 inheritDoc 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 inheritDoc 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:SortedArrayListMap:SortedArrayListMap"><apiName>SortedArrayListMap</apiName><shortdesc>
		 Constructor, creates a new SortedArrayListMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiData>null</apiData><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>		a map with wich fill this map.
		 </apiDesc></apiParam><apiParam><apiItemName>comparator</apiItemName><apiType value="org.as3coreaddendum.system:IComparator"/><apiData>null</apiData><apiDesc>	the comparator object to be used internally to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	the options to be used internally to sort.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>SortedArrayListMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:HashMap"><apiName>HashMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractHashMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IMap;
	 import org.as3collections.IList;
	 import org.as3collections.maps.HashMap;
	 import org.as3collections.maps.MapEntry;
	 
	 var map1:IMap = new HashMap();
	 var tf1:TextField = new TextField();
	 var tf2:TextField = new TextField();
	 
	 map1                            // {}
	 map1.containsKey("a")           // false
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // false
	 map1.containsValue(tf1)         // false
	 map1.isEmpty()                  // true
	 map1.size()                     // 0
	 
	 map1.put("a", 1)                // null
	 map1                            // {a=1}
	 map1.isEmpty()                  // false
	 map1.size()                     // 1
	 map1.containsKey("a")           // true
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // false
	 map1.containsValue(tf1)         // false
	 
	 map1.put("b", 2)                // null
	 map1                            // {b=2,a=1}
	 map1.isEmpty()                  // false
	 map1.size()                     // 2
	 map1.containsKey("a")           // true
	 map1.containsKey("b")           // true
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // true
	 
	 map1.put("c", 3)                // null
	 map1                            // {b=2,a=1,c=3}
	 map1.size()                     // 3
	 
	 map1.put("tf1", tf1)            // null
	 map1                            // {b=2,a=1,c=3,tf1=[object TextField]}
	 map1.size()                     // 4
	 map1.containsValue(tf1)         // true
	 
	 map1.put(tf2, "tf2")            // null
	 map1                            // {b=2,[object TextField]=tf2,a=1,c=3,tf1=[object TextField]}
	 map1.size()                     // 5
	 map1.containsKey(tf2)           // true
	 
	 map1.put("a", 1.1)              // 1
	 map1                            // {b=2,[object TextField]=tf2,a=1.1,c=3,tf1=[object TextField]}
	 map1.size()                     // 5
	 
	 map1.put("tf1", String)         // [object TextField]
	 map1                            // {b=2,[object TextField]=tf2,a=1.1,c=3,tf1=[class String]}
	 map1.size()                     // 5
	 
	 map1.put(tf2, "tf2.1")          // tf2
	 map1                            // {b=2,[object TextField]=tf2.1,a=1.1,c=3,tf1=[class String]}
	 map1.size()                     // 5
	 
	 map1.put(Number, 999)           // null
	 map1                            // {b=2,[object TextField]=tf2.1,[class Number]=999,a=1.1,c=3,tf1=[class String]}
	 map1.size(): 6
	 
	 map1.getValue("b")              // 2
	 
	 map1.getValue(tf2)              // tf2.1
	 
	 map1.putAllByObject({fa:"fb",ga:"gb",ha:"hb"});
	 
	 map1                            // {b=2,[object TextField]=tf2.1,fa=fb,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String],ga=gb}
	 
	 map1.size()                     // 9
	 
	 map1.getValue("fa")             // fb
	 
	 map1.remove("ga")               // gb
	 map1                            // {b=2,[object TextField]=tf2.1,fa=fb,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}
	 map1.size()                     // 8
	 
	 map1.remove("fa")               // fb
	 map1                            // {b=2,[object TextField]=tf2.1,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}
	 map1.size()                     // 7
	 
	 map1.remove(tf2)                // tf2.1
	 map1                            // {b=2,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}
	 map1.size()                     // 6
	 
	 map1.getValue("fa")             // null
	 map1.getValue(tf2)              // null
	 
	 var map2:IMap = map1.clone();
	 
	 map2                            // {b=2,a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}
	 map2.size()                     // 6
	 map2.isEmpty()                  // false
	 
	 map1.equals(map2)               // true
	 map2.equals(map1)               // true
	 map2.equals(map2)               // true
	 
	 map2.remove("b")                // 2
	 map2                            // {a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}
	 map2.equals(map2)               // true
	 map2.size()                     // 5
	 
	 map1.equals(map2)               // false
	 map2.equals(map1)               // false
	 
	 map2.getValues()                // [1.1,999,3,[class String],hb]
	 
	 var keysMap2:IList = map2.getKeys();
	 
	 keysMap2                        // [a,[class Number],c,tf1,ha]
	 
	 keysMap2.remove("c")            // true
	 keysMap2                        // [a,[class Number],tf1,ha]
	 map2                            // {a=1.1,[class Number]=999,c=3,tf1=[class String],ha=hb}
	 map2.size()                     // 5
	 
	 map2.removeAll(keysMap2)        // true
	 map2                            // {c=3}
	 map2.size()                     // 1
	 map2.isEmpty()                  // false
	 
	 map2.clear();
	 
	 map2                            // {}
	 map2.size()                     // 0
	 map2.isEmpty()                  // true
	 
	 var entry:IMapEntry = new MapEntry("c", 3);
	 
	 entry                           // c=3
	 map2.putEntry(entry)            // null
	 map2                            // {c=3}
	 map2.size()                     // 1
	 
	 map1                            // {b=2,[class Number]=999,c=3,ha=hb,a=1.1,tf1=[class String]}
	 map1.retainAll(map2)            // true
	 map1                            // {c=3}
	 map1.size()                     // 1
	 map1.isEmpty()                  // false
	 
	 map1.put("d", 4)                // null
	 map1.put("e", 5)                // null
	 map1.put("f", 6)                // null
	 
	 map1                            // {c=3,d=4,f=6,e=5}
	 map1.size()                     // 4
	 
	 var it:IIterator = map1.iterator();
	 
	 var e:*;
	 
	 while (it.hasNext())
	 {
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // c=3
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // d=4
	 
	     if (e == 4)
	     {
	         it.remove();
	     }
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // f=6
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // e=5
	 }
	 
	 map1                            // {c=3,f=6,e=5}
	 map1.size()                     // 3
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:HashMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map.
		 The map will be empty after this call returns.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:HashMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new HashMap object containing all mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>HashMap</codeph> object containing all mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>HashMap</codeph> object containing all mappings in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:HashMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation returns a <codeph>MapIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#MapIterator"><linktext>MapIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:HashMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, because this implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map.
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:HashMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present.
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 A return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key.
		 It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:HashMap:HashMap"><apiName>HashMap</apiName><shortdesc>
		 Constructor, creates a new HashMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiData>null</apiData><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>		a map with wich fill this map.
		 </apiDesc></apiParam><apiParam><apiItemName>weakKeys</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	instructs the backed <codeph>Dictionary</codeph> object to use "weak" references on object keys. If the only reference to an object is in the specified <codeph>Dictionary</codeph> object, the key is eligible for garbage collection and is removed from the table when the object is collected.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>HashMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:ArrayListMap"><apiName>ArrayListMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractListMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IMap;
	 import org.as3collections.IList;
	 import org.as3collections.maps.ArrayListMap;
	 import org.as3collections.maps.MapEntry;
	 
	 var map1:IMap = new ArrayListMap();
	 var tf1:TextField = new TextField();
	 var tf2:TextField = new TextField();
	 
	 map1                            // {}
	 map1.containsKey("a")           // false
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // false
	 map1.containsValue(tf1)         // false
	 map1.isEmpty()                  // true
	 map1.size()                     // 0
	 
	 map1.put("a", 1)                // null
	 map1                            // {a=1}
	 map1.isEmpty()                  // false
	 map1.size()                     // 1
	 map1.containsKey("a")           // true
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // false
	 map1.containsValue(tf1)         // false
	 
	 map1.put("b", 2)                // null
	 map1                            // {a=1,b=2}
	 map1.isEmpty()                  // false
	 map1.size()                     // 2
	 map1.containsKey("a")           // true
	 map1.containsKey("b")           // true
	 map1.containsKey(tf2)           // false
	 map1.containsValue(2)           // true
	 
	 map1.put("c", 3)                // null
	 map1                            // {a=1,b=2,c=3}
	 map1.size()                     // 3
	 
	 map1.put("tf1", tf1)            // null
	 map1                            // {a=1,b=2,c=3,tf1=[object TextField]}
	 map1.size()                     // 4
	 map1.containsValue(tf1)         // true
	 
	 map1.put(tf2, "tf2")            // null
	 map1                            // {a=1,b=2,c=3,tf1=[object TextField],[object TextField]=tf2}
	 map1.size()                     // 5
	 map1.containsKey(tf2)           // true
	 
	 map1.put("a", 1.1)              // 1
	 map1                            // {a=1.1,b=2,c=3,tf1=[object TextField],[object TextField]=tf2}
	 map1.size()                     // 5
	 
	 map1.put("tf1", String)         // [object TextField]
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2}
	 map1.size()                     // 5
	 
	 map1.put(tf2, "tf2.1")          // tf2
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1}
	 map1.size()                     // 5
	 
	 map1.put(Number, 999)           // null
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999}
	 map1.size()                     // 6
	 
	 map1.getValue("b")              // 2
	 
	 map1.getValue(tf2)              // tf2.1
	 
	 map1.putAllByObject({fa:"fb",ga:"gb",ha:"hb"});
	 
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb,ga=gb,fa=fb}
	 
	 map1.size()                     // 9
	 
	 map1.getValue("fa")             // fb
	 
	 map1.remove("ga")               // gb
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb,fa=fb}
	 map1.size()                     // 8
	 
	 map1.remove("fa")               // fb
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[object TextField]=tf2.1,[class Number]=999,ha=hb}
	 map1.size()                     // 7
	 
	 map1.remove(tf2)                // tf2.1
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}
	 map1.size()                     // 6
	 
	 map1.getValue("fa")             // null
	 map1.getValue(tf2)              // null
	 
	 var map2:IMap = map1.clone();
	 
	 map2                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}
	 map2.size()                     // 6
	 map2.isEmpty()                  // false
	 
	 map1.equals(map2)               // true
	 map2.equals(map1)               // true
	 map2.equals(map2)               // true
	 
	 map2.remove("b")                // 2
	 map2                            // {a=1.1,c=3,tf1=[class String],[class Number]=999,ha=hb}
	 map2.equals(map2)               // true
	 map2.size()                     // 5
	 
	 map1.equals(map2)               // false
	 map2.equals(map1)               // false
	 
	 map2.getValues()                // [1.1,3,[class String],999,hb]
	 
	 var keysMap2:IList = map2.getKeys();
	 
	 keysMap2                        // [a,c,tf1,[class Number],ha]
	 
	 keysMap2.remove("c")            // true
	 keysMap2                        // [a,tf1,[class Number],ha]
	 map2                            // {a=1.1,c=3,tf1=[class String],[class Number]=999,ha=hb}
	 map2.size()                     // 5
	 
	 map2.removeAll(keysMap2)        // true
	 map2                            // {c=3}
	 map2.size()                     // 1
	 map2.isEmpty()                  // false
	 
	 map2.clear();
	 
	 map2                            // {}
	 map2.size()                     // 0
	 map2.isEmpty()                  // true
	 
	 var entry:IMapEntry = new MapEntry("c", 3);
	 
	 entry                           // c=3
	 map2.putEntry(entry)            // null
	 map2                            // {c=3}
	 map2.size()                     // 1
	 
	 map1                            // {a=1.1,b=2,c=3,tf1=[class String],[class Number]=999,ha=hb}
	 map1.retainAll(map2)            // true
	 map1                            // {c=3}
	 map1.size()                     // 1
	 map1.isEmpty()                  // false
	 
	 map1.put("d", 4)                // null
	 map1.put("e", 5)                // null
	 map1.put("f", 6)                // null
	 map1                            // {c=3,d=4,e=5,f=6}
	 map1.size()                     // 4
	 
	 var it:IIterator = map1.iterator();
	 
	 var e:*;
	 
	 while (it.hasNext())
	 {
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // c=3
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // d=4
	 
	     if (e == 4)
	     {
	         it.remove();
	     }
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // e=5
	 
	     e = it.next();
	     trace(it.pointer() + "=" + e)    // f=6
	 }
	 
	 map1                            // {c=3,e=5,f=6}
	 map1.size()                     // 3
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:ArrayListMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map.
		 The map will be empty after this call returns.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new ArrayListMap object containing all mappings in this map (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>ArrayListMap</codeph> object containing all mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>ArrayListMap</codeph> object containing all mappings in this map (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation returns a <codeph>MapIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#MapIterator"><linktext>MapIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier><apiDesc>a <codeph>ListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 <p>This implementation returns a <codeph>ListMapIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 Associates the specified value with the specified key at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key at the specified position in this map.
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, because this implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map.
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value, and the order of the key is not affected.
		 (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the mapping at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the mapping to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping at the specified position in this map (optional operation).
		 Shifts any subsequent mappings to the left (subtracts one from their indices).
		 Returns an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p> 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the mappings whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map containing all the removed mappings.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the mappings whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent mappings to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present.
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 A return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key.
		 It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>setKeyAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the key previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>setValueAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ArrayListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Returns a new map that is a view of the portion of this map between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new map that is a view of the portion of this map between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned map supports all of the optional map operations supported by this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:ArrayListMap:ArrayListMap"><apiName>ArrayListMap</apiName><shortdesc>
		 Constructor, creates a new ArrayListMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiData>null</apiData><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>		a map with wich fill this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ArrayListMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:ReadOnlyArrayListMap"><apiName>ReadOnlyArrayListMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractListMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IMap;
	 import org.as3collections.maps.ArrayListMap;
	 import org.as3collections.maps.ReadOnlyArrayListMap;
	 
	 var map1:IMap = new ArrayListMap();
	 
	 map1.put("fa", "fb"):     // null
	 map1.put("ga", "gb"):     // null
	 map1.put("ha", "hb"):     // null
	 
	 map1                      // {fa=fb,ga=gb,ha=hb}
	 map1.size()               // 3
	 
	 var map2:IMap = new ReadOnlyArrayListMap(map1);
	 
	 map2                      // {fa=fb,ga=gb,ha=hb}
	 map2.size()               // 3
	 
	 map2.put(1, 2)            // UnsupportedOperationError: ReadOnlyArrayListMap is a read-only map and doesn't allow modifications.
	 
	 map2.remove(1)            // UnsupportedOperationError: ReadOnlyArrayListMap is a read-only map and doesn't allow modifications.
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:clear"><apiName>clear</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new ReadOnlyArrayListMap object containing all mappings in this map (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>ReadOnlyArrayListMap</codeph> object containing all mappings in this map (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>ReadOnlyArrayListMap</codeph> object containing all mappings in this map (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation returns a <codeph>ReadOnlyMapIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ReadOnlyMapIterator"><linktext>ReadOnlyMapIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:putAll"><apiName>putAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:put"><apiName>put</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyArrayListMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyArrayListMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:ReadOnlyArrayListMap:ReadOnlyArrayListMap"><apiName>ReadOnlyArrayListMap</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyArrayListMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	an map to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyArrayListMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:TypedSortedMap"><apiName>TypedSortedMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedMap</apiBaseInterface><apiBaseClassifier>org.as3collections.maps:TypedListMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedMap;
	 import org.as3collections.maps.SortedArrayListMap;
	 import org.as3collections.maps.TypedSortedMap;
	 
	 var map1:ISortedMap = new SortedArrayListMap();
	 
	 map1.put("e", 1)            // null
	 map1.put("d", 2)            // null
	 map1.put("c", 3)            // null
	 map1.put("b", 4)            // null
	 map1.put("a", 5)            // null
	 
	 map1                        // {a=5,b=4,c=3,d=2,e=1}
	 map1.size()                 // 5
	 
	 var map2:ISortedMap = new TypedSortedMap(map1, String, Number); // you can use this way
	 
	 //var map2:ISortedMap = MapUtil.getTypedSortedMap(map1, String, Number); // or you can use this way
	 
	 map2                        // {a=5,b=4,c=3,d=2,e=1}
	 map2.size()                 // 5
	 
	 map2.equals(map1)           // false
	 
	 map2.put("f", 6)            // null
	 map2                        // {a=5,b=4,c=3,d=2,e=1,f=6}
	 map2.size()                 // 6
	 
	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number
	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:TypedSortedMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedSortedMap object with the clone of the wrappedMap object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedSortedMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedSortedMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all mappings of object B</li>
		 <li>object B contains all mappings of object A</li>
		 <li>mappings have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 <li>object A and object B has the same sortBy</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the mappings in the map.
		 So, for two maps are equal the order of mappings returned by the iterator must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.headMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.headMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Forwards the call to wrappedMap.sortOn.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.sortOn</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:sort"><apiName>sort</apiName><shortdesc>
		 Forwards the call to wrappedMap.sort.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.sort</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.subMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.subMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedSortedMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.tailMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.tailMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:TypedSortedMap:TypedSortedMap"><apiName>TypedSortedMap</apiName><shortdesc>
		 Constructor, creates a new TypedSortedMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:ISortedMap</apiOperationClassifier><apiDesc>	the target map to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by this map.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedSortedMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:TypedListMap"><apiName>TypedListMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListMap</apiBaseInterface><apiBaseClassifier>org.as3collections.maps:TypedMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedMap;
	 import org.as3collections.maps.SortedArrayListMap;
	 import org.as3collections.maps.TypedSortedMap;
	 
	 var map1:ISortedMap = new SortedArrayListMap();
	 
	 map1.put("e", 1)            // null
	 map1.put("d", 2)            // null
	 map1.put("c", 3)            // null
	 map1.put("b", 4)            // null
	 map1.put("a", 5)            // null
	 
	 map1                        // {a=5,b=4,c=3,d=2,e=1}
	 map1.size()                 // 5
	 
	 var map2:ISortedMap = new TypedSortedMap(map1, String, Number); // you can use this way
	 
	 //var map2:ISortedMap = MapUtil.getTypedSortedMap(map1, String, Number); // or you can use this way
	 
	 map2                        // {a=5,b=4,c=3,d=2,e=1}
	 map2.size()                 // 5
	 
	 map2.equals(map1)           // false
	 
	 map2.put("f", 6)            // null
	 map2                        // {a=5,b=4,c=3,d=2,e=1,f=6}
	 map2.size()                 // 6
	 
	 map2.put("g", "h")          // ClassCastError: Invalid value type. value: h | type: String | expected value type: Number
	 map2.put(7, 8)              // ClassCastError: Invalid key type. key: 7 | type: int | expected key type: String
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:TypedListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedListMap object with the clone of the wrappedMap object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedListMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedListMap</codeph> object with the clone of the <codeph>wrappedMap</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:getKeyAt"><apiName>getKeyAt</apiName><shortdesc>
		 Forwards the call to wrappedMap.getKeyAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.getKeyAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:getValueAt"><apiName>getValueAt</apiName><shortdesc>
		 Forwards the call to wrappedMap.getValueAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.getValueAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.headMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.headMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:indexOfKey"><apiName>indexOfKey</apiName><shortdesc>
		 Forwards the call to wrappedMap.indexOfKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.indexOfKey</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:indexOfValue"><apiName>indexOfValue</apiName><shortdesc>
		 Forwards the call to wrappedMap.indexOfValue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.indexOfValue</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier><apiDesc>a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 The specified index indicates the first value that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the value with the specified index minus one.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:putAllAt"><apiName>putAllAt</apiName><shortdesc>
		 The map is validated to be forwarded to wrappedMap.putAllAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The map is validated to be forwarded to <codeph>wrappedMap.putAllAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 The key and value are validated to be forwarded to wrappedMap.putAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/><apiDesc>the return of the call <codeph>wrappedMap.put</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified mapping is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The key and value are validated to be forwarded to <codeph>wrappedMap.putAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Forwards the call to wrappedMap.removeAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.removeAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Forwards the call to wrappedMap.removeRange.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>the return of the call <codeph>wrappedMap.removeRange</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.removeRange</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:reverse"><apiName>reverse</apiName><shortdesc>
		 Forwards the call to wrappedMap.reverse.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.reverse</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 The key is validated to be forwarded to wrappedMap.setKeyAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedMap.setKeyAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key to forward to <codeph>wrappedMap.setKeyAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The key is validated to be forwarded to <codeph>wrappedMap.setKeyAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 The value is validated to be forwarded to wrappedMap.setValueAt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedMap.setValueAt</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the key to forward to <codeph>wrappedMap.setValueAt</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The value is validated to be forwarded to <codeph>wrappedMap.setValueAt</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.subMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.subMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:TypedListMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 Forwards the call to wrappedMap.tailMap.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedMap.tailMap</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:TypedListMap:TypedListMap"><apiName>TypedListMap</apiName><shortdesc>
		 Constructor, creates a new TypedSortedMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>	the target map to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by this map.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedSortedMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.maps:ReadOnlyHashMap"><apiName>ReadOnlyHashMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractHashMap</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IMap;
	 import org.as3collections.maps.HashMap;
	 import org.as3collections.maps.ReadOnlyHashMap;
	 
	 var obj:Object = {fa:"fb",ga:"gb",ha:"hb"}
	 
	 var map1:IMap = new HashMap();
	 
	 map1.putAllByObject(obj);
	 
	 map1                  // {ha=hb,ga=gb,fa=fb}
	 map1.size()           // 3
	 
	 var map2:IMap = new ReadOnlyHashMap(map1);
	 
	 map2                  // {ha=hb,ga=gb,fa=fb}
	 map2.size()           // 3
	 
	 map2.put(1, 2)        // UnsupportedOperationError: ReadOnlyHashMap is a read-only map and doesn't allow modifications.
	 
	 map2.remove(1)        // UnsupportedOperationError: ReadOnlyHashMap is a read-only map and doesn't allow modifications.
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:clear"><apiName>clear</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new ReadOnlyHashMap object containing all mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>ReadOnlyHashMap</codeph> object containing all mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>ReadOnlyHashMap</codeph> object containing all mappings in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation returns a <codeph>ReadOnlyMapIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ReadOnlyMapIterator"><linktext>ReadOnlyMapIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:putAll"><apiName>putAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:put"><apiName>put</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:remove"><apiName>remove</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.maps:ReadOnlyHashMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 This implementation always throws an UnsupportedOperationError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	<codeph>ReadOnlyHashMap</codeph> is a read-only map and doesn't allow modifications.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation always throws an <codeph>UnsupportedOperationError</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.maps:ReadOnlyHashMap:ReadOnlyHashMap"><apiName>ReadOnlyHashMap</apiName><shortdesc>
		 Constructor, creates a new ReadOnlyHashMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>source</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	an map to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>ReadOnlyHashMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections.queues"><apiName>org.as3collections.queues</apiName><apiClassifier id="org.as3collections.queues:TypedQueue"><apiName>TypedQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseClassifier>org.as3collections:TypedCollection</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IQueue;
	 import org.as3collections.queues.LinearQueue;
	 import org.as3collections.queues.TypedQueue;
	 import org.as3collections.utils.QueueUtil;
	 
	 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);
	 
	 var queue1:IQueue = new TypedQueue(q1, int); // you can use this way
	 
	 //var queue1:IQueue = QueueUtil.getTypedQueue(q1); // or you can use this way
	 
	 queue1                      // [1,5,3,7]
	 queue1.size():              // 4
	 queue1.isEmpty()            // false
	 
	 queue1.poll()               // 1
	 queue1                      // [5,3,7]
	 
	 queue1.offer(2)             // true
	 queue1                      // [5,3,7,2]
	 
	 queue1.offer(5)             // true
	 queue1                      // [5,3,7,2,5]
	 
	 queue1.offer("a")           // false
	 queue1                      // [5,3,7,2,5]
	 
	 queue1.add("a")             // ClassCastError: Invalid element type. element: a | type: String | expected type: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:TypedQueue:add"><apiName>add</apiName><shortdesc>
		 If the element argument is null throws ArgumentError.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>element</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the type of the element is incompatible with the type of this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If the <codeph>element</codeph> argument is <codeph>null</codeph> throws <codeph>ArgumentError</codeph>.
		 Otherwise the element is validated with the <codeph>validateType</codeph> method to be forwarded to <codeph>wrappedCollection.add</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedQueue object with the clone of the wrappedQueue object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedQueue</codeph> object with the clone of the <codeph>wrappedQueue</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedQueue</codeph> object with the clone of the <codeph>wrappedQueue</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Forwards the call to wrappedQueue.dequeue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.dequeue</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.dequeue</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:element"><apiName>element</apiName><shortdesc>
		 Forwards the call to wrappedQueue.element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.element</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.element</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:equals"><apiName>equals</apiName><shortdesc>
		 This method first checks if other argument is a TypedQueue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method first checks if <codeph>other</codeph> argument is a <codeph>TypedQueue</codeph>.
		 If not it returns <codeph>false</codeph>. If <codeph>true</codeph> it checks the <codeph>type</codeph> property of both queues.
		 If they are different it returns <codeph>false</codeph>.
		 Otherwise it uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this queue and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:offer"><apiName>offer</apiName><shortdesc>
		 If isValidType(element) returns false then returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if <codeph>isValidType(element)</codeph> returns <codeph>false</codeph>. Otherwise returns the return of the call <codeph>wrappedQueue.offer</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedQueue.offer</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>isValidType(element)</codeph> returns <codeph>false</codeph> then returns <codeph>false</codeph>.
		 Otherwise, it forwards the call to <codeph>wrappedQueue.offer</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:peek"><apiName>peek</apiName><shortdesc>
		 Forwards the call to wrappedQueue.peek.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.peek</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.peek</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:TypedQueue:poll"><apiName>poll</apiName><shortdesc>
		 Forwards the call to wrappedQueue.poll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.poll</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.poll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:TypedQueue:TypedQueue"><apiName>TypedQueue</apiName><shortdesc>
		 Constructor, creates a new TypedQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapQueue</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapQueue</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapQueue</apiItemName><apiOperationClassifier>org.as3collections:IQueue</apiOperationClassifier><apiDesc>	the target queue to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by this queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:UniqueQueue"><apiName>UniqueQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseClassifier>org.as3collections:UniqueCollection</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IQueue;
	 import org.as3collections.queues.LinearQueue;
	 import org.as3collections.queues.UniqueQueue;
	 import org.as3collections.utils.QueueUtil;
	 
	 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);
	 
	 var queue1:IQueue = new UniqueQueue(q1); // you can use this way
	 
	 //var queue1:IQueue = QueueUtil.getUniqueQueue(q1); // or you can use this way
	 
	 queue1                      // [1,5,3,7]
	 queue1.size()               // 4
	 queue1.isEmpty()            // false
	 
	 queue1.poll()               // 1
	 queue1                      // [5,3,7]
	 
	 queue1.offer(2)             // true
	 queue1                      // [5,3,7,2]
	 
	 queue1.offer(5)             // false
	 queue1                      // [5,3,7,2]
	 
	 queue1.add(5)               // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:UniqueQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the class of the specified element prevents it from being added to this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if <codeph>wrappedQueue.contains(element)</codeph> returns <codeph>true</codeph>.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 <p>If <codeph>wrappedQueue.contains(element)</codeph> returns <codeph>true</codeph> an <codeph>IllegalOperationError</codeph> is thrown.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new UniqueQueue object with the clone of the wrappedQueue object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>UniqueQueue</codeph> object with the clone of the <codeph>wrappedQueue</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>UniqueQueue</codeph> object with the clone of the <codeph>wrappedQueue</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Forwards the call to wrappedQueue.dequeue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.dequeue</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.dequeue</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:element"><apiName>element</apiName><shortdesc>
		 Forwards the call to wrappedQueue.element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.element</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.element</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:offer"><apiName>offer</apiName><shortdesc>
		 If wrappedQueue.contains(element) returns true then returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if <codeph>wrappedQueue.contains(element)</codeph> returns <codeph>true</codeph>. Otherwise returns the return of the call <codeph>wrappedQueue.offer</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedQueue.offer</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>wrappedQueue.contains(element)</codeph> returns <codeph>true</codeph> then returns <codeph>false</codeph>.
		 Otherwise, it forwards the call to <codeph>wrappedQueue.offer</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:peek"><apiName>peek</apiName><shortdesc>
		 Forwards the call to wrappedQueue.peek.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.peek</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.peek</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:UniqueQueue:poll"><apiName>poll</apiName><shortdesc>
		 Forwards the call to wrappedQueue.poll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the return of the call <codeph>wrappedQueue.poll</codeph>.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedQueue.poll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:UniqueQueue:UniqueQueue"><apiName>UniqueQueue</apiName><shortdesc>
		 Constructor, creates a new UniqueQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapQueue</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapQueue</apiItemName><apiOperationClassifier>org.as3collections:IQueue</apiOperationClassifier><apiDesc>	the target queue to wrap.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>UniqueQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:PriorityQueue"><apiName>PriorityQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.queues:SortedQueue</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 package test
	 {
	     import org.as3coreaddendum.system.IPriority;
	 
	     public class TestPriority extends EventDispatcher implements IPriority
	     {
	         private var _name:String;
	         private var _priority:int;
	 
	         public function get priority(): int { return _priority; }
	 
	         public function set priority(value : int) : void
	         {
	             _priority = value;
	             dispatchEvent(new PriorityEvent(PriorityEvent.CHANGED, _priority));
	         }
	 
	         public function TestPriority(name:String, priority:int)
	         {
	             _name = name;
	             _priority = priority;
	         }
	 
	         public function toString(): String
	         {
	             return "[TestPriority " + _name + "]";
	         }
	     }
	 }
	 </codeblock>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedQueue;
	 import org.as3collections.queues.PriorityQueue;
	 import test.TestPriority;
	 
	 var queue1:ISortedQueue = new PriorityQueue();
	 
	 var o1:TestPriority = new TestPriority("o1", 1);
	 var o2:TestPriority = new TestPriority("o2", 2);
	 var o3:TestPriority = new TestPriority("o3", 3);
	 var o4:TestPriority = new TestPriority("o4", 4);
	 
	 queue1.offer(o2)            // true
	 queue1                      // [[TestPriority o2]]
	 queue1.size()               // 1
	 
	 queue1.offer(o3)            // true
	 queue1                      // [[TestPriority o3],[TestPriority o2]]
	 queue1.size()               // 2
	 
	 queue1.offer(o2)            // true
	 queue1                      // [[TestPriority o3],[TestPriority o2],[TestPriority o2]]
	 
	 queue1.offer(o1)            // true
	 queue1                      // [[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]
	 
	 queue1.offer(o4)            // true
	 queue1                      // [[TestPriority o4],[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]
	 
	 queue1.offer(1)             // false
	 queue1                      // [[TestPriority o4],[TestPriority o3],[TestPriority o2],[TestPriority o2],[TestPriority o1]]
	 
	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IPriority' interface. Type received: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:PriorityQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the element does not implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> interface.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified element cannot be inserted.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> interface.
		 A <codeph>org.as3coreaddendum.errors.ClassCastError</codeph> is thrown if the element does not implements this interface.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:PriorityQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new PriorityQueue object containing all elements in this queue (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>PriorityQueue</codeph> object containing all elements in this queue (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>PriorityQueue</codeph> object containing all elements in this queue (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:PriorityQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> interface.
		 If the element does not implements this interface the method returns <codeph>false</codeph>.</p>
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:PriorityQueue:PriorityQueue"><apiName>PriorityQueue</apiName><shortdesc>
		 Constructor, creates a new PriorityQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 		if one or more elements in the <codeph>source</codeph> argument do not implement the <codeph>org.as3coreaddendum.system.IPriority</codeph> interface.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>		an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>PriorityQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:LinearQueue"><apiName>LinearQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections:AbstractQueue</apiBaseClassifier></apiClassifierDef><example>
	 
	 <b>Example 1</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IQueue;
	 import org.as3collections.queues.LinearQueue;
	 
	 var queue:IQueue = new LinearQueue();
	 
	 queue                       // []
	 queue.size()                // 0
	 queue.isEmpty()             // true
	 
	 queue.peek()                // null
	 queue.element()             // NoSuchElementError: The queue is empty.
	 
	 queue.offer(3)              // true
	 queue                       // [3]
	 queue.size()                // 1
	 queue.isEmpty()             // false
	 
	 queue.offer("a")            // true
	 queue                       // [3,a]
	 
	 queue.offer(1)              // true
	 queue                       // [3,a,1]
	 
	 queue.offer(7)              // true
	 queue                       // [3,a,1,7]
	 
	 queue.offer(null)           // false
	 queue.add(null)             // ArgumentError: The 'element' argument must not be 'null'.
	 queue                       // [3,a,1,7]
	 
	 queue.peek()                // 3
	 queue.element()             // 3
	 queue:                      // [3,a,1,7]
	 
	 queue.poll()                // 3
	 queue                       // [a,1,7]
	 
	 queue.dequeue()             // a
	 queue                       // [1,7]
	 
	 queue.remove(10)            // false
	 queue                       // [1,7]
	 
	 queue.remove(7)             // true
	 queue                       // [1]
	 
	 queue.clear()
	 queue                       // []
	 queue.size()                // 0
	 queue.isEmpty()             // true
	 
	 queue.poll()                // null
	 queue.dequeue()             // NoSuchElementError: The queue is empty.
	 </codeblock>
	 
	 <b>Example 2</b>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.IQueue;
	 import org.as3collections.queues.LinearQueue;
	 
	 var queue1:IQueue = new LinearQueue([1, 5, 3, 7]);
	 
	 queue1                      // [1,5,3,7]
	 queue1.size()               // 4
	 queue1.isEmpty()            // false
	 
	 var queue2:IQueue = queue1.clone();
	 
	 queue2                      // [1,5,3,7]
	 queue2.size()               // 4
	 queue2.isEmpty()            // false
	 
	 queue2.equals(queue1)       // true
	 queue1.equals(queue2)       // true
	 
	 queue2.poll()               // 1
	 queue2                      // [5,3,7]
	 
	 queue2.equals(queue1)       // false
	 queue1.equals(queue2)       // false
	 queue2.equals(queue2)       // true
	 
	 queue1.clear()
	 queue1                      // []
	 
	 queue2.clear()
	 queue2:                     // []
	 
	 queue2.equals(queue1)       // true
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:LinearQueue:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this queue. The queue will be empty after this method returns.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:LinearQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new LinearQueue object containing all elements in this queue (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>LinearQueue</codeph> object containing all elements in this queue (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>LinearQueue</codeph> object containing all elements in this queue (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:LinearQueue:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of elements.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 <p>This implementation returns an <codeph>ArrayIterator</codeph> object.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.iterators.xml#ArrayIterator"><linktext>ArrayIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.queues:LinearQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation adds the element to the tail of the queue.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:LinearQueue:peek"><apiName>peek</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:LinearQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:LinearQueue:LinearQueue"><apiName>LinearQueue</apiName><shortdesc>
		 Constructor, creates a new LinearQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>LinearQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:IndexQueue"><apiName>IndexQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.queues:SortedQueue</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 package test
	 {
	     import org.as3coreaddendum.system.IIndexable;
	 
	     public class TestIndex extends EventDispatcher implements IIndexable
	     {
	         private var _name:String;
	         private var _index:int;
	 
	         public function get index(): int { return _index; }
	 
	         public function set index(value : int) : void
	         {
	             _index = value;
	             dispatchEvent(new IndexEvent(IndexEvent.CHANGED, _index));
	         }
	 
	         public function TestIndex(name:String, index:int)
	         {
	             _name = name;
	             _index = index;
	         }
	 
	         public function toString(): String
	         {
	             return "[TestIndex " + _name + "]";
	         }
	     }
	 }
	 </codeblock>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedQueue;
	 import org.as3collections.queues.IndexQueue;
	 import test.TestIndex;
	 
	 var queue1:ISortedQueue = new IndexQueue();
	 
	 var o0:TestIndex = new TestIndex("o0", 0);
	 var o1:TestIndex = new TestIndex("o1", 1);
	 var o2:TestIndex = new TestIndex("o2", 2);
	 var o3:TestIndex = new TestIndex("o3", 3);
	 
	 queue1.offer(o1)            // true
	 queue1                      // [[TestIndex o1]]
	 queue1.size()               // 1
	 
	 queue1.offer(o2)            // true
	 queue1                      // [[TestIndex o1],[TestIndex o2]]
	 queue1.size()               // 2
	 
	 queue1.offer(o1)            // true
	 queue1                      // [[TestIndex o1],[TestIndex o1],[TestIndex o2]]
	 
	 queue1.offer(o0)            // true
	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2]]
	 
	 queue1.offer(o3)            // true
	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2],[TestIndex o3]]
	 
	 queue1.offer(1)             // false
	 queue1                      // [[TestIndex o0],[TestIndex o1],[TestIndex o1],[TestIndex o2],[TestIndex o3]]
	 
	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IIndexable' interface. Type received: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:IndexQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the element does not implements the <codeph>org.as3coreaddendum.system.IIndexable</codeph> interface.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified element cannot be inserted.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IIndexable</codeph> interface.
		 A <codeph>org.as3coreaddendum.errors.ClassCastError</codeph> is thrown if the element does not implements this interface.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:IndexQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new IndexQueue object containing all elements in this queue (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>IndexQueue</codeph> object containing all elements in this queue (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>IndexQueue</codeph> object containing all elements in this queue (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:IndexQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IIndexable</codeph> interface.
		 If the element does not implements this interface the method returns <codeph>false</codeph>.</p>
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:IndexQueue:IndexQueue"><apiName>IndexQueue</apiName><shortdesc>
		 Constructor, creates a new IndexQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 		if one or more elements in the <codeph>source</codeph> argument do not implement the <codeph>org.as3coreaddendum.system.IIndexable</codeph> interface.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>		an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>IndexQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:PriorityIndexQueue"><apiName>PriorityIndexQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3collections.queues:SortedQueue</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 package test
	 {
	     import org.as3coreaddendum.system.IIndexable;
	     import org.as3coreaddendum.system.IPriority;
	 
	     public class TestIndexablePriority implements IIndexable, IPriority
	     {
	         private var _index:int;
	         private var _name:String;
	         private var _priority:int;
	 
	 
	         public function get priority(): int { return _priority; }
	 
	         public function set priority(value:int): void { _priority = value; }
	 
	         public function get index(): int { return _index; }
	 
	         public function set index(value:int): void { _index = value; }
	 
	         public function TestIndexablePriority(name:String, priority:int, index:int)
	         {
	             _name = name;
	             _priority = priority;
	             _index = index;
	         }
	 
	         public function toString(): String
	         {
	             return "[TestIndexablePriority " + _name + "]";
	         }
	     }
	 }
	 </codeblock>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedQueue;
	 import org.as3collections.queues.IndexablePriorityQueue;
	 import test.TestIndexablePriority;
	 
	 var queue1:ISortedQueue = new IndexablePriorityQueue();
	 
	 var o1:TestIndexablePriority = new TestIndexablePriority("o1", 1, 0);
	 var o2:TestIndexablePriority = new TestIndexablePriority("o2", 2, 1);
	 var o3:TestIndexablePriority = new TestIndexablePriority("o3", 2, 2);
	 var o4:TestIndexablePriority = new TestIndexablePriority("o4", 4, 3);
	 
	 queue1.offer(o2)            // true
	 queue1                      // [[TestIndexablePriority o2]]
	 queue1.size()               // 1
	 
	 queue1.offer(o3)            // true
	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o3]]
	 queue1.size()               // 2
	 
	 queue1.offer(o2)            // true
	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3]]
	 
	 queue1.offer(o1)            // true
	 queue1                      // [[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]
	 
	 queue1.offer(o4)            // true
	 queue1                      // [[TestIndexablePriority o4],[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]
	 
	 queue1.offer(1)             // false
	 queue1                      // [[TestIndexablePriority o4],[TestIndexablePriority o2],[TestIndexablePriority o2],[TestIndexablePriority o3],[TestIndexablePriority o1]]
	 
	 queue1.add(1)               // ClassCastError: The element must implement the 'org.as3coreaddendum.system.IPriority' interface. Type received: int
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:PriorityIndexQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the element does not implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> or <codeph>org.as3coreaddendum.system.IIndexable</codeph> interfaces.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified element cannot be inserted.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> and <codeph>org.as3coreaddendum.system.IIndexable</codeph> interfaces.
		 A <codeph>org.as3coreaddendum.errors.ClassCastError</codeph> is thrown if the element does not implements this interfaces.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:PriorityIndexQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new IndexablePriorityQueue object containing all elements in this queue (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>IndexablePriorityQueue</codeph> object containing all elements in this queue (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>IndexablePriorityQueue</codeph> object containing all elements in this queue (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:PriorityIndexQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation only allow elements that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> and <codeph>org.as3coreaddendum.system.IIndexable</codeph> interfaces.
		 If the element does not implements this interfaces the method returns <codeph>false</codeph>.</p>
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:PriorityIndexQueue:PriorityIndexQueue"><apiName>PriorityIndexQueue</apiName><shortdesc>
		 Constructor, creates a new IndexablePriorityQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 		if one or more elements in the <codeph>source</codeph> argument do not implement the <codeph>org.as3coreaddendum.system.IPriority</codeph> and <codeph>org.as3coreaddendum.system.IIndexable</codeph> interfaces.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>		an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>IndexablePriorityQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.queues:SortedQueue"><apiName>SortedQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ISortedQueue</apiBaseInterface><apiBaseClassifier>org.as3collections.queues:LinearQueue</apiBaseClassifier></apiClassifierDef><example>
	 
	 <codeblock rev="3.0">
	 import org.as3collections.ISortedQueue;
	 import org.as3collections.queues.SortedQueue;
	 
	 var queue1:ISortedQueue = new SortedQueue([3, 5, 1, 7], null, Array.NUMERIC | Array.DESCENDING);
	 
	 queue1                      // [7,5,3,1]
	 queue1.size()               // 4
	 
	 queue1.add(-1)              // true
	 queue1                      // [7,5,3,1,-1]
	 queue1.size()               // 5
	 
	 queue1.add(4)               // true
	 queue1                      // [7,5,4,3,1,-1]
	 queue1.size()               // 6
	 
	 queue1.add(5)               // true
	 queue1                      // [7,5,5,4,3,1,-1]
	 queue1.size()               // 7
	 
	 queue1.poll()               // 7
	 queue1                      // [5,5,4,3,1,-1]
	 queue1.size()               // 6
	 
	 queue1.sort(null, Array.NUMERIC)
	 queue1                      // [-1,1,3,4,5,5]
	 
	 queue1.poll()               // -1
	 queue1                      // [5,5,4,3,1]
	 queue1.size()               // 5
	 
	 queue1.add(2)               // true
	 queue1                      // [5,5,4,3,2,1]
	 queue1.size()               // 6
	 
	 queue1.add(10)              // true
	 queue1                      // [10,5,5,4,3,2,1]
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="org.as3collections.queues:SortedQueue:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new SortedQueue object containing all elements in this queue (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>SortedQueue</codeph> object containing all elements in this queue (in the same order).
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>SortedQueue</codeph> object containing all elements in this queue (in the same order).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 <li>elements have exactly the same order</li>
		 <li>object A and object B has the same type of comparator</li>
		 <li>object A and object B has the same options</li>
		 </ul></p>
		 <p>This implementation takes care of the order of the elements in the queue.
		 So, for two queues are equal the order of elements returned by the iterator object must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes all of this queue's elements that are also contained in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be removed from this queue.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of this queue's elements that are also contained in the specified collection. After this call returns, this queue will contain no elements in common with the specified collection.
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:remove"><apiName>remove</apiName><shortdesc>
		 Removes a single instance (only one occurrence) of the specified object from this queue, if it is present.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if an object was removed as a result of this call.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	the object to be removed from this collection, if present.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a single instance (only one occurrence) of the specified object from this queue, if it is present.
		 <p>Before returning, the queue is reordered.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:sortOn"><apiName>sortOn</apiName><shortdesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections.queues:SortedQueue:sort"><apiName>sort</apiName><shortdesc>
		 Sorts the objects within this class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the objects within this class.
		 <p>For more info see <codeph>org.as3coreaddendum.system.ISortable.sort()</codeph> in the link below.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.queues:SortedQueue:SortedQueue"><apiName>SortedQueue</apiName><shortdesc>
		 Constructor, creates a new SortedQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>		an array to fill the queue.
		 </apiDesc></apiParam><apiParam><apiItemName>comparator</apiItemName><apiType value="org.as3coreaddendum.system:IComparator"/><apiData>null</apiData><apiDesc>	the comparator object to be used internally to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>	the options to be used internally to sort.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>SortedQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections.utils"><apiName>org.as3collections.utils</apiName><apiClassifier id="org.as3collections.utils:ListUtil"><apiName>ListUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.utils:ListUtil:getTypedList"><apiName>getTypedList</apiName><shortdesc>
		 Returns a new TypedList with the wrapList argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:TypedList</apiOperationClassifier><apiDesc>a new <codeph>TypedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the target list to be wrapped by the <codeph>TypedList</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:ListUtil:getTypedSortedList"><apiName>getTypedSortedList</apiName><shortdesc>
		 Returns a new TypedSortedList with the wrapList argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:TypedSortedList</apiOperationClassifier><apiDesc>a new <codeph>TypedSortedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:ISortedList</apiOperationClassifier><apiDesc>	the target list to be wrapped by the <codeph>TypedSortedList</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedSortedList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedSortedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:ListUtil:getUniqueList"><apiName>getUniqueList</apiName><shortdesc>
		 Returns a new UniqueList with the wrapList argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:UniqueList</apiOperationClassifier><apiDesc>a new <codeph>UniqueList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the target list to be wrapped by the <codeph>UniqueList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>UniqueList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:ListUtil:getUniqueSortedList"><apiName>getUniqueSortedList</apiName><shortdesc>
		 Returns a new UniqueSortedList with the wrapList argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:UniqueSortedList</apiOperationClassifier><apiDesc>a new <codeph>UniqueSortedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:ISortedList</apiOperationClassifier><apiDesc>	the target list to be wrapped by the <codeph>UniqueSortedList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>UniqueSortedList</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:ListUtil:getUniqueTypedList"><apiName>getUniqueTypedList</apiName><shortdesc>
		 Returns a new TypedList that wraps a new UniqueList that wraps the wrapList argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:TypedList</apiOperationClassifier><apiDesc>a new <codeph>TypedList</codeph> that wraps a new <codeph>UniqueList</codeph> that wraps the <codeph>wrapList</codeph> argument.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>	the target list to be wrapped.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedList</codeph> that wraps a new <codeph>UniqueList</codeph> that wraps the <codeph>wrapList</codeph> argument.
		 <p>The result will be a unique and typed array list, despite of the return type <codeph>TypedList</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:ListUtil:getUniqueTypedSortedList"><apiName>getUniqueTypedSortedList</apiName><shortdesc>
		 Returns a new TypedSortedList that wraps a new UniqueSortedList that wraps the wrapList argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapList</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapList</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.lists:TypedSortedList</apiOperationClassifier><apiDesc>a new <codeph>TypedSortedList</codeph> that wraps a new <codeph>UniqueSortedList</codeph> that wraps the <codeph>wrapList</codeph> argument.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapList</apiItemName><apiOperationClassifier>org.as3collections:ISortedList</apiOperationClassifier><apiDesc>	the target list to be wrapped.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedSortedList</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedSortedList</codeph> that wraps a new <codeph>UniqueSortedList</codeph> that wraps the <codeph>wrapList</codeph> argument.
		 <p>The result will be a unique and typed sorted list, despite of the return type <codeph>TypedSortedList</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.utils:ListUtil:ListUtil"><apiName>ListUtil</apiName><shortdesc>
		 ListUtil is a static class and shouldn't be instantiated.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	<codeph>ListUtil</codeph> is a static class and shouldn't be instantiated.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
		 <codeph>ListUtil</codeph> is a static class and shouldn't be instantiated.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.utils:QueueUtil"><apiName>QueueUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.utils:QueueUtil:getTypedQueue"><apiName>getTypedQueue</apiName><shortdesc>
		 Returns a new TypedQueue with the wrapList argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>queue</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapQueue</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.queues:TypedQueue</apiOperationClassifier><apiDesc>a new <codeph>TypedQueue</codeph> with the <codeph>queue</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapQueue</apiItemName><apiOperationClassifier>org.as3collections:IQueue</apiOperationClassifier><apiDesc>	the target queue to be wrapped by the <codeph>TypedQueue</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedQueue</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedQueue</codeph> with the <codeph>wrapList</codeph> argument wrapped.
		 
		 </apiDesc><example>
		 
		 <codeblock rev="3.0">
		 import org.as3collections.IQueue;
		 import org.as3collections.queues.LinearQueue;
		 import org.as3collections.queues.TypedQueue;
		 import org.as3collections.utils.QueueUtil;
		 
		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);
		 
		 var queue1:IQueue = QueueUtil.getTypedQueue(q1);
		 
		 queue1                      // [1,5,3,7]
		 queue1.size():              // 4
		 queue1.isEmpty()            // false
		 
		 queue1.poll()               // 1
		 queue1                      // [5,3,7]
		 
		 queue1.offer(2)             // true
		 queue1                      // [5,3,7,2]
		 
		 queue1.offer(5)             // true
		 queue1                      // [5,3,7,2,5]
		 
		 queue1.offer("a")           // false
		 queue1                      // [5,3,7,2,5]
		 
		 queue1.add("a")             // ClassCastError: Invalid element type. element: a | type: String | expected type: int
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:QueueUtil:getUniqueQueue"><apiName>getUniqueQueue</apiName><shortdesc>
		 Returns a new UniqueQueue with the wrapQueue argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>queue</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.queues:UniqueQueue</apiOperationClassifier><apiDesc>a new <codeph>UniqueQueue</codeph> with the <codeph>queue</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapQueue</apiItemName><apiOperationClassifier>org.as3collections:IQueue</apiOperationClassifier><apiDesc>	the target queue to be wrapped by the <codeph>UniqueQueue</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>UniqueQueue</codeph> with the <codeph>wrapQueue</codeph> argument wrapped.
		 
		 </apiDesc><example>
		 
		 <codeblock rev="3.0">
		 import org.as3collections.IQueue;
		 import org.as3collections.queues.LinearQueue;
		 import org.as3collections.queues.UniqueQueue;
		 import org.as3collections.utils.QueueUtil;
		 
		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);
		 
		 var queue1:IQueue = new UniqueQueue(q1); // you can use this way
		 
		 //var queue1:IQueue = QueueUtil.getUniqueQueue(q1); // or you can use this way
		 
		 queue1                      // [1,5,3,7]
		 queue1.size()               // 4
		 queue1.isEmpty()            // false
		 
		 queue1.poll()               // 1
		 queue1                      // [5,3,7]
		 
		 queue1.offer(2)             // true
		 queue1                      // [5,3,7,2]
		 
		 queue1.offer(5)             // false
		 queue1                      // [5,3,7,2]
		 
		 queue1.add(5)               // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:QueueUtil:getUniqueTypedQueue"><apiName>getUniqueTypedQueue</apiName><shortdesc>
		 Returns a new TypedQueue that wraps a new UniqueQueue that wraps the wrapQueue argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>queue</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapQueue</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.queues:TypedQueue</apiOperationClassifier><apiDesc>a new <codeph>TypedQueue</codeph> with the <codeph>queue</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapQueue</apiItemName><apiOperationClassifier>org.as3collections:IQueue</apiOperationClassifier><apiDesc>	the target queue to be wrapped.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>		the type of the elements allowed by the returned <codeph>TypedQueue</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedQueue</codeph> that wraps a new <codeph>UniqueQueue</codeph> that wraps the <codeph>wrapQueue</codeph> argument.
		 <p>The result will be a unique and typed array queue, despite of the return type <codeph>TypedQueue</codeph>.</p>
		 
		 </apiDesc><example>
		 
		 <codeblock rev="3.0">
		 import org.as3collections.IQueue;
		 import org.as3collections.queues.Queue;
		 import org.as3collections.queues.TypedQueue;
		 import org.as3collections.utils.QueueUtil;
		 
		 var q1:IQueue = new LinearQueue([1, 5, 3, 7]);
		 
		 var queue1:IQueue = QueueUtil.getUniqueTypedQueue(q1, int);
		 
		 queue1                  // [1,5,3,7]
		 queue1.size()           // 4
		 queue1.isEmpty()        // false
		 
		 queue1.poll()           // 1
		 queue1                  // [5,3,7]
		 
		 queue1.offer(2)         // true
		 queue1                  // [5,3,7,2]
		 
		 queue1.offer(5)         // false
		 queue1                  // [5,3,7,2]
		 
		 queue1.add(5)           // Error: UniqueQueue is a unique queue and does not allow duplicated elements. Requested element: 5
		 
		 queue1.offer("a")       // false
		 queue1                  // [5,3,7,2]
		 
		 queue1.add("a")         // ClassCastError: Invalid element type. element: a | type: String | expected type: int
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.utils:QueueUtil:QueueUtil"><apiName>QueueUtil</apiName><shortdesc>
		 QueueUtil is a static class and shouldn't be instantiated.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	<codeph>QueueUtil</codeph> is a static class and shouldn't be instantiated.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
		 <codeph>QueueUtil</codeph> is a static class and shouldn't be instantiated.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.utils:MapUtil"><apiName>MapUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.utils:MapUtil:equalConsideringOrder"><apiName>equalConsideringOrder</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>map1</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the first map.
		 </apiDesc></apiParam><apiParam><apiItemName>map2</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the second map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 If one of the maps or both maps are <codeph>null</codeph> it will be returned <codeph>false</codeph>.
		 <p>Two different objects are considered equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all mappings of object B</li>
		 <li>object B contains all mappings of object A</li>
		 <li>mappings have exactly the same order</li>
		 </ul></p>
		 <p>This implementation <b>takes care</b> of the order of the mappings in the maps.
		 So, for two maps are equal the order of entries returned by the iterator object must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:equalNotConsideringOrder"><apiName>equalNotConsideringOrder</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>map1</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the first map.
		 </apiDesc></apiParam><apiParam><apiItemName>map2</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the second map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 If one of the maps or both maps are <codeph>null</codeph> it will be returned <codeph>false</codeph>.
		 <p>Two different objects are considered equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all mappings of object B</li>
		 <li>object B contains all mappings of object A</li>
		 </ul></p>
		 <p>This implementation <b>does not takes care</b> of the order of the mappings in the map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:feedMapWithXmlList"><apiName>feedMapWithXmlList</apiName><shortdesc>
		 Feeds argument map with argument list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>			the map to be fed.
		 </apiDesc></apiParam><apiParam><apiItemName>list</apiItemName><apiType value="XMLList"/><apiDesc>			the list to retrieve entries.
		 </apiDesc></apiParam><apiParam><apiItemName>typeCoercion</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>	if <codeph>true</codeph> performs a type coercion to Boolean if some String is "true" or "false", or a type coercion to Number if some String is a Number <codeph>(i.e. !isNaN(Number(string)) == true)</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Feeds argument <codeph>map</codeph> with argument <codeph>list</codeph>.
		 <p>The name of the nodes become keys and the values of the nodes become values of the <codeph>IMap</codeph> object.</p>
		 
		 </apiDesc><example>
		 
		 <codeblock rev="3.0">
		 import org.as3collections.maps.HashMap;
		 import org.as3collections.utils.MapUtil;
		 
		 var map:IMap = new HashMap();
		 var xml:XML = &lt;index&gt;&lt;key1&gt;value1&lt;/key1&gt;&lt;key2&gt;value2&lt;/key2&gt;&lt;/index&gt;;
		 
		 MapUtil.feedMapFromXmlList(map, xml.children());
		 
		 trace(map); // [key1=value1,key2=value2]
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:getTypedListMap"><apiName>getTypedListMap</apiName><shortdesc>
		 Returns a new TypedListMap with the wrapMap argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.maps:TypedListMap</apiOperationClassifier><apiDesc>a new <codeph>TypedListMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>	the target map to be wrapped by the <codeph>TypedListMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by the returned <codeph>TypedListMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by the returned <codeph>TypedListMap</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedListMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:getTypedMap"><apiName>getTypedMap</apiName><shortdesc>
		 Returns a new TypedMap with the wrapMap argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.maps:TypedMap</apiOperationClassifier><apiDesc>a new <codeph>TypedMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	the target map to be wrapped by the <codeph>TypedMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by the returned <codeph>TypedMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by the returned <codeph>TypedMap</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:getTypedSortedMap"><apiName>getTypedSortedMap</apiName><shortdesc>
		 Returns a new TypedSortedMap with the wrapMap argument wrapped.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc> 	if the <codeph>wrapMap</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeKeys</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>typeValues</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more keys or values in the <codeph>wrapMap</codeph> argument are incompatible with the <codeph>typeKeys</codeph> or <codeph>typeValues</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections.maps:TypedSortedMap</apiOperationClassifier><apiDesc>a new <codeph>TypedSortedMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 </apiDesc></apiReturn><apiParam><apiItemName>wrapMap</apiItemName><apiOperationClassifier>org.as3collections:ISortedMap</apiOperationClassifier><apiDesc>	the target map to be wrapped by the <codeph>TypedSortedMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeKeys</apiItemName><apiType value="any"/><apiDesc>the type of the keys allowed by the returned <codeph>TypedSortedMap</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>typeValues</apiItemName><apiType value="any"/><apiDesc>the type of the values allowed by the returned <codeph>TypedSortedMap</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>TypedSortedMap</codeph> with the <codeph>wrapMap</codeph> argument wrapped.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:MapUtil:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of the map argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/><apiDesc>the string representation of the target map.
 		 </apiDesc></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>the target map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the string representation of the <codeph>map</codeph> argument.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.utils:MapUtil:MapUtil"><apiName>MapUtil</apiName><shortdesc>
		 MapUtil is a static class and shouldn't be instantiated.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	<codeph>MapUtil</codeph> is a static class and shouldn't be instantiated.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
		 <codeph>MapUtil</codeph> is a static class and shouldn't be instantiated.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections.utils:CollectionUtil"><apiName>CollectionUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections.utils:CollectionUtil:containsDuplication"><apiName>containsDuplication</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:containsOnlyType"><apiName>containsOnlyType</apiName><shortdesc>
		 Returns true if the collection contains only elements of the type argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the collection contains only elements of the <codeph>type</codeph> argument. If the collection is <codeph>null</codeph> or empty returns <codeph>false</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to check. May be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>	the type of the elements.
		 </apiDesc></apiParam><apiParam><apiItemName>strict</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>		defines if the type of the elements should be strictly equal.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the collection contains only elements of the <codeph>type</codeph> argument.
		 <p>This method uses <codeph>org.as3utils.ArrayUtil.containsOnlyType()</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:equalConsideringOrder"><apiName>equalConsideringOrder</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between the two arguments.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection1</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the first collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection2</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the second collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between the two arguments.
		 If one of the collections or both collections are <codeph>null</codeph> it will be returned <codeph>false</codeph>.
		 <p>Two different objects are considered equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 <li>elements have exactly the same order</li>
		 </ul></p>
		 <p>This implementation <b>takes care</b> of the order of the elements in the collections.
		 So, for two collections are equal the order of elements returned by the iterator object must be equal.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:equalNotConsideringOrder"><apiName>equalNotConsideringOrder</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection1</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the first collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection2</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the second collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 If one of the collections or both collections are <codeph>null</codeph> it will be returned <codeph>false</codeph>.
		 <p>Two different objects are considered equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class (i.e. if they have <b>exactly</b> the same type)</li>
		 <li>object A contains all elements of object B</li>
		 <li>object B contains all elements of object A</li>
		 </ul></p>
		 <p>This implementation <b>does not takes care</b> of the order of the elements in the collections.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:filterByType"><apiName>filterByType</apiName><shortdesc>
		 Returns the collection object containing only objects of the type of the type argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the collection object containing only objects of the type of the <codeph>type</codeph> argument.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection for filtering. May be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>		the type of the objects that should remain in the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the collection object containing only objects of the type of the <codeph>type</codeph> argument.
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:getDuplicate"><apiName>getDuplicate</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:maxValueIndex"><apiName>maxValueIndex</apiName><shortdesc>
		 Returns the index position of the largest number in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/><apiDesc>the index position of the largest number in the collection object. If the collection argument is <codeph>null</codeph> or empty then the return is -1.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection object to check. May be <codeph>null</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index position of the largest number in the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:maxValue"><apiName>maxValue</apiName><shortdesc>
		 Returns the largest number in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/><apiDesc>the largest number in the collection object. If the collection argument is <codeph>null</codeph> or empty then the return is <codeph>NaN</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection object to check. May be <codeph>null</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the largest number in the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:removeAllOccurances"><apiName>removeAllOccurances</apiName><shortdesc>
		 Removes all occurances of a the given element argument from the given collection argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc/></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all occurances of a the given <codeph>element</codeph> argument from the given collection argument.
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:removeDuplicate"><apiName>removeDuplicate</apiName><shortdesc>
		 Removes duplicated objects.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the collection object without duplicated objects.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to remove duplicated objects.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes duplicated objects.
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:shuffle"><apiName>shuffle</apiName><shortdesc>
		 Shuffles the position of the elements of the given collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the modified collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to shuffle. May be <codeph>null</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Shuffles the position of the elements of the given <codeph>collection</codeph>.
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortAlphabeticallyByObjectProperty"><apiName>sortAlphabeticallyByObjectProperty</apiName><shortdesc>
		 Sorts the collection of objects alphabetically through the object's property.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>		the collection to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>		the name of the property to be recovered and compared between the objects.
		 </apiDesc></apiParam><apiParam><apiItemName>comparison</apiItemName><apiType value="org.as3coreaddendum.system.comparators:AlphabeticalComparison"/><apiDesc>	indicates which type of comparison will be used.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the collection of objects alphabetically through the object's <codeph>property</codeph>.
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortAlphabeticallyByObjectProperty</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortAlphabetically"><apiName>sortAlphabetically</apiName><shortdesc>
		 Sorts the collection of String objects alphabetically.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>		the collection to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>comparison</apiItemName><apiType value="org.as3coreaddendum.system.comparators:AlphabeticalComparison"/><apiDesc>	indicates which type of comparison will be used.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the collection of <codeph>String</codeph> objects alphabetically.
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortAlphabetically</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortAscendingByObjectProperty"><apiName>sortAscendingByObjectProperty</apiName><shortdesc>
		 Sorts the collection of objects ascending through the object's property (must be a numeric value).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to sort.
		 </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>	the name of the property to be recovered and compared between the objects.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the collection of objects ascending through the object's property (must be a numeric value).
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortAscendingByObjectProperty</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortAscending"><apiName>sortAscending</apiName><shortdesc>
		 Sorts the collection of Number objects ascending.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to sort.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the collection of <codeph>Number</codeph> objects ascending.
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortAscending</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortDescendingByObjectProperty"><apiName>sortDescendingByObjectProperty</apiName><shortdesc>
		 Sorts the array of objects descending through the object's property (must be a numeric value).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to sort. 	
		 </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>	the name of the property to be recovered and compared between the objects. 	
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the array of objects descending through the object's property (must be a numeric value).
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortDescendingByObjectProperty</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:sortDescending"><apiName>sortDescending</apiName><shortdesc>
		 Sorts the array of Number objects descending.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>the sorted collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to sort.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the array of <codeph>Number</codeph> objects descending.
		 <p>This method uses the <codeph>org.as3coreaddendum.utils.ArrayUtil.sortDescending</codeph> method.</p>
		 <p>This method modifies the original collection. Be sure that it's not a ready-only collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections.utils:CollectionUtil:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of the collection argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/><apiDesc>the string representation of the target collection.
 		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the target collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the string representation of the <codeph>collection</codeph> argument.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections.utils:CollectionUtil:CollectionUtil"><apiName>CollectionUtil</apiName><shortdesc>
		 CollectionUtil is a static class and shouldn't be instantiated.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	<codeph>CollectionUtil</codeph> is a static class and shouldn't be instantiated.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
		 <codeph>CollectionUtil</codeph> is a static class and shouldn't be instantiated.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="org.as3collections"><apiName>org.as3collections</apiName><apiClassifier id="org.as3collections:AbstractList"><apiName>AbstractList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseClassifier>org.as3collections:AbstractArrayCollection</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:AbstractList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAllAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which to insert the first element from the specified collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).
		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.
		 <p>This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using <codeph>addAt</codeph>.
		 Other implementations can override this method for efficiency.</p>
		 <p>Note that this implementation throws an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this list (optional operation).
		 <p>This implementation calls <codeph>addAllAt(size(), collection)</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden (assuming the specified collection is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:add"><apiName>add</apiName><shortdesc>
		 Appends the specified element to the end of this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Appends the specified element to the end of this list (optional operation).
		 <p>Lists that support this operation may place limitations on what elements may be added to this list.
		 In particular, some lists will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Lists classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a list refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a list always contains the specified element after this call returns.</p>
		 <p>This implementation calls <codeph>addAt(size(), element)</codeph>.</p>
		 <p>Note that this implementation throws an <codeph>UnsupportedOperationError</codeph> unless <codeph>addAt</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractList:getAt"><apiName>getAt</apiName><shortdesc>
		 
		 Returns the element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the element to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the element at the specified position in this list.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	the position in the list from which to start searching for the element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 <p>If all elements in this list and <codeph>element</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this list using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>		the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	the position in the list from which to start searching for the element. The default is the maximum value allowed for an index. If you do not specify <codeph>fromIndex</codeph>, the search starts at the last item in the list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>last occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 <p>If all elements in this list and <codeph>element</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this list using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.lastIndexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IListIterator"><linktext>IListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the element to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the element at the specified position in this list (optional operation).
		 Shifts any subsequent elements to the left (subtracts one from their indices).
		 Returns the element that was removed from the list. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>a new collection containing all the removed elements.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the elements whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent elements to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the elements in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the elements in this list.
		 This implementation uses native <codeph>Array.reverse</codeph> method.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new list that is a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subList</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new list that is a view of the portion of this list between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>This list should not be modified.</p>
		 <p>The returned list should support all of the optional list operations supported by this list.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:AbstractList:AbstractList"><apiName>AbstractList</apiName><shortdesc>
		 This is an abstract class and shouldn't be instantiated directly.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the list.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 This is an abstract class and shouldn't be instantiated directly.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:TypedCollection"><apiName>TypedCollection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ITypeable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:TypedCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 The collection is validated with the validateCollection method to be forwarded to wrappedCollection.addAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the types of one or more elements in the <codeph>collection</codeph> argument are incompatible with the type of this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The collection is validated with the <codeph>validateCollection</codeph> method to be forwarded to <codeph>wrappedCollection.addAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:add"><apiName>add</apiName><shortdesc>
		 The element is validated with the validateType method to be forwarded to wrappedCollection.add.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the element is incompatible with the type of this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The element is validated with the <codeph>validateType</codeph> method to be forwarded to <codeph>wrappedCollection.add</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:clear"><apiName>clear</apiName><shortdesc>
		 Forwards the call to wrappedCollection.clear.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.clear</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new TypedCollection object with the clone of the wrappedCollection object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>TypedCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>TypedCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.containsAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.containsAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.containsAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:contains"><apiName>contains</apiName><shortdesc>
		 Forwards the call to wrappedCollection.contains.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.contains</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.contains</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method first checks if other argument is a TypedCollection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method first checks if <codeph>other</codeph> argument is a <codeph>TypedCollection</codeph>.
		 If not it returns <codeph>false</codeph>. If <codeph>true</codeph> it checks the <codeph>type</codeph> property of both lists.
		 If they are different it returns <codeph>false</codeph>.
		 Otherwise it uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:TypedCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Forwards the call to wrappedCollection.isEmpty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.isEmpty</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.isEmpty</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Forwards the call to wrappedCollection.iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>the return of the call <codeph>wrappedCollection.iterator</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.iterator</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.removeAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.removeAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.removeAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:remove"><apiName>remove</apiName><shortdesc>
		 Forwards the call to wrappedCollection.remove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.remove</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.remove</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.retainAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.retainAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.retainAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:size"><apiName>size</apiName><shortdesc>
		 Forwards the call to wrappedCollection.size.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedCollection.size</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.size</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Forwards the call to wrappedCollection.toArray.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>the return of the call <codeph>wrappedCollection.toArray</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.toArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:TypedCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:TypedCollection:TypedCollection"><apiName>TypedCollection</apiName><shortdesc>
		 Constructor, creates a new TypedCollection object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapCollection</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the <codeph>type</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the types of one or more elements in the <codeph>wrapCollection</codeph> argument are incompatible with the <codeph>type</codeph> argument.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapCollection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the target collection to wrap.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="any"/><apiDesc>			the type of the elements allowed by this collection.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>TypedCollection</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:IMapEntry"><apiName>IMapEntry</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3collections:MapEntry"><apiName>MapEntry</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMapEntry</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:MapEntry:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new MapEntry object with the same key-value mapping.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>MapEntry</codeph> object with the same key-value mapping.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>MapEntry</codeph> object with the same key-value mapping.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:MapEntry:equals"><apiName>equals</apiName><shortdesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the other object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs an arbitrary, specific evaluation of equality between this object and the <codeph>other</codeph> object.
		 <p>This implementation considers two differente objects equal if:</p>
		 <p>
		 <ul><li>object A and object B are instances of the same class</li>
		 <li>A.key == B.key</li>
		 <li>A.value == B.value</li>
		 </ul></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:MapEntry:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:MapEntry:MapEntry"><apiName>MapEntry</apiName><shortdesc>
		 Constructor, creates a new MapEntry object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key represented by this entry.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value represented by this entry.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>MapEntry</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:IListIterator"><apiName>IListIterator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into the list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the list has changed as a result of the call. Returns <codeph>false</codeph> if the list does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by <codeph>next</codeph>, if any, and after the next element that would be returned by <codeph>previous</codeph>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new element. (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 Returns true if the iteration has more elements when traversing the list in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more elements when traversing the list in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 Returns the index of the element that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>next</codeph>, or list size if list iterator is at end of list.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the element that would be returned by a subsequent call to <codeph>next</codeph>. (Returns list size if the list iterator is at the end of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 Returns the index of the element that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if list iterator is at beginning of list.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the element that would be returned by a subsequent call to <codeph>previous</codeph>. (Returns -1 if the list iterator is at the beginning of the list.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>			if the iteration has no previous elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the list was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListIterator:org.as3collections:IListIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last element returned by next or previous with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element with which to replace the last element returned by <codeph>next</codeph> or <codeph>previous</codeph>. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last element returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified element (optional operation). This call can be made only if neither <codeph>IListIterator.remove</codeph> nor <codeph>IListIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:ISortedMap"><apiName>ISortedMap</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseInterface>org.as3collections:IListMap</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:ISortedMap:org.as3collections:ISortedMap:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="org.as3collections:UniqueCollection"><apiName>UniqueCollection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:UniqueCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 If the specified collection is empty returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	 if the specified collection contains a <codeph>null</codeph> element and <codeph>wrappedCollection</codeph> does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if the specified collection is <codeph>null</codeph> or empty. Otherwise returns the return of the call <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to forward to <codeph>wrappedCollection.addAll</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If the specified collection is empty returns <codeph>false</codeph>. Otherwise, it clones the specified collection, removes all elements that already are in the <codeph>wrappedCollection</codeph> and removes all duplicates. Then it forwards the call to <codeph>wrappedCollection.addAll</codeph> sending the cloned and filtered collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:add"><apiName>add</apiName><shortdesc>
		 If wrappedCollection.contains(element) returns true, then this method returns false.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>false</codeph> if <codeph>wrappedCollection.contains(element)</codeph> returns <codeph>true</codeph>. Otherwise returns the return of the call <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to forward to <codeph>wrappedCollection.add</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If <codeph>wrappedCollection.contains(element)</codeph> returns <codeph>true</codeph>, then this method returns <codeph>false</codeph>. Otherwise, it forwards the call to <codeph>wrappedCollection.add</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:clear"><apiName>clear</apiName><shortdesc>
		 Forwards the call to wrappedCollection.clear.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.clear</codeph>.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a new UniqueCollection object with the clone of the wrappedCollection object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>a new <codeph>UniqueCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a new <codeph>UniqueCollection</codeph> object with the clone of the <codeph>wrappedCollection</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.containsAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.containsAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.containsAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:contains"><apiName>contains</apiName><shortdesc>
		 Forwards the call to wrappedCollection.contains.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.contains</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.contains</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalNotConsideringOrder method to perform equality, sending this collection and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this collection and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:UniqueCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Forwards the call to wrappedCollection.isEmpty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.isEmpty</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.isEmpty</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Forwards the call to wrappedCollection.iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>the return of the call <codeph>wrappedCollection.iterator</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.iterator</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.removeAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.removeAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.removeAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:remove"><apiName>remove</apiName><shortdesc>
		 Forwards the call to wrappedCollection.remove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.remove</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.remove</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Forwards the call to wrappedCollection.retainAll.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>the return of the call <codeph>wrappedCollection.retainAll</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.retainAll</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:size"><apiName>size</apiName><shortdesc>
		 Forwards the call to wrappedCollection.size.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the return of the call <codeph>wrappedCollection.size</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.size</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Forwards the call to wrappedCollection.toArray.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>the return of the call <codeph>wrappedCollection.toArray</codeph>.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Forwards the call to <codeph>wrappedCollection.toArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:UniqueCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:UniqueCollection:UniqueCollection"><apiName>UniqueCollection</apiName><shortdesc>
		 Constructor, creates a new UniqueCollection object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>wrapCollection</codeph> argument is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>wrapCollection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the target collection to wrap.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>UniqueCollection</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:ISortedQueue"><apiName>ISortedQueue</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:ISortedQueue:org.as3collections:ISortedQueue:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IMap"><apiName>IMap</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map contains a mapping for the specified key.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map maps one or more keys to the specified value.
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ICollection object that is a view of the mappings contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ICollection</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the mappings contained in this map.
		 The type of the objects within the map is <codeph>IMapEntry</codeph>
		 <p>Modifications in the <codeph>ICollection</codeph> object does not affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#ICollection"><linktext>ICollection</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ICollection object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ICollection</codeph> object that is a view of the keys contained in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ICollection</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ICollection object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ICollection</codeph> object that is a view of the values contained in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ICollection</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ICollection</codeph> object does not affect this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 Retrieves each property of the specified object, calling put on this map once for each property (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves each property of the specified object, calling <codeph>put</codeph> on this map once for each property (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>The effect of this call is equivalent to that of calling <codeph>put(entry.key, entry.value)</codeph> on this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>The effect of this call is equivalent to that of calling <codeph>remove</codeph> on this map once for each element in the speficied collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.
		 The elements in the specified collection are interpreted as keys.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IMap:org.as3collections:IMap:size"><apiName>size</apiName><shortdesc>
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IIterator"><apiName>IIterator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:hasNext"><apiName>hasNext</apiName><shortdesc>
		 Returns true if the iteration has more elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:next"><apiName>next</apiName><shortdesc>
		 Returns the next element in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the iteration has no more elements.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the next element in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the next element in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:pointer"><apiName>pointer</apiName><shortdesc>
		 Returns the internal pointer of the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the internal pointer of the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the internal pointer of the iteration.
		 <p>In a list or queue, the pointer should be the index (position) of the iteration, typically an <codeph>int</codeph>.</p>
		 <p>In a map, the pointer should be the key of the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:remove"><apiName>remove</apiName><shortdesc>
		 Removes from the underlying collection the last element returned by the iterator (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the <codeph>next</codeph> method has not yet been called, or the <codeph>remove</codeph> method has already been called after the last call to the <codeph>next</codeph> method.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes from the underlying collection the last element returned by the iterator (optional operation).
		 <p>This method can be called only once per call to <codeph>next</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IIterator:org.as3collections:IIterator:reset"><apiName>reset</apiName><shortdesc>
		 Resets the internal pointer of the iterator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the internal pointer of the iterator.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IQueue"><apiName>IQueue</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Retrieves and removes the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:element"><apiName>element</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue.
		 This method differs from <codeph>peek</codeph> only in that it throws an error if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:peek"><apiName>peek</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IQueue:org.as3collections:IQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:AbstractArrayCollection"><apiName>AbstractArrayCollection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:AbstractArrayCollection:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).
		 <p>This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>add</codeph> is overridden (assuming the specified collection is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:add"><apiName>add</apiName><shortdesc>
		 Ensures that this collection contains the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified element is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. Returns <codeph>false</codeph> if this collection does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ensures that this collection contains the specified element (optional operation). 
		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.
		 In particular, some collections will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the clear operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this collection (optional operation).
		 The collection will be empty after this method returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this collection doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>org.as3coreaddendum.errors.CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Returns true if this collection contains all of the elements in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains one or more <codeph>null</codeph> elements and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains all of the elements in the specified collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to be checked for containment in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains all of the elements in the specified collection. 
		 <p>This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection.
		 If all elements are so contained <codeph>true</codeph> is returned, otherwise <codeph>false</codeph>.</p>
		 <p>If all elements in this collection and all elements in <codeph>collection</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, <codeph>equals</codeph> method of the elements will be used.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:contains"><apiName>contains</apiName><shortdesc>
		 Returns true if this collection contains the specified object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains the specified object.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	object whose presence in this collection is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains the specified object.
		 <p>If all elements in this collection and <codeph>o</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this collection using <codeph>equals</codeph> method of the elements.
		 Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalNotConsideringOrder method to perform equality, sending this collection and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this collection and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalNotConsideringOrder()"><linktext>CollectionUtil.equalNotConsideringOrder()</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this collection contains no elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains no elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this collection contains no elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of elements.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IIterator"><linktext>IIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes all of this collection's elements that are also contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the removeAll operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be removed from this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of this collection's elements that are also contained in the specified collection (optional operation).
		 After this call returns, this collection will contain no elements in common with the specified collection.
		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <codeph>contains</codeph> method of the <codeph>collection</codeph> argument).
		 If it's so contained, it's removed from this collection with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this collection contains one or more elements in common with the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:remove"><apiName>remove</apiName><shortdesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if an object was removed as a result of this call.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	the object to be removed from this collection, if present.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).
		 <p>If all elements in this collection and <codeph>o</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation iterates over this collection looking for the specified element.
		 If it finds the element, it removes the element from the collection using the iterator's remove method.
		 In this case, note that this implementation throws an <codeph>UnsupportedOperationError</codeph> if the iterator returned by this collection's iterator method does not implement the <codeph>remove</codeph> method.</p>
		 <p>Otherwise this implementation uses native <codeph>Array.indexOf</codeph> method to get the index of the element and then uses native <codeph>Array.splice</codeph> method to remove it.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. 	
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be retained in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).
		 In other words, removes from this collection all of its elements that are not contained in the specified collection.
		 <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection (using <codeph>contains</codeph> method of the <codeph>collection</codeph> argument).
		 If it's not so contained, it's removed from this collection with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this collection contains one or more elements not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the number of elements in this collection.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of elements in this collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:toArray"><apiName>toArray</apiName><shortdesc>
		 
		 Returns an array containing all of the elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>a new array object containing all of the elements in this collection.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns an array containing all of the elements in this collection.
		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>
		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.
		 (In other words, this method must allocate a new array even if this collection is backed by an array).
		 The caller is thus free to modify the returned array.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractArrayCollection:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>CollectionUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/toString()"><linktext>CollectionUtil.toString()</linktext></link></related-links></apiOperation><apiConstructor id="org.as3collections:AbstractArrayCollection:AbstractArrayCollection"><apiName>AbstractArrayCollection</apiName><shortdesc>
		 This is an abstract class and shouldn't be instantiated directly.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly. In other words, if there is <i>not</i> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the collection.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 This is an abstract class and shouldn't be instantiated directly.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:SortMapBy"><apiName>SortMapBy</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="org.as3collections:SortMapBy:SortMapBy"><apiName>SortMapBy</apiName><shortdesc>
		 Constructor, creates a new SortMapBy object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If there is an attempt to instantiation outside the internal code of this class. All acceptable values will be created automaticaly by this class internaly, through the constants. There's no possibility to use this constructor externally.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>			The name of this enumeration constant.
		 </apiDesc></apiParam><apiParam><apiItemName>ordinal</apiItemName><apiType value="int"/><apiDesc>		The ordinal of this enumeration constant, that is its position in the enum declaration (where the initial constant is assigned an ordinal of zero).
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>SortMapBy</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:AbstractListMap"><apiName>AbstractListMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IListMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:AbstractListMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this map doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError	if</apiItemName><apiOperationClassifier>ArgumentError	if</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map contains a mapping for the specified key.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError	if</apiItemName><apiOperationClassifier>ArgumentError	if</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map maps one or more keys to the specified value.
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value whose presence in this map is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the mappings contained in this map (in the same order).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map (in the same order).
		 The type of the objects within the list is <codeph>IMapEntry</codeph>
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:equals"><apiName>equals</apiName><shortdesc>
		 This method uses MapUtil.equalConsideringOrder method to perform equality, sending this map and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>MapUtil.equalConsideringOrder</codeph> method to perform equality, sending this map and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/equalConsideringOrder()"><linktext>MapUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getKeyAt"><apiName>getKeyAt</apiName><shortdesc>
		 Returns the key at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the key at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the key at the specified position in this map.
		 <p>This implementation forwards the call to <codeph>keys.getAt(index)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValueAt"><apiName>getValueAt</apiName><shortdesc>
		 Returns the value at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value at the specified position in this map.
		 <p>This implementation forwards the call to <codeph>values.getAt(index)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 <p>This implementation uses <codeph>indexOfKey</codeph> method to get the index of the key/value and then calls <codeph>values.getAt</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractListMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are strictly less than toKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>toKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(toKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new <codeph>IListMap</codeph> that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	high endpoint (exclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 <p>This implementation uses <codeph>subMap(0, indexOfKey(toKey))</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>subMap</codeph> is overridden.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:indexOfKey"><apiName>indexOfKey</apiName><shortdesc>
		 Returns the position of the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the position of the specified key.
 		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the position of the specified key.
		 <p>This implementation forwards the call to <codeph>keys.indexOf(key)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:indexOfValue"><apiName>indexOfValue</apiName><shortdesc>
		 Returns the position of the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the position of the specified value.
 		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the position of the specified value.
		 <p>This implementation forwards the call to <codeph>values.indexOf(value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
 		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier><apiDesc>a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 The specified index indicates the first value that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the value with the specified index minus one.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAllAt"><apiName>putAllAt</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which to insert the first entry from the specified map.
		 </apiDesc></apiParam><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).
		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.
		 <p>This implementation iterates over the specified map, and calls this map's <codeph>putAt</codeph> operation once for each entry returned by the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation performs a for..in in the specified object, calling put on this map once for each iteration (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation performs a <codeph>for..in</codeph> in the specified object, calling <codeph>put</codeph> on this map once for each iteration (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 <p>This implementation calls <codeph>putAllAt(size(), collection)</codeph>.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> unless <codeph>putAt</codeph> is overridden (assuming the specified map is non-empty).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation calls <codeph>put(entry.key, entry.value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc>the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError											if</apiItemName><apiOperationClassifier>ArgumentError											if</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value, and the order of the key is not affected.
		 (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified collection.
		 If it's so contained, it's removed from this map with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys in common with the specified collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the mapping at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the mapping to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping at the specified position in this map (optional operation).
		 Shifts any subsequent mappings to the left (subtracts one from their indices).
		 Returns an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p> 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the mappings whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map containing all the removed mappings.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the mappings whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent mappings to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key.
		 It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified collection.
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map and calls <codeph>IIterator.remove</codeph> once for each key that are not contained in the specified collection.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:reverse"><apiName>reverse</apiName><shortdesc>
		 
		 Reverses the order of the mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Reverses the order of the mappings in this map.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setKeyAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the key previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setValueAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Returns a new map that is a view of the portion of this map between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new map that is a view of the portion of this map between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned map supports all of the optional map operations supported by this map.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 
		 Returns a new IListMap object that is a view of the portion of this map whose keys are greater than or equal to fromKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>containsKey(fromKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	low endpoint (inclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractListMap:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:AbstractListMap:AbstractListMap"><apiName>AbstractListMap</apiName><shortdesc>
		 Constructor, creates a new AbstractListMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiData>null</apiData><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	a map with wich fill this map.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new AbstractListMap object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:IList"><apiName>IList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:ICollection</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IList:org.as3collections:IList:addAllAt"><apiName>addAllAt</apiName><shortdesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAllAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this list does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which to insert the first element from the specified collection.
		 </apiDesc></apiParam><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be added to this list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).
		 The new elements will appear in this list in the order that they are returned by the specified collection's iterator.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:addAt"><apiName>addAt</apiName><shortdesc>
		 Inserts the specified element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>. 
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this list changed as a result of the call. Returns <codeph>false</codeph> if this list does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index at which the specified element is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element at the specified position in this list (optional operation).
		 Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:getAt"><apiName>getAt</apiName><shortdesc>
		 Returns the element at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the element to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the element at the specified position in this list.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:indexOf"><apiName>indexOf</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	the position in the list from which to start searching for the element (inclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
		 Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified element is incompatible with this list (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 									if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to search for.
		 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiData>0x7fffffff</apiData><apiDesc>	the position in the list from which to start searching for the element (inclusive). The default is the maximum value allowed for an index. If you do not specify <codeph>fromIndex</codeph>, the search starts at the last item in the list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>last occurrence</i> of the specified element in this list, or -1 if this list does not contain the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:listIterator"><apiName>listIterator</apiName><shortdesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListIterator</apiOperationClassifier><apiDesc>a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first element to be returned from the list iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list.
		 The specified index indicates the first element that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the element with the specified index minus one. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IListIterator"><linktext>IListIterator</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the element at the specified position in this list (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the element to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the element at the specified position in this list (optional operation).
		 Shifts any subsequent elements to the left (subtracts one from their indices).
		 Returns the element that was removed from the list. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>a new collection containing all the removed elements.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the elements whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent elements to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the elements in this list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the elements in this list.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:setAt"><apiName>setAt</apiName><shortdesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setAt</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified element is <codeph>null</codeph> and this list does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the element previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>		index of the element to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	element to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the element at the specified position in this list with the specified element (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IList:org.as3collections:IList:subList"><apiName>subList</apiName><shortdesc>
		 Returns a new list that is a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subList</codeph> operation is not supported by this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IList</apiOperationClassifier><apiDesc>a new list that is a view of the specified range within this list.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving elements (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving elements (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new list that is a view of the portion of this list between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned list supports all of the optional list operations supported by this list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:AbstractQueue"><apiName>AbstractQueue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IQueue</apiBaseInterface><apiBaseClassifier>org.as3collections:AbstractArrayCollection</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:AbstractQueue:add"><apiName>add</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiException><apiDesc> 	if the specified element is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 		if the class of the specified element prevents it from being added to this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified element cannot be inserted.
		 </apiDesc><apiItemName>flash.errors:IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this queue changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 This method differs from <codeph>offer</codeph> only in that it throws an error if the element cannot be inserted.
		 <p>This implementation returns the result of <codeph>offer</codeph> unless the element cannot be inserted.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:dequeue"><apiName>dequeue</apiName><shortdesc>
		 Retrieves and removes the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue.
		 This method differs from <codeph>poll</codeph> only in that it throws an error if this queue is empty.
		 <p>This implementation returns the result of <codeph>poll</codeph> unless the queue is empty.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:element"><apiName>element</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if this queue is empty.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue.
		 This method differs from <codeph>peek</codeph> only in that it throws an error if this queue is empty. 
		 <p>This implementation returns the result of <codeph>peek</codeph>  unless the queue is empty.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:equals"><apiName>equals</apiName><shortdesc>
		 This method uses CollectionUtil.equalConsideringOrder method to perform equality, sending this list and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>CollectionUtil.equalConsideringOrder</codeph> method to perform equality, sending this list and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/equalConsideringOrder()"><linktext>CollectionUtil.equalConsideringOrder()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractQueue:offer"><apiName>offer</apiName><shortdesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>offer</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the element was added to this queue, else <codeph>false</codeph>. 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified element into this queue if it is possible to do so immediately without violating restrictions.
		 When using a restricted queue (like <codeph>TypedQueue</codeph> and <codeph>UniqueQueue</codeph>), this method is generally preferable to <codeph>add</codeph>, which can fail to insert an element only by throwing an error. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:peek"><apiName>peek</apiName><shortdesc>
		 Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>peek</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves, but does not remove, the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractQueue:poll"><apiName>poll</apiName><shortdesc>
		 Retrieves and removes the head of this queue, or returns null if this queue is empty.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>poll</codeph> operation is not supported by this queue.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the head of this queue, or <codeph>null</codeph> if this queue is empty.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves and removes the head of this queue, or returns <codeph>null</codeph> if this queue is empty. 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="org.as3collections:AbstractQueue:AbstractQueue"><apiName>AbstractQueue</apiName><shortdesc>
		 Constructor, creates a new AbstractQueue object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>	an array to fill the queue.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>AbstractQueue</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:IIterable"><apiName>IIterable</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IIterable:org.as3collections:IIterable:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IListMapIterator"><apiName>IListMapIterator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterator</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:hasPrevious"><apiName>hasPrevious</apiName><shortdesc>
		 Returns true if the iteration has more mappings when traversing the map in the reverse direction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if the iteration has more mappings when traversing the map in the reverse direction.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:nextIndex"><apiName>nextIndex</apiName><shortdesc>
		 Returns the index of the mapping that would be returned by a subsequent call to next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>, or map size if map iterator is at end of map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>next</codeph>.
		 (Returns map size if the map iterator is at the end of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:previousIndex"><apiName>previousIndex</apiName><shortdesc>
		 Returns the index of the mapping that would be returned by a subsequent call to previous.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>, or -1 if map iterator is at beginning of map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the index of the mapping that would be returned by a subsequent call to <codeph>previous</codeph>.
		 (Returns -1 if the map iterator is at the beginning of the map.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:previous"><apiName>previous</apiName><shortdesc>
		 Returns the previous mapping in the iteration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>			if the iteration has no previous mappings.
		 </apiDesc><apiItemName>NoSuchElementError</apiItemName><apiOperationClassifier>org.as3collections.errors:NoSuchElementError</apiOperationClassifier></apiException><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous mapping in the iteration.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous mapping in the iteration.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the map was changed directly (without using the iterator) during iteration.
		 </apiDesc><apiItemName>ConcurrentModificationError</apiItemName><apiOperationClassifier>org.as3collections.errors:ConcurrentModificationError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map. (optional operation)
		 The mapping is inserted immediately before the next mapping that would be returned by <codeph>next</codeph>, if any, and after the next mapping that would be returned by <codeph>previous</codeph>, if any.
		 (If the map contains no mappings, the new mapping becomes the sole mapping on the map.)
		 The new mapping is inserted before the implicit cursor: a subsequent call to <codeph>next</codeph> would be unaffected, and a subsequent call to <codeph>previous</codeph> would return the new mapping.
		 (This call increases by one the value that would be returned by a call to <codeph>nextIndex</codeph> or <codeph>previousIndex</codeph>.) 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMapIterator:org.as3collections:IListMapIterator:set"><apiName>set</apiName><shortdesc>
		 Replaces the last mapping returned by next or previous with the specified mapping (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>set</codeph> operation is not supported by this iterator.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this list.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if neither <codeph>next</codeph> or <codeph>previous</codeph> have been called, or <codeph>remove</codeph> or <codeph>add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:IllegalStateError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:IllegalStateError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the map already contains the specified key and it is not the replaced key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the last mapping returned by <codeph>next</codeph> or <codeph>previous</codeph> with the specified mapping (optional operation).
		 This call can be made only if neither <codeph>IListMapIterator.remove</codeph> nor <codeph>IListMapIterator.add</codeph> have been called after the last call to <codeph>next</codeph> or <codeph>previous</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:ICollection"><apiName>ICollection</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IIterable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ICloneable</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:addAll"><apiName>addAll</apiName><shortdesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>addAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of an element of the specified collection prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements, or if the specified collection is <codeph>null</codeph>. 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	collection containing elements to be added to this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all of the elements in the specified collection to this collection (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:add"><apiName>add</apiName><shortdesc>
		 Ensures that this collection contains the specified element (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>add</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified element prevents it from being added to this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified element is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. Returns <codeph>false</codeph> if this collection does not permit duplicates and already contains the specified element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="any"/><apiDesc>	the element to be added.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ensures that this collection contains the specified element (optional operation). 
		 <p>Collections that support this operation may place limitations on what elements may be added to this collection.
		 In particular, some collections will refuse to add <codeph>null</codeph> elements, and others will impose restrictions on the type of elements that may be added.
		 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.</p>
		 <p>If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an error (rather than returning <codeph>false</codeph>).
		 This preserves the invariant that a collection always contains the specified element after this call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the elements from this collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the elements from this collection (optional operation).
		 The collection will be empty after this method returns.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:containsAll"><apiName>containsAll</apiName><shortdesc>
		 Returns true if this collection contains all of the elements in the specified collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 				if the types of one or more elements in the specified collection are incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains one or more <codeph>null</codeph> elements and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains all of the elements in the specified collection.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection to be checked for containment in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains all of the elements in the specified collection. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:contains"><apiName>contains</apiName><shortdesc>
		 Returns true if this collection contains the specified object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains the specified object.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	object whose presence in this collection is to be tested.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains the specified object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 Returns true if this collection contains no elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection contains no elements.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this collection contains no elements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes all elements of this collection that are also contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection has changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be removed from this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all elements of this collection that are also contained in the specified collection (optional operation).
		 After this call returns, this collection will contain no elements in common with the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:remove"><apiName>remove</apiName><shortdesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified object is incompatible with this collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified object is <codeph>null</codeph> and this collection does not permit <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if an object was removed as a result of this call.
		 </apiDesc></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="any"/><apiDesc>	the object to be removed from this collection, if present.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a single instance (only one occurrence) of the specified object from this collection, if it is present (optional operation).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#CollectionUtil/removeAllOccurances()"><linktext>CollectionUtil.removeAllOccurances()</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this collection.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more elements in this collection are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> elements (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this collection changed as a result of the call. 	
		 </apiDesc></apiReturn><apiParam><apiItemName>collection</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection containing elements to be retained in this collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the elements in this collection that are contained in the specified collection (optional operation).
		 In other words, removes from this collection all of its elements that are not contained in the specified collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:size"><apiName>size</apiName><shortdesc>
		 Returns the number of elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the number of elements in this collection.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the number of elements in this collection.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:ICollection:org.as3collections:ICollection:toArray"><apiName>toArray</apiName><shortdesc>
		 Returns an array containing all of the elements in this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>a new array object containing all of the elements in this collection.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an array containing all of the elements in this collection.
		 <p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</p>
		 <p>The returned array will be "safe" in that no references to it are maintained by this collection.
		 (In other words, this method must allocate a new array even if this collection is backed by an array).
		 The caller is thus free to modify the returned array.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:IListMap"><apiName>IListMap</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMap</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:getKeyAt"><apiName>getKeyAt</apiName><shortdesc>
		 Returns the key at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the key at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the key at the specified position in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:getValueAt"><apiName>getValueAt</apiName><shortdesc>
		 Returns the value at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value at the specified position in this map.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:headMap"><apiName>headMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are strictly less than toKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>toKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(toKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new <codeph>IListMap</codeph> that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>toKey</apiItemName><apiType value="any"/><apiDesc>	high endpoint (exclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are strictly less than <codeph>toKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:indexOfKey"><apiName>indexOfKey</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified key in this map, or -1 if this map does not contain the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the first occurrence of the specified key in this map, or -1 if this map does not contain the key.
 		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified key in this map, or -1 if this map does not contain the key.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:indexOfValue"><apiName>indexOfValue</apiName><shortdesc>
		 Returns the index of the first occurrence of the specified value in this map, or -1 if this map does not contain the value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the class of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="int"/><apiDesc>the index of the first occurrence of the specified value in this map, or -1 if this map does not contain the value.
 		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	the value to search for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the <i>first occurrence</i> of the specified value in this map, or -1 if this map does not contain the value.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:listMapIterator"><apiName>listMapIterator</apiName><shortdesc>
		 Returns a IListMapIterator object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:IListMapIterator</apiOperationClassifier><apiDesc>a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	index of first value to be returned from the iterator (by a call to the <codeph>next</codeph> method) 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a <codeph>IListMapIterator</codeph> object to iterate over the mappings in this map (in proper sequence), starting at the specified position in this map.
		 The specified index indicates the first value that would be returned by an initial call to <codeph>next</codeph>.
		 An initial call to <codeph>previous</codeph> would return the value with the specified index minus one.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:putAllAt"><apiName>putAllAt</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map contains one or more keys already added in this map.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which to insert the first entry from the specified map.
		 </apiDesc></apiParam><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (increases their indices).
		 The new entries will appear in this map in the order that they are returned by the specified map's iterator.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:putAt"><apiName>putAt</apiName><shortdesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index at which the specified entry is to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key at the specified position in this map (optional operation).
		 Shifts the entry currently at that position (if any) and any subsequent entries to the right (adds one to their indices).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:removeAt"><apiName>removeAt</apiName><shortdesc>
		 Removes the mapping at the specified position in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	the index of the mapping to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping at the specified position in this map (optional operation).
		 Shifts any subsequent mappings to the left (subtracts one from their indices).
		 Returns an <codeph>IMapEntry</codeph> object containing the mapping (key/value) that was removed from the map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes all of the mappings whose index is between fromIndex, inclusive, and toIndex, exclusive (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeRange</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map containing all the removed mappings.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start removing mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop removing mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes all of the mappings whose index is between <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive (optional operation).
		 Shifts any subsequent mappings to the left (subtracts their indices).
		 <p>If <codeph>toIndex == fromIndex</codeph>, this operation has no effect.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:reverse"><apiName>reverse</apiName><shortdesc>
		 Reverses the order of the mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reverses the order of the mappings in this map.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:setKeyAt"><apiName>setKeyAt</apiName><shortdesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setKeyAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified key prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> 											if this map already contains the specified key.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the key previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the key to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the key at the specified position in this map with the specified key (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:setValueAt"><apiName>setValueAt</apiName><shortdesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>setValueAt</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the class of the specified value prevents it from being added to this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 										if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>		if the index is out of range <codeph>(index &lt; 0 || index &gt;= size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value previously at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	index of the value to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be stored at the specified position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the value at the specified position in this map with the specified value (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:subMap"><apiName>subMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map between the specified fromIndex, inclusive, and toIndex, exclusive.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>subMap</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc>		if <codeph>fromIndex</codeph> or <codeph>toIndex</codeph> is out of range <codeph>(index &lt; 0 || index &gt; size())</codeph>.
		 </apiDesc><apiItemName>IndexOutOfBoundsError</apiItemName><apiOperationClassifier>org.as3collections.errors:IndexOutOfBoundsError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map that is a view of the specified range within this map.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromIndex</apiItemName><apiType value="int"/><apiDesc>	the index to start retrieving mappings (inclusive).
		 </apiDesc></apiParam><apiParam><apiItemName>toIndex</apiItemName><apiType value="int"/><apiDesc>	the index to stop retrieving mappings (exclusive).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map between the specified <codeph>fromIndex</codeph>, inclusive, and <codeph>toIndex</codeph>, exclusive.
		 <p>The returned map supports all of the optional map operations supported by this map.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:IListMap:org.as3collections:IListMap:tailMap"><apiName>tailMap</apiName><shortdesc>
		 Returns a new IListMap object that is a view of the portion of this map whose keys are greater than or equal to fromKey.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>	if <codeph>fromKey</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>	if <codeph>containsKey(fromKey)</codeph> returns <codeph>false</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IListMap</apiOperationClassifier><apiDesc>a new map that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>fromKey</apiItemName><apiType value="any"/><apiDesc>	low endpoint (inclusive) of the keys in the returned map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a new <codeph>IListMap</codeph> object that is a view of the portion of this map whose keys are greater than or equal to <codeph>fromKey</codeph>.
		 The returned map supports all optional map operations that this map supports.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.as3collections:AbstractHashMap"><apiName>AbstractHashMap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:AbstractHashMap:clear"><apiName>clear</apiName><shortdesc>
		 Removes all of the mappings from this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>clear</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all of the mappings from this map (optional operation).
		 The map will be empty after this call returns.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:clone"><apiName>clone</apiName><shortdesc>
		 Creates and return a shallow copy of this collection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if this map doesn't support clone.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:CloneNotSupportedError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:CloneNotSupportedError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>A new object that is a shallow copy of this instance.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates and return a shallow copy of this collection.
		 <p>This implementation always throws a <codeph>CloneNotSupportedError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 Returns true if this map contains a mapping for the specified key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map contains a mapping for the specified key.
		 <p>If all keys in this map and <codeph>key</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the keys.
		 Otherwise this implementation uses <codeph>Dictionary[key] !== undefined</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 Returns true if this map maps one or more keys to the specified value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified value is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> values (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
		 Returns <codeph>true</codeph> if this map maps one or more keys to the specified value.
		 <p>If all values in this map and <codeph>value</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the values.
		 Otherwise this implementation uses <codeph>Dictionary[value] !== undefined</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:entryCollection"><apiName>entryCollection</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the mappings contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the mappings contained in this map.
		 The type of the objects within the list is <codeph>IMapEntry</codeph>
		 <p>There's no guarantee that the order will remain constant over time.</p>
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IMapEntry"><linktext>IMapEntry</linktext></link><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:equals"><apiName>equals</apiName><shortdesc>
		 This method uses MapUtil.equalNotConsideringOrder method to perform equality, sending this map and other argument.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the arbitrary evaluation considers the objects equal.
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiType value="any"/><apiDesc>	the object to be compared for equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method uses <codeph>MapUtil.equalNotConsideringOrder</codeph> method to perform equality, sending this map and <codeph>other</codeph> argument.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/equalNotConsideringOrder()"><linktext>MapUtil.equalNotConsideringOrder()</linktext></link><link href="http://as3coreaddendum.org/en-us/documentation/asdoc/org/as3coreaddendum/system/IEquatable.html"><linktext>org.as3coreaddendum.system.IEquatable</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getKeys"><apiName>getKeys</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the keys contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the keys contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getValue"><apiName>getValue</apiName><shortdesc>
		 Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 		if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose associated value is to be returned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value to which the specified key is mapped, or <codeph>null</codeph> if this map contains no mapping for the key.
		 <p>If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contains no mapping for the key.
		 It's possible that the map explicitly maps the key to <codeph>null</codeph>.
		 The <codeph>containsKey</codeph> method may be used to distinguish these two cases.</p>
		 <p>If all keys in this map and <codeph>key</codeph> argument implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>, this implementation will iterate over this map using <codeph>equals</codeph> method of the keys.
		 Otherwise this implementation returns <codeph>Dictionary[key]</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:getValues"><apiName>getValues</apiName><shortdesc>
		 Returns an ArrayList object that is a view of the values contained in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an <codeph>ArrayList</codeph> object that is a view of the values contained in this map.
		 <p>Modifications in the <codeph>ArrayList</codeph> object doesn't affect this map.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.xml#IList"><linktext>IList</linktext></link><link href="org.as3collections.lists.xml#ArrayList"><linktext>ArrayList</linktext></link></related-links></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 
		 Returns true if this map contains no key-value mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map contains no key-value mappings.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns <codeph>true</codeph> if this map contains no key-value mappings.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:iterator"><apiName>iterator</apiName><shortdesc>
		 Returns an iterator over a set of mappings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	this method must be overridden in subclass.
 		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>org.as3collections:IIterator</apiOperationClassifier><apiDesc>an iterator over a set of values.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns an iterator over a set of mappings.
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putAllByObject"><apiName>putAllByObject</apiName><shortdesc>
		 This implementation performs a for..in in the specified object, calling put on this map once for each iteration (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAllByObject</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified object is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified object is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified object contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="Object"/><apiDesc>	the object to retrieve the properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This implementation performs a <codeph>for..in</codeph> in the specified object, calling <codeph>put</codeph> on this map once for each iteration (optional operation).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putAll"><apiName>putAll</apiName><shortdesc>
		 Copies all of the mappings from the specified map to this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of a key or value in the specified map is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified map is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys or values, and the specified map contains <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>map</apiItemName><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>	mappings to be stored in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all of the mappings from the specified map to this map (optional operation).
		 The effect of this call is equivalent to that of calling <codeph>put(k, v)</codeph> on this map once for each mapping from key <codeph>k</codeph> to value <codeph>v</codeph> in the specified map.
		 <p>This implementation iterates over the specified map, and calls this map's <codeph>put</codeph> operation once for each entry returned by the iteration.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:putEntry"><apiName>putEntry</apiName><shortdesc>
		 Associates the specified entry.value with the specified entry.key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>putEntry</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified entry is <codeph>null</codeph>, or if the specified <codeph>entry.key</codeph> or <codeph>entry.value</codeph> is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with <codeph>entry.key</codeph>, or <codeph>null</codeph> if there was no mapping for <codeph>entry.key</codeph>. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with <codeph>entry.key</codeph>, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>entry</apiItemName><apiOperationClassifier>org.as3collections:IMapEntry</apiOperationClassifier><apiDesc>	entry to put in this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified <codeph>entry.value</codeph> with the specified <codeph>entry.key</codeph> in this map (optional operation).
		 If the map previously contained a mapping for the <codeph>entry.key</codeph>, the old value is replaced by the specified <codeph>entry.value</codeph>. (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation calls <codeph>put(entry.key, entry.value)</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:put"><apiName>put</apiName><shortdesc>
		 Associates the specified value with the specified key in this map (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>put</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key or value is incompatible with this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key or value is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys or values.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for key. (A <codeph>null</codeph> return can also indicate that the map previously associated <codeph>null</codeph> with key, if the implementation supports <codeph>null</codeph> values.)
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	key with which the specified value is to be associated.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>	value to be associated with the specified key.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates the specified value with the specified key in this map (optional operation).
		 If the map previously contained a mapping for the key, the old value is replaced by the specified value.
		 (A map <codeph>m</codeph> is said to contain a mapping for a key <codeph>k</codeph> if and only if <codeph>m.containsKey(k)</codeph> would return <codeph>true</codeph>.) 
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:removeAll"><apiName>removeAll</apiName><shortdesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>removeAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of an element in the specified collection is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 											if the specified collection is <codeph>null</codeph>, or if this map does not permit <codeph>null</codeph> keys, and the specified collections contains <codeph>null</codeph> elements (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map (if it is present) for each element in the specified collection (optional operation).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map, checking each key returned by the iterator in turn to see if it's contained in the specified <codeph>keys</codeph> collection (using <codeph>contains</codeph> method of the <codeph>keys</codeph> argument).
		 If it's so contained, it's removed from this map with the iterator's <codeph>remove</codeph> method.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys in common with the specified collection.</p>
		 <p>The map will not contain mappings for the elements in the specified collection once the call returns.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:remove"><apiName>remove</apiName><shortdesc>
		 Removes the mapping for a key from this map if it is present (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>remove</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the type of the specified key is incompatible with this map (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 			if the specified key is <codeph>null</codeph> and this map does not permit <codeph>null</codeph> keys (optional).
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/><apiDesc>the previous value associated with key, or <codeph>null</codeph> if there was no mapping for <codeph>key</codeph>.
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>	the key whose mapping is to be removed from the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the mapping for a key from this map if it is present (optional operation).
		 <p>Returns the value to which this map previously associated the key, or <codeph>null</codeph> if the map contained no mapping for the key.
		 If this map permits <codeph>null</codeph> values, then a return value of <codeph>null</codeph> does not <i>necessarily</i> indicate that the map contained no mapping for the key. It's possible that the map explicitly mapped the key to <codeph>null</codeph>.</p>
		 <p>The map will not contain a mapping for the specified key once the call returns.</p>
		 <p>This implementation always throws an <codeph>UnsupportedOperationError</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:retainAll"><apiName>retainAll</apiName><shortdesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc> 	if the <codeph>retainAll</codeph> operation is not supported by this map.
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:UnsupportedOperationError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:UnsupportedOperationError</apiOperationClassifier></apiException><apiException><apiDesc> 				if the types of one or more keys in this map are incompatible with the specified collection (optional).
		 </apiDesc><apiItemName>org.as3coreaddendum.errors:ClassCastError</apiItemName><apiOperationClassifier>org.as3coreaddendum.errors:ClassCastError</apiOperationClassifier></apiException><apiException><apiDesc> 	 		if the specified collection contains a <codeph>null</codeph> element and this collection does not permit <codeph>null</codeph> keys (optional), or if the specified collection is <codeph>null</codeph>.
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if this map changed as a result of the call.
		 </apiDesc></apiReturn><apiParam><apiItemName>keys</apiItemName><apiOperationClassifier>org.as3collections:ICollection</apiOperationClassifier><apiDesc>	the collection whose elements are interpreted as keys to be retained in the map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retains only the mappings in this map that the keys are contained (as elements) in the specified collection (optional operation).
		 In other words, removes from this map all of its mappings whose keys are not contained (as elements) in the specified <codeph>keys</codeph> collection (using <codeph>contains</codeph> method of the <codeph>keys</codeph> argument).
		 The elements in the specified collection are interpreted as keys.
		 <p>This implementation iterates over this map and calls <codeph>IIterator.remove</codeph> once for each key that are not contained in the specified collection.</p>
		 <p>Note that this implementation will throw an <codeph>UnsupportedOperationError</codeph> if the iterator returned by the iterator method does not implement the <codeph>remove</codeph> method and this map contains one or more keys not present in the specified collection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:size"><apiName>size</apiName><shortdesc>
		 
		 Returns the number of key-value mappings in this map.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the number of key-value mappings in this map.
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Returns the number of key-value mappings in this map. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.as3collections:AbstractHashMap:toString"><apiName>toString</apiName><shortdesc>
		 Returns the string representation of this instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>the string representation of this instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the string representation of this instance.
		 <p>This method uses <codeph>MapUtil.toString</codeph> method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="org.as3collections.utils.xml#MapUtil/toString()"><linktext>MapUtil.toString()</linktext></link></related-links></apiOperation><apiConstructor id="org.as3collections:AbstractHashMap:AbstractHashMap"><apiName>AbstractHashMap</apiName><shortdesc>
		 Constructor, creates a new AbstractHashMap object.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>	If this class is instantiated directly, in other words, if there is <b>not</b> another class extending this class.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>IllegalOperationError</apiOperationClassifier></apiException><apiParam><apiItemName>source</apiItemName><apiData>null</apiData><apiOperationClassifier>org.as3collections:IMap</apiOperationClassifier><apiDesc>		a map with wich fill this map.
		 </apiDesc></apiParam><apiParam><apiItemName>weakKeys</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	instructs the backed <codeph>Dictionary</codeph> object to use "weak" references on object keys. If the only reference to an object is in the specified <codeph>Dictionary</codeph> object, the key is eligible for garbage collection and is removed from the table when the object is collected.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, creates a new <codeph>AbstractHashMap</codeph> object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="org.as3collections:ISortedList"><apiName>ISortedList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.as3collections:IList</apiBaseInterface><apiBaseInterface>org.as3coreaddendum.system:ISortable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.as3collections:ISortedList:org.as3collections:ISortedList:sortOn"><apiName>sortOn</apiName><shortdesc>
		 Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiType value="any"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sorts the elements in an array according to one or more fields in the array.
		 <p>Consult <codeph>Array.sortOn</codeph> in the ActionScript 3.0 Language Reference in the link below for more info.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()"><linktext>http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/Array.html#sortOn()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage></allClasses>